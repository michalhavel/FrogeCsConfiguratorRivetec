/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ProjectResponse', 'model/ForbiddenResponse', 'model/NotFoundResponse', 'model/HealthResponse', 'model/HubResponse', 'model/BadInputResponse', 'model/CreateItem', 'model/ConflictResponse', 'model/ItemCreatedResponse', 'model/StorageCreatedResponse', 'model/CreateStorage', 'model/VersionCreatedResponse', 'model/CreateVersion'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ProjectResponse'), require('../model/ForbiddenResponse'), require('../model/NotFoundResponse'), require('../model/HealthResponse'), require('../model/HubResponse'), require('../model/BadInputResponse'), require('../model/CreateItem'), require('../model/ConflictResponse'), require('../model/ItemCreatedResponse'), require('../model/StorageCreatedResponse'), require('../model/CreateStorage'), require('../model/VersionCreatedResponse'), require('../model/CreateVersion'));
  } else {
    // Browser globals (root is window)
    if (!root.ForgeDataManagement) {
      root.ForgeDataManagement = {};
    }
    root.ForgeDataManagement.ProjectsApi = factory(root.ForgeDataManagement.ApiClient, root.ForgeDataManagement.ProjectResponse, root.ForgeDataManagement.ForbiddenResponse, root.ForgeDataManagement.NotFoundResponse, root.ForgeDataManagement.HealthResponse, root.ForgeDataManagement.HubResponse, root.ForgeDataManagement.BadInputResponse, root.ForgeDataManagement.CreateItem, root.ForgeDataManagement.ConflictResponse, root.ForgeDataManagement.ItemCreatedResponse, root.ForgeDataManagement.StorageCreatedResponse, root.ForgeDataManagement.CreateStorage, root.ForgeDataManagement.VersionCreatedResponse, root.ForgeDataManagement.CreateVersion);
  }
}(this, function(ApiClient, ProjectResponse, ForbiddenResponse, NotFoundResponse, HealthResponse, HubResponse, BadInputResponse, CreateItem, ConflictResponse, ItemCreatedResponse, StorageCreatedResponse, CreateStorage, VersionCreatedResponse, CreateVersion) {
  'use strict';

  /**
   * Projects service.
   * @module api/ProjectsApi
   */

  /**
   * Constructs a new ProjectsApi. 
   * @alias module:api/ProjectsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var ForgeSDK = require('forge-apis');
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

    this.mdClient = new ForgeSDK.ProjectsApi();
    this.oauth2_access_code = new ForgeSDK.AuthClientThreeLegged('1234', '1223', 'http://localhost/', ['data:read']);

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectsApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a project for a given &#x60;project_id&#x60;. 
     * @param {String} hubId the &#x60;hub id&#x60; for the current operation
     * @param {String} projectId the &#x60;project id&#x60;
     * @param {module:api/ProjectsApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectResponse}
     */
    this.getProjectEndPoint ='/project/v1/hubs/{hub_id}/projects/{project_id}' ;
    this.getProject = function(hubId, projectId, callback) {
			//this.apiClient.applyToAuthObjects (this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']) ;
			var oauth = this.apiClient.getAuthObject(this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']);
			var pr = this.mdClient.getProject(hubId, projectId, oauth, oauth.credentials);
			if (callback === undefined) {
				return (new Promise(function (resolve, reject) {
					pr.then(function (result) { resolve(result.body); })
						.catch(function (err) { reject(err); });
				})) ;
			}

			pr.then(function (result) { callback(null, result.body); })
				.catch(function (err) { callback(err, null); });
    };

    /**
     * Callback function to receive the result of the getProjectHealth operation.
     * @callback module:api/ProjectsApi~getProjectHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns health information for the &#x60;project&#x60; domain. The health check assesses the current working status of the &#39;project&#39; domain service. 
     * @param {module:api/ProjectsApi~getProjectHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthResponse}
     */
    this.getProjectHealthEndPoint ='/project/v1/health' ;
    this.getProjectHealth = function(callback) {
			//this.apiClient.applyToAuthObjects (this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']) ;
			var oauth = this.apiClient.getAuthObject(this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']);
			var pr = this.mdClient.getProjectHealth(oauth, oauth.credentials);
			if (callback === undefined) {
				return (new Promise(function (resolve, reject) {
					pr.then(function (result) { resolve(result.body); })
						.catch(function (err) { reject(err); });
				})) ;
			}

			pr.then(function (result) { callback(null, result.body); })
				.catch(function (err) { callback(err, null); });
    };

    /**
     * Callback function to receive the result of the getProjectHub operation.
     * @callback module:api/ProjectsApi~getProjectHubCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HubResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the hub for a given &#x60;project_id&#x60;. 
     * @param {String} hubId the &#x60;hub id&#x60; for the current operation
     * @param {String} projectId the &#x60;project id&#x60;
     * @param {module:api/ProjectsApi~getProjectHubCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HubResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HubResponse}
     */
    this.getProjectHubEndPoint ='/project/v1/hubs/{hub_id}/projects/{project_id}/hub' ;
    this.getProjectHub = function(hubId, projectId, callback) {
			//this.apiClient.applyToAuthObjects (this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']) ;
			var oauth = this.apiClient.getAuthObject(this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']);
			var pr = this.mdClient.getProjectHub(hubId, projectId, oauth, oauth.credentials);
			if (callback === undefined) {
				return (new Promise(function (resolve, reject) {
					pr.then(function (result) { resolve(result.body); })
						.catch(function (err) { reject(err); });
				})) ;
			}

			pr.then(function (result) { callback(null, result.body); })
				.catch(function (err) { callback(err, null); });
    };

    /**
     * Callback function to receive the result of the postItem operation.
     * @callback module:api/ProjectsApi~postItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemCreatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new item in the &#39;data&#39; domain service. 
     * @param {String} projectId the &#x60;project id&#x60;
     * @param {module:model/CreateItem} body describe the item to be created
     * @param {module:api/ProjectsApi~postItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemCreatedResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCreatedResponse}
     */
    this.postItemEndPoint ='/data/v1/projects/{project_id}/items' ;
    this.postItem = function(projectId, body, callback) {
			//this.apiClient.applyToAuthObjects (this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']) ;
			var oauth = this.apiClient.getAuthObject(this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']);
			var pr = this.mdClient.postItem(projectId, body, oauth, oauth.credentials);
			if (callback === undefined) {
				return (new Promise(function (resolve, reject) {
					pr.then(function (result) { resolve(result.body); })
						.catch(function (err) { reject(err); });
				})) ;
			}

			pr.then(function (result) { callback(null, result.body); })
				.catch(function (err) { callback(err, null); });
    };

    /**
     * Callback function to receive the result of the postStorage operation.
     * @callback module:api/ProjectsApi~postStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageCreatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a storage location in the OSS where data can be uploaded to. 
     * @param {String} projectId the &#x60;project id&#x60;
     * @param {module:model/CreateStorage} body describe the file the storage is created for
     * @param {module:api/ProjectsApi~postStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageCreatedResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StorageCreatedResponse}
     */
    this.postStorageEndPoint ='/data/v1/projects/{project_id}/storage' ;
    this.postStorage = function(projectId, body, callback) {
			//this.apiClient.applyToAuthObjects (this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']) ;
			var oauth = this.apiClient.getAuthObject(this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']);
			var pr = this.mdClient.postStorage(projectId, body, oauth, oauth.credentials);
			if (callback === undefined) {
				return (new Promise(function (resolve, reject) {
					pr.then(function (result) { resolve(result.body); })
						.catch(function (err) { reject(err); });
				})) ;
			}

			pr.then(function (result) { callback(null, result.body); })
				.catch(function (err) { callback(err, null); });
    };

    /**
     * Callback function to receive the result of the postVersion operation.
     * @callback module:api/ProjectsApi~postVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionCreatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new version of an item in the &#39;data&#39; domain service. 
     * @param {String} projectId the &#x60;project id&#x60;
     * @param {module:model/CreateVersion} body describe the version to be created
     * @param {module:api/ProjectsApi~postVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionCreatedResponse}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VersionCreatedResponse}
     */
    this.postVersionEndPoint ='/data/v1/projects/{project_id}/versions' ;
    this.postVersion = function(projectId, body, callback) {
			//this.apiClient.applyToAuthObjects (this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']) ;
			var oauth = this.apiClient.getAuthObject(this.oauth2_access_code, this.oauth2_application, ['oauth2_access_code']);
			var pr = this.mdClient.postVersion(projectId, body, oauth, oauth.credentials);
			if (callback === undefined) {
				return (new Promise(function (resolve, reject) {
					pr.then(function (result) { resolve(result.body); })
						.catch(function (err) { reject(err); });
				})) ;
			}

			pr.then(function (result) { callback(null, result.body); })
				.catch(function (err) { callback(err, null); });
    };
  };

  return exports;
}));
