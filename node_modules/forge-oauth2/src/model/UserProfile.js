/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ForgeOauth2) {
      root.ForgeOauth2 = {};
    }
    root.ForgeOauth2.UserProfile = factory(root.ForgeOauth2.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The UserProfile model module.
   * @module model/UserProfile
   */

  /**
   * Constructs a new <code>UserProfile</code>.
   * @alias module:model/UserProfile
   * @class
   * @param userId {String} The backend user ID of the profile
   * @param userName {String} The username chosen by the user
   * @param emailId {String} The user’s email address
   * @param firstName {String} The user’s first name
   * @param lastName {String} The user’s last name
   * @param emailVerified {Boolean} true if the user’s email address has been verified false if the user’s email address has not been verified 
   * @param _2FaEnabled {Boolean} true if the user has enabled two-factor authentication false if the user has not enabled two-factor authentication 
   * @param profileImages {Object} A flat JSON object of attribute-value pairs in which the attributes specify available profile image sizes in the format sizeX<pixels> (where <pixels> is an integer that represents both height and width in pixels of square profile images) and the values are URLs for downloading the images via HTTP
   */
  var exports = function(userId, userName, emailId, firstName, lastName, emailVerified, _2FaEnabled, profileImages) {
    var _this = this;

    _this['userId'] = userId;
    _this['userName'] = userName;
    _this['emailId'] = emailId;
    _this['firstName'] = firstName;
    _this['lastName'] = lastName;
    _this['emailVerified'] = emailVerified;
    _this['2FaEnabled'] = _2FaEnabled;
    _this['profileImages'] = profileImages;
  };

  /**
   * Constructs a <code>UserProfile</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserProfile} obj Optional instance to populate.
   * @return {module:model/UserProfile} The populated <code>UserProfile</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('userId')) {
        obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
      }
      if (data.hasOwnProperty('userName')) {
        obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
      }
      if (data.hasOwnProperty('emailId')) {
        obj['emailId'] = ApiClient.convertToType(data['emailId'], 'String');
      }
      if (data.hasOwnProperty('firstName')) {
        obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
      }
      if (data.hasOwnProperty('lastName')) {
        obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
      }
      if (data.hasOwnProperty('emailVerified')) {
        obj['emailVerified'] = ApiClient.convertToType(data['emailVerified'], 'Boolean');
      }
      if (data.hasOwnProperty('2FaEnabled')) {
        obj['2FaEnabled'] = ApiClient.convertToType(data['2FaEnabled'], 'Boolean');
      }
      if (data.hasOwnProperty('profileImages')) {
        obj['profileImages'] = ApiClient.convertToType(data['profileImages'], Object);
      }
    }
    return obj;
  }

  /**
   * The backend user ID of the profile
   * @member {String} userId
   */
  exports.prototype['userId'] = undefined;
  /**
   * The username chosen by the user
   * @member {String} userName
   */
  exports.prototype['userName'] = undefined;
  /**
   * The user’s email address
   * @member {String} emailId
   */
  exports.prototype['emailId'] = undefined;
  /**
   * The user’s first name
   * @member {String} firstName
   */
  exports.prototype['firstName'] = undefined;
  /**
   * The user’s last name
   * @member {String} lastName
   */
  exports.prototype['lastName'] = undefined;
  /**
   * true if the user’s email address has been verified false if the user’s email address has not been verified 
   * @member {Boolean} emailVerified
   */
  exports.prototype['emailVerified'] = undefined;
  /**
   * true if the user has enabled two-factor authentication false if the user has not enabled two-factor authentication 
   * @member {Boolean} 2FaEnabled
   */
  exports.prototype['2FaEnabled'] = undefined;
  /**
   * A flat JSON object of attribute-value pairs in which the attributes specify available profile image sizes in the format sizeX<pixels> (where <pixels> is an integer that represents both height and width in pixels of square profile images) and the values are URLs for downloading the images via HTTP
   * @member {Object} profileImages
   */
  exports.prototype['profileImages'] = undefined;



  return exports;
}));


