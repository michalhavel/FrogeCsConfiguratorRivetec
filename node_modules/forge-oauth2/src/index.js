/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
console.warn( "WARNING: The 'forge-oauth2' npm package is deprecated in favor of the 'forge-apis' npm package, please upgrade.");

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Bearer', 'model/OAuthError', 'model/UserProfile', 'api/InformationalApi', 'api/ThreeLeggedApi', 'api/TwoLeggedApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Bearer'), require('./model/OAuthError'), require('./model/UserProfile'), require('./api/InformationalApi'), require('./api/ThreeLeggedApi'), require('./api/TwoLeggedApi'));
  }
}(function(ApiClient, Bearer, OAuthError, UserProfile, InformationalApi, ThreeLeggedApi, TwoLeggedApi) {
  'use strict';

  /**
   * Asynchronous Node.js library for the Autodesk Forge oAuth2 implementation..<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ForgeOauth2 = require('index'); // See note below*.
   * var xxxSvc = new ForgeOauth2.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ForgeOauth2.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ForgeOauth2.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ForgeOauth2.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Bearer model constructor.
     * @property {module:model/Bearer}
     */
    Bearer: Bearer,
    /**
     * The OAuthError model constructor.
     * @property {module:model/OAuthError}
     */
    OAuthError: OAuthError,
    /**
     * The UserProfile model constructor.
     * @property {module:model/UserProfile}
     */
    UserProfile: UserProfile,
    /**
     * The InformationalApi service constructor.
     * @property {module:api/InformationalApi}
     */
    InformationalApi: InformationalApi,
    /**
     * The ThreeLeggedApi service constructor.
     * @property {module:api/ThreeLeggedApi}
     */
    ThreeLeggedApi: ThreeLeggedApi,
    /**
     * The TwoLeggedApi service constructor.
     * @property {module:api/TwoLeggedApi}
     */
    TwoLeggedApi: TwoLeggedApi
  };

  return exports;
}));
