/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OAuthError', 'model/Bearer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/OAuthError'), require('../model/Bearer'));
  } else {
    // Browser globals (root is window)
    if (!root.ForgeOauth2) {
      root.ForgeOauth2 = {};
    }
    root.ForgeOauth2.TwoLeggedApi = factory(root.ForgeOauth2.ApiClient, root.ForgeOauth2.OAuthError, root.ForgeOauth2.Bearer);
  }
}(this, function(ApiClient, OAuthError, Bearer) {
  'use strict';

  /**
   * TwoLegged service.
   * @module api/TwoLeggedApi
   */

  /**
   * Constructs a new TwoLeggedApi. 
   * @alias module:api/TwoLeggedApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var ForgeSDK = require('forge-apis');
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

    /**
     * Callback function to receive the result of the authenticate operation.
     * @callback module:api/TwoLeggedApi~authenticateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bearer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST authenticate
     * Get a two-legged access token by providing your app&#39;s client ID and secret. 
     * @param {String} clientId Client ID of the app
     * @param {String} clientSecret Client secret of the app
     * @param {String} grantType Must be &#x60;&#x60;client_credentials&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.scope Space-separated list of required scopes Note: A URL-encoded space is* &#x60;&#x60;%20&#x60;&#x60;. See the* &#x60;Scopes &lt;/en/docs/oauth/v2/overview/scopes&gt;&#x60; *page for more information on when scopes are required. 
     * @param {module:api/TwoLeggedApi~authenticateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bearer}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Bearer}
     */
    this.authenticateEndPoint ='/authentication/v1/authenticate' ;
    this.authenticate = function(clientId, clientSecret, grantType, opts, callback) {
      var scope =opts.scope.split(' ');
  		var req = new ForgeSDK.AuthClientTwoLegged(clientId, clientSecret, scope, false);
      var pr = req.authenticate () ;
			if (callback === undefined) {
				return (new Promise(function (resolve, reject) {
					pr.then(function (result) { resolve(result); })
						.catch(function (err) { reject(err); });
				})) ;
			}

			pr.then(function (result) { callback(null, result); })
				.catch(function (err) { callback(err, null); });
    };
  };

  return exports;
}));
