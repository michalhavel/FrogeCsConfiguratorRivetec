/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OAuthError', 'model/Bearer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/OAuthError'), require('../model/Bearer'));
  } else {
    // Browser globals (root is window)
    if (!root.ForgeOauth2) {
      root.ForgeOauth2 = {};
    }
    root.ForgeOauth2.ThreeLeggedApi = factory(root.ForgeOauth2.ApiClient, root.ForgeOauth2.OAuthError, root.ForgeOauth2.Bearer);
  }
}(this, function(ApiClient, OAuthError, Bearer) {
  'use strict';

  /**
   * ThreeLegged service.
   * @module api/ThreeLeggedApi
   */

  /**
   * Constructs a new ThreeLeggedApi. 
   * @alias module:api/ThreeLeggedApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var ForgeSDK = require('forge-apis');
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

    /**
     * Callback function to receive the result of the authorize operation.
     * @callback module:api/ThreeLeggedApi~authorizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET authorize
     * This is the browser URL to redirect an end user to in order to acquire the user’s consent for your app to access the specified resources. Note: You do not call this URL directly in your server code. See the Get a 3-Legged Token tutorial for more information on how to use this endpoint. 
     * @param {String} clientId Client ID of the app
     * @param {String} responseType Must be code
     * @param {String} redirectUri URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.scope Space-separated list of required scopes Note: A URL-encoded space is* &#x60;&#x60;%20&#x60;&#x60;. See the* &#x60;Scopes &lt;/en/docs/oauth/v2/overview/scopes&gt;&#x60; *page for more information on when scopes are required. 
     * @param {String} opts.state A URL-encoded payload containing arbitrary data that the authentication flow will pass back verbatim in a state query parameter to the callback URL 
     * @param {module:api/ThreeLeggedApi~authorizeCallback} callback The callback function, accepting three arguments: error, data, response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.authorizeEndPoint ='/authentication/v1/authorize' ;
    this.authorize = function(clientId, responseType, redirectUri, opts, callback) {
      opts = opts || {};

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null)
        throw "Missing the required parameter 'clientId' when calling authorize";

      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null)
        throw "Missing the required parameter 'responseType' when calling authorize";

      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null)
        throw "Missing the required parameter 'redirectUri' when calling authorize";

      var formParams = {
        'client_id': clientId,
        'response_type': responseType,
        'redirect_uri': redirectUri,
        'scope': opts['scope'],
        'state': opts['state']
      };
      var params = [] ;
      for (var key in formParams) {
        if ( formParams [key] === undefined || formParams [key] === null )
          continue ;
        params.push (formParams [key] + '=' + encodeURI(formParams [key])) ;
      }
      var url =this.authorizeEndPoint + '?' + params.join ('&') ;
      if ( callback !== undefined )
        callback (null, url) ;
      return (url) ;
    };

    /**
     * Callback function to receive the result of the gettoken operation.
     * @callback module:api/ThreeLeggedApi~gettokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bearer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST gettoken
     * Exchange an authorization code extracted from a GET authorize callback for a three-legged access token. 
     * @param {String} clientId Client ID of the app
     * @param {String} clientSecret Client secret of the app
     * @param {String} grantType Must be &#x60;&#x60;authorization_code&#x60;&#x60;
     * @param {String} code The autorization code captured from the code query parameter when the GET authorize redirected back to the callback URL 
     * @param {String} redirectUri URL-encoded callback URL that the end user will be redirected to after completing the authorization flow Note: This must match the pattern of the callback URL field of the app’s registration in the My Apps section. The pattern may include wildcards after the hostname, allowing different redirect_uri values to be specified in different parts of your app. 
     * @param {module:api/ThreeLeggedApi~gettokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bearer}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Bearer}
     */
    this.gettokenEndPoint ='/authentication/v1/gettoken' ;
	  this.gettoken = function(clientId, clientSecret, grantType, code, redirectUri, callback, scope) {
		  var scope =scope || 'data:read' ;
		  scope =scope.split(' ')
		  var req = new ForgeSDK.AuthClientThreeLegged(clientId, clientSecret, redirectUri, scope);
      var pr = req.getToken (code) ;
			if (callback === undefined) {
				return (new Promise(function (resolve, reject) {
					pr.then(function (result) { resolve(result); })
						.catch(function (err) { reject(err); });
				})) ;
			}

			pr.then(function (result) { callback(null, result); })
				.catch(function (err) { callback(err, null); });
    };

    /**
     * Callback function to receive the result of the refreshtoken operation.
     * @callback module:api/ThreeLeggedApi~refreshtokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bearer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST refreshtoken
     * Acquire a new access token by using the refresh token provided by the POST gettoken endpoint. See the Field Guide for more information about refresh tokens. 
     * @param {String} clientId Client ID of the app
     * @param {String} clientSecret Client secret of the app
     * @param {String} grantType Must be &#x60;&#x60;refresh_token&#x60;&#x60;
     * @param {String} refreshToken The refresh token used to acquire a new access token 
     * @param {Object} opts Optional parameters
     * @param {String} opts.scope Space-separated list of required scopes If this parameter is omitted, the returned access token will have the same scopes as the original access token. If this parameter is specified, it must represent a subset of the scopes present in the original access token. Note: A URL-encoded space is %20. 
     * @param {module:api/ThreeLeggedApi~refreshtokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bearer}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Bearer}
     */
    this.refreshtokenEndPoint ='/authentication/v1/refreshtoken' ;
	  this.refreshtoken = function(clientId, clientSecret, grantType, refreshToken, opts, callback) {
		  var scope =( typeof opts === 'string' ? opts : opts.scope).split(' ');
		  var credential ={ refresh_token: refreshToken };
		  var req = new ForgeSDK.AuthClientThreeLegged(clientId, clientSecret, callback, scope);
		  var pr = req.refreshToken (credential) ;
    		if (callback === undefined) {
				return (new Promise(function (resolve, reject) {
					pr.then(function (result) { resolve(result); })
						.catch(function (err) { reject(err); });
				})) ;
			}

			pr.then(function (result) { callback(null, result); })
				.catch(function (err) { callback(err, null); });
    };
  };

  return exports;
}));
