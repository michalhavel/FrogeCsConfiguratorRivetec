{"ast":null,"code":"import _classCallCheck from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n//import Snap from 'imports-loader?this=>window,fix=>module.exports=0!snapsvg/dist/snap.svg.js'\n\n/* eslint-disable */\nimport EventsEmitter from '../EventsEmitter';\nimport './Viewer.Tooltip.css'; /// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\n\nvar $ = window.$;\nvar THREE = window.THREE;\n\nvar ViewerTooltip =\n/*#__PURE__*/\nfunction (_EventsEmitter) {\n  _inherits(ViewerTooltip, _EventsEmitter);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n  function ViewerTooltip(viewer) {\n    var _this;\n\n    _classCallCheck(this, ViewerTooltip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ViewerTooltip).call(this));\n    _this.markerId = _this.guid();\n    _this.svgId = _this.guid();\n    var htmlMarker = \"\\n      <div id=\\\"\".concat(_this.markerId, \"\\\" class=\\\"tooltip-marker\\\">\\n        <svg id=\\\"\").concat(_this.svgId, \"\\\"></svg>\\n      </div>\");\n    viewer.toolController.registerTool(_assertThisInitialized(_assertThisInitialized(_this)));\n    $(viewer.container).append(htmlMarker);\n    _this.$marker = $(\"#\".concat(_this.markerId)); // this.pointer = this.createPointer(\n    //   $(`#${this.svgId}`)[0])\n\n    _this.viewer = viewer;\n    _this.active = false;\n    return _this;\n  } /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  // createPointer (element) {\n  //   const snap = Snap(element)\n  //   let circle = snap.paper.circle(\n  //     25, 25, 0)\n  //   circle.attr({\n  //     stroke: '#00FF00',\n  //     fillOpacity: 0.4,\n  //     fill: '#00FF00',\n  //     strokeWidth: 2,\n  //     opacity: 1\n  //   })\n  //   return circle\n  // }\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  // animatePointer (id) {\n  //   if(this.animateId === id) {\n  //     this.pointer.attr({\n  //       fillOpacity: 0.8,\n  //       opacity: 1,\n  //       r: 0\n  //     })\n  //     this.pointer.animate({\n  //         fillOpacity: 0.2,\n  //         opacity: 0.4,\n  //         r: 16\n  //       },\n  //       2000,\n  //       mina.easein, () => {\n  //         if (this.pointerVisible) {\n  //           this.animatePointer(id)\n  //         }\n  //       })\n  //   }\n  // }\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(ViewerTooltip, [{\n    key: \"setContent\",\n    value: function setContent(html, selector) {\n      this.tooltipSelector = selector;\n      $(this.viewer.container).append(html);\n    } /////////////////////////////////////////////////////////////////\n    // Tool names\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getNames\",\n    value: function getNames() {\n      return ['Viewer.Tooltip.Tool'];\n    } /////////////////////////////////////////////////////////////////\n    // Tool name\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'Viewer.Tooltip.Tool';\n    } /////////////////////////////////////////////////////////////////\n    // Activate Tool\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      if (!this.active) {\n        this.active = true;\n        this.viewer.toolController.activateTool(this.getName());\n        $(this.tooltipSelector).css({\n          display: 'block'\n        });\n        this.emit('activate');\n      }\n    } /////////////////////////////////////////////////////////////////\n    // Deactivate tool\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      if (this.active) {\n        this.active = false;\n        this.viewer.toolController.deactivateTool(this.getName());\n        $(this.tooltipSelector).css({\n          display: 'none'\n        });\n        this.pointerVisible = false;\n        this.$marker.css({\n          display: 'none'\n        });\n        this.emit('deactivate');\n      }\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleSingleClick\",\n    value: function handleSingleClick(event, button) {\n      return false;\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(event) {\n      var $offset = $(this.viewer.container).offset();\n      $(this.tooltipSelector).css({\n        top: event.clientY - $offset.top - 30 + 'px',\n        left: event.clientX - $offset.left + 'px'\n      });\n      var screenPoint = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      var worldPoint = this.screenToWorld(screenPoint);\n\n      if (worldPoint && this.active) {\n        //console.log(worldPoint)\n        var offset = $(this.viewer.container).offset();\n        this.$marker.css({\n          left: screenPoint.x - offset.left - this.$marker.width() / 2,\n          top: screenPoint.y - offset.top - this.$marker.height() / 2,\n          display: 'block'\n        });\n\n        if (!this.pointerVisible) {\n          this.pointerVisible = true;\n          this.animateId = this.guid(); // this.animatePointer(\n          //   this.animateId)\n        }\n      } else {\n        this.pointerVisible = false;\n        this.$marker.css({\n          display: 'none'\n        }); // NOT USING DROPDOWN IN XYPLANE SAMPLE SO NO NEED TO GET ATTR FOR MODEL NAME\n        // ERRORS WHEN UNCOMMENTED SINCE ATTR IS UNDEFINED, SINCE OPTS IS ALSO IN DROPDOWN CLASS\n        // this.pointer.attr({\n        //   r: 0\n        // })\n      }\n\n      return false;\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"screenToWorld\",\n    value: function screenToWorld(screenPoint) {\n      var viewport = this.viewer.navigation.getScreenViewport();\n      var n = {\n        x: (screenPoint.x - viewport.left) / viewport.width,\n        y: (screenPoint.y - viewport.top) / viewport.height\n      };\n      return this.viewer.utilities.getHitPoint(n.x, n.y);\n    } ///////////////////////////////////////////////////////////////////////////\n    // world -> screen coords conversion\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"worldToScreen\",\n    value: function worldToScreen(worldPoint, camera) {\n      var p = new THREE.Vector4();\n      p.x = worldPoint.x;\n      p.y = worldPoint.y;\n      p.z = worldPoint.z;\n      p.w = 1;\n      p.applyMatrix4(camera.matrixWorldInverse);\n      p.applyMatrix4(camera.projectionMatrix); // Don't want to mirror values with negative z (behind camera)\n      // if camera is inside the bounding box,\n      // better to throw markers to the screen sides.\n\n      if (p.w > 0) {\n        p.x /= p.w;\n        p.y /= p.w;\n        p.z /= p.w;\n      } // This one is multiplying by width/2 and height/2,\n      // and offsetting by canvas location\n\n\n      var point = this._viewer.impl.viewportToClient(p.x, p.y); // snap to the center of the pixel\n\n\n      point.x = Math.floor(point.x) + 0.5;\n      point.y = Math.floor(point.y) + 0.5;\n      return point;\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event, keyCode) {\n      return false;\n    }\n  }]);\n\n  return ViewerTooltip;\n}(EventsEmitter);\n\nexport { ViewerTooltip as default };","map":{"version":3,"sources":["E:\\GitHub\\FrogeCsConfiguratorRivetec\\Vyvoj\\src\\js\\extensions\\components\\Viewer.Tooltip\\Viewer.Tooltip.js"],"names":["EventsEmitter","$","window","THREE","ViewerTooltip","viewer","markerId","guid","svgId","htmlMarker","toolController","registerTool","container","append","$marker","active","html","selector","tooltipSelector","activateTool","getName","css","display","emit","deactivateTool","pointerVisible","event","button","$offset","offset","top","clientY","left","clientX","screenPoint","x","y","worldPoint","screenToWorld","width","height","animateId","viewport","navigation","getScreenViewport","n","utilities","getHitPoint","camera","p","Vector4","z","w","applyMatrix4","matrixWorldInverse","projectionMatrix","point","_viewer","impl","viewportToClient","Math","floor","keyCode"],"mappings":"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","sourcesContent":["//import Snap from 'imports-loader?this=>window,fix=>module.exports=0!snapsvg/dist/snap.svg.js'\r\n/* eslint-disable */\r\nimport EventsEmitter from '../EventsEmitter'\r\nimport './Viewer.Tooltip.css'\r\n\r\n/// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\r\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\r\n\r\nconst $ = window.$;\r\nconst THREE = window.THREE;\r\n\r\n\r\nexport default class ViewerTooltip extends EventsEmitter {\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Class constructor\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  constructor (viewer) {\r\n\r\n    super()\r\n\r\n    this.markerId = this.guid()\r\n\r\n    this.svgId = this.guid()\r\n\r\n    const htmlMarker = `\r\n      <div id=\"${this.markerId}\" class=\"tooltip-marker\">\r\n        <svg id=\"${this.svgId}\"></svg>\r\n      </div>`\r\n\r\n    viewer.toolController.registerTool(this)\r\n\r\n    $(viewer.container).append(htmlMarker)\r\n\r\n    this.$marker = $(`#${this.markerId}`)\r\n\r\n    // this.pointer = this.createPointer(\r\n    //   $(`#${this.svgId}`)[0])\r\n\r\n    this.viewer = viewer\r\n\r\n    this.active = false\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  // createPointer (element) {\r\n\r\n  //   const snap = Snap(element)\r\n\r\n  //   let circle = snap.paper.circle(\r\n  //     25, 25, 0)\r\n\r\n  //   circle.attr({\r\n  //     stroke: '#00FF00',\r\n  //     fillOpacity: 0.4,\r\n  //     fill: '#00FF00',\r\n  //     strokeWidth: 2,\r\n  //     opacity: 1\r\n  //   })\r\n\r\n  //   return circle\r\n  // }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  // animatePointer (id) {\r\n\r\n  //   if(this.animateId === id) {\r\n\r\n  //     this.pointer.attr({\r\n  //       fillOpacity: 0.8,\r\n  //       opacity: 1,\r\n  //       r: 0\r\n  //     })\r\n\r\n  //     this.pointer.animate({\r\n  //         fillOpacity: 0.2,\r\n  //         opacity: 0.4,\r\n  //         r: 16\r\n  //       },\r\n  //       2000,\r\n  //       mina.easein, () => {\r\n\r\n  //         if (this.pointerVisible) {\r\n\r\n  //           this.animatePointer(id)\r\n  //         }\r\n  //       })\r\n  //   }\r\n  // }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  setContent (html, selector) {\r\n\r\n    this.tooltipSelector = selector\r\n\r\n    $(this.viewer.container).append(html)\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Tool names\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  getNames () {\r\n\r\n    return ['Viewer.Tooltip.Tool']\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Tool name\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  getName () {\r\n\r\n    return 'Viewer.Tooltip.Tool'\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Activate Tool\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  activate () {\r\n\r\n    if(!this.active) {\r\n\r\n      this.active = true\r\n\r\n      this.viewer.toolController.activateTool(\r\n        this.getName())\r\n\r\n      $(this.tooltipSelector).css({\r\n        display: 'block'\r\n      })\r\n\r\n      this.emit('activate')\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Deactivate tool\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  deactivate () {\r\n\r\n    if (this.active) {\r\n\r\n      this.active = false\r\n\r\n      this.viewer.toolController.deactivateTool(\r\n        this.getName())\r\n\r\n      $(this.tooltipSelector).css({\r\n        display: 'none'\r\n      })\r\n\r\n      this.pointerVisible = false\r\n\r\n      this.$marker.css({\r\n        display: 'none'\r\n      })\r\n\r\n      this.emit('deactivate')\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  handleSingleClick (event, button) {\r\n\r\n    return false\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  handleMouseMove (event) {\r\n\r\n    const $offset = $(this.viewer.container).offset()\r\n\r\n    $(this.tooltipSelector).css({\r\n      top  : event.clientY - $offset.top - 30 + 'px',\r\n      left : event.clientX - $offset.left + 'px'\r\n    })\r\n\r\n    const screenPoint = {\r\n      x: event.clientX,\r\n      y: event.clientY\r\n    }\r\n\r\n    const worldPoint = this.screenToWorld(screenPoint)\r\n\r\n    if (worldPoint && this.active) {\r\n\r\n      //console.log(worldPoint)\r\n\r\n      const offset = $(this.viewer.container).offset()\r\n\r\n      this.$marker.css({\r\n        left: screenPoint.x - offset.left - this.$marker.width()/2,\r\n        top: screenPoint.y - offset.top - this.$marker.height()/2,\r\n        display: 'block'\r\n      })\r\n\r\n      if (!this.pointerVisible) {\r\n\r\n        this.pointerVisible = true\r\n\r\n        this.animateId = this.guid()\r\n\r\n        // this.animatePointer(\r\n        //   this.animateId)\r\n      }\r\n\r\n    } else {\r\n\r\n      this.pointerVisible = false\r\n\r\n      this.$marker.css({\r\n        display: 'none'\r\n      })\r\n\r\n\r\n      // NOT USING DROPDOWN IN XYPLANE SAMPLE SO NO NEED TO GET ATTR FOR MODEL NAME\r\n      // ERRORS WHEN UNCOMMENTED SINCE ATTR IS UNDEFINED, SINCE OPTS IS ALSO IN DROPDOWN CLASS\r\n      \r\n      // this.pointer.attr({\r\n      //   r: 0\r\n      // })\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  screenToWorld (screenPoint) {\r\n\r\n    var viewport = this.viewer.navigation.getScreenViewport()\r\n\r\n    var n = {\r\n      x: (screenPoint.x - viewport.left) / viewport.width,\r\n      y: (screenPoint.y - viewport.top ) / viewport.height\r\n    }\r\n\r\n    return this.viewer.utilities.getHitPoint(n.x, n.y)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // world -> screen coords conversion\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  worldToScreen (worldPoint, camera) {\r\n\r\n    var p = new THREE.Vector4()\r\n\r\n    p.x = worldPoint.x\r\n    p.y = worldPoint.y\r\n    p.z = worldPoint.z\r\n    p.w = 1\r\n\r\n    p.applyMatrix4(camera.matrixWorldInverse)\r\n    p.applyMatrix4(camera.projectionMatrix)\r\n\r\n    // Don't want to mirror values with negative z (behind camera)\r\n    // if camera is inside the bounding box,\r\n    // better to throw markers to the screen sides.\r\n    if (p.w > 0) {\r\n\r\n      p.x /= p.w;\r\n      p.y /= p.w;\r\n      p.z /= p.w;\r\n    }\r\n\r\n    // This one is multiplying by width/2 and height/2,\r\n    // and offsetting by canvas location\r\n    var point = this._viewer.impl.viewportToClient(p.x, p.y);\r\n\r\n    // snap to the center of the pixel\r\n    point.x = Math.floor(point.x) + 0.5;\r\n    point.y = Math.floor(point.y) + 0.5;\r\n\r\n    return point;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  handleKeyDown (event, keyCode) {\r\n\r\n    return false\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}