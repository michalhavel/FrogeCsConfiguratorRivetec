{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n// 'use strict'\nimport $ from \"jquery\";\nimport { getForgeToken } from \"./oauth\"; // import Client from './extensions/components/Client';\n\nimport ModelTransformerExtension from './extensions/Viewing.Extension.ModelTransformer'; // import EventTool from './extensions/components/Viewer.EventTool';\n\nimport importCsvData from \"./importCsvData\"; // var ModelTransformerExtension = require('./extensions/Viewing.Extension.ModelTransformer');\n// import { ModelTransformerExtension } from \"./extensions/Viewing.Extension.ModelTransformer\";\n// import ModelTransformerExtension from './extensions/Viewing.Extension.ModelTransformer';\n\nvar Autodesk = window.Autodesk;\nvar THREE = window.THREE;\nvar viewer;\nvar pointData = {};\nvar pointer;\nvar globalOffset;\nvar options = {\n  env: 'AutodeskProduction',\n  getAccessToken: getForgeToken\n};\nvar documentId = 'urn:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE4LTEyLTA1LTEwLTA0LTM3LWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL0JvZHlfT2JhbF8xLmlwdA';\nvar documentId2 = 'urn:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE5LTAxLTAzLTE0LTI4LTI4LWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL0hlYWQwMS5pcHQ'; // Button_Click\n// document.getElementById(\"openViewerBtn\").addEventListener(\"click\",function(){\n// Autodesk.Viewing.Initializer(options, function onInitialized() {\n//     Autodesk.Viewing.Document.load(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n// });\n\nlaunchViewer(documentId);\nexport function launchViewer(documentId) {\n  var viewerDiv = document.getElementById('forgeViewer');\n  viewer = new Autodesk.Viewing.Private.GuiViewer3D(viewerDiv);\n  Autodesk.Viewing.Initializer(options, function onInitialized() {\n    var errorCode = viewer.start(); // Check for initialization errors.\n\n    if (errorCode) {\n      console.error('viewer.start() error - errorCode:' + errorCode);\n      return;\n    }\n\n    Autodesk.Viewing.Document.load(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n  });\n}\n/**\r\n * Autodesk.Viewing.Document.load() success callback.\r\n * Proceeds with model initialization.\r\n */\n\nfunction onDocumentLoadSuccess(doc) {\n  // A document contains references to 3D and 2D viewables.\n  var viewables = Autodesk.Viewing.Document.getSubItemsWithProperties(doc.getRootItem(), {\n    'type': 'geometry'\n  }, true);\n\n  if (viewables.length === 0) {\n    console.error('Document contains no viewables.');\n    return;\n  } // var eventTool = new EventTool(viewer)\n  // eventTool.activate()\n  // eventTool.on('singleclick', (event) => {\n  //     pointer = event\n  // })\n  //load model.\n\n\n  viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, onGeometryLoadedHandler);\n  viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, onSelection);\n  viewer.prefs.tag('ignore-producer'); // viewer.impl.disableRollover(true); //removed for viewer version 3.2\n  // viewer.loadExtension(ModelTransformerExtension, {\n  //      parentControl: 'modelTools',\n  //      autoLoad: true\n  // })  \n  // Choose any of the available viewables.\n\n  var indexViewable = 0;\n  var lmvDoc = doc; // Everything is setup, load the model.\n\n  loadModel(viewables, lmvDoc, indexViewable);\n}\n\nvar globalOffset = viewer.model.getData().globalOffset; //Get it from first model\n\nvar options = {\n  globalOffset: globalOffset // viewer.loadModel(path, options); //Load your second model\n\n  /**\r\n  * Autodesk.Viewing.Document.load() failuire callback.\r\n  **/\n  // function onDocumentLoadFailure(viewerErrorCode) {\n  //     console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);\n  // }\n  //////////////////////////////////////////////////////////////////////////\n  // Model Geometry loaded callback\n  //\n  //////////////////////////////////////////////////////////////////////////\n\n};\n\nfunction onGeometryLoadedHandler(event) {\n  event.target.model = event.model;\n  var viewer = event.target;\n  viewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, onGeometryLoadedHandler);\n  viewer.setQualityLevel(false, false);\n  viewer.setGroundShadow(false); //viewer.showAll();\n\n  viewer.fitToView();\n} // function loadNextModel(documentId) {\n//      const extInstance = viewer.getExtension(ModelTransformerExtension);\n//      const pickVar = extInstance.panel;\n//      pickVar.tooltip.setContent(`\n//       <div id=\"pickTooltipId\" class=\"pick-tooltip\">\n//         <b>Pick position ...</b>\n//       </div>`, '#pickTooltipId')\n//     if (!pointData.point){\n//         alert('You need to select a point in your house to snap the AC first');\n//         pickVar.tooltip.activate();\n//     }\n//     else{\n//         Autodesk.Viewing.Document.load(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n//         pickVar.tooltip.deactivate();\n//     }\n// }\n\n\nfunction onSelection(event) {\n  if (event.selections && event.selections.length) {\n    pointData = viewer.clientToWorld(pointer.canvasX, pointer.canvasY, true);\n  }\n}\n/**\r\n * Autodesk.Viewing.Document.load() success callback.\r\n * Proceeds with model initialization.\r\n */\n// function onDocumentLoadSuccess(doc) {\n//     // A document contains references to 3D and 2D viewables.\n//     var viewable = Autodesk.Viewing.Document.getSubItemsWithProperties(doc.getRootItem(), {\n//         'type': 'geometry',\n//         'role': '3d'\n//     }, true);\n//     if (viewable.length === 0) {\n//         console.error('Document contains no viewables.');\n//         return;\n//     }\n//     // Choose any of the available viewable\n//     var initialViewable = viewable[0]; // You can check for other available views in your model,\n//     var svfUrl = doc.getViewablePath(initialViewable);\n//     var modelOptions = {\n//         sharedPropertyDbPath: doc.getPropertyDbPath()\n//     };\n//     var viewerDiv = document.getElementById('forgeViewer');\n//     ///////////////USE ONLY ONE OPTION AT A TIME/////////////////////////\n//     /////////////////////// Headless Viewer /////////////////////////////\n//     // viewer = new Autodesk.Viewing.Viewer3D(viewerDiv);\n//     //////////////////////////////////////////////////////////////////////\n//     //////////////////Viewer with Autodesk Toolbar///////////////////////\n//     viewer = new Autodesk.Viewing.Private.GuiViewer3D(viewerDiv);\n//     //////////////////////////////////////////////////////////////////////\n//     viewer.start(svfUrl, modelOptions, onLoadModelSuccess, onLoadModelError);\n//     // loadModel(viewable,doc,0);\n// }\n\n/**\r\n * Autodesk.Viewing.Document.load() failure callback.\r\n */\n\n\nfunction onDocumentLoadFailure(viewerErrorCode) {\n  console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);\n}\n/**\r\n * viewer.loadModel() success callback.\r\n * Invoked after the model's SVF has been initially loaded.\r\n * It may trigger before any geometry has been downloaded and displayed on-screen.\r\n */\n\n\nfunction onLoadModelSuccess(model) {\n  console.log('onLoadModelSuccess()!');\n  console.log('Validate model loaded: ' + (viewer.model === model));\n  console.log(model);\n}\n/**\r\n * viewer.loadModel() failure callback.\r\n * Invoked when there's an error fetching the SVF file.\r\n */\n\n\nfunction onLoadModelError(viewerErrorCode) {\n  console.error('onLoadModelError() - errorCode:' + viewerErrorCode);\n} // Testovaci vlozeni dilu do vieweru\n\n\n$(\"#addModelBtn\").click(function () {\n  //Ziskani vyberu z tabulky   \n  //Najiti modelu v databazi (seznamu)\n  findModelInDatabase(getRowId()); //Automaticke prelozeni modelu pro prohlizec\n  //Vlozeni modelu do prohlizece\n\n  Autodesk.Viewing.Document.load(documentId2, onDocumentLoadSuccess, onDocumentLoadFailure); //Automaticke umisteni na spravne misto v prohlizeci\n});\n\nfunction findModelInDatabase(modelID) {\n  var modelURN = \"\";\n\n  if (modelID === \"1\") {\n    //Pro ucely dema je vlozen jiz prelozeny model (URN)\n    //V tomto pripade se vlozi model \"Head01.ipt\"\n    modelURN = 'urn:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE5LTAxLTAzLTE0LTI4LTI4LWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL0hlYWQwMS5pcHQ';\n  } else {\n    modelURN = \"\";\n    alert(\"Model s tímto ID nemám v databázi\");\n  }\n\n  console.log(\"model URN: \" + modelURN); // loadModel(viewable,modelURN,viewable[0])\n\n  return modelURN;\n}\n\nfunction getRowId() {\n  var modelID = importCsvData.rowID;\n  console.log(\"Kliknul jsi na ADD SELECTED a rowId je: \" + modelID); // console.log(rowID);\n\n  return modelID;\n}\n\nfunction loadModel(viewables, lmvDoc, indexViewable) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var initialViewable, svfUrl, panel, modelName, modelOptions;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              initialViewable = viewables[indexViewable];\n              svfUrl = lmvDoc.getViewablePath(initialViewable);\n              modelOptions = {\n                sharedPropertyDbPath: lmvDoc.getPropertyDbPath()\n              };\n              viewer.loadModel(svfUrl, modelOptions, function (model) {\n                switch (lmvDoc.myData.status.toString() === \"success\") {\n                  case lmvDoc.myData.guid.toString() === \"dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE5LTAxLTAzLTE0LTI4LTI4LWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL0hlYWQwMS5pcHQ\":\n                    // panel = viewer.getExtension(ModelTransformerExtension).panel;\n                    // panel.setTransform(wallOneTransform());\n                    // panel.applyTransform(model);\n                    // modelName = \"Head01.ipt\"    \n                    break;\n                  // case (lmvDoc.myData.guid.toString() === \"dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE4LTA2LTA2LTEzLTUzLTQ3LWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL09LTk9fMi5pcHQ\"):\n                  //     panel = viewer.getExtension(ModelTransformerExtension).panel;\n                  //     panel.setTransform(wallTwoTransform()); \n                  //     panel.applyTransform(model); \n                  //     modelName = \"OKNO_2.ipt\"\n                  //     break;\n                  // case (lmvDoc.myData.guid.toString() === \"dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE4LTA2LTA2LTEzLTU2LTMwLWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL0RWRVJFLmlwdA\"):\n                  //     panel = viewer.getExtension(ModelTransformerExtension).panel;\n                  //     panel.setTransform(floorTransform());\n                  //     panel.applyTransform(model);\n                  //     modelName = \"DVERE.ipt\"\n                  //     break;\n\n                  default:\n                    //viewer.impl.toggleCelShading(true);\n                    modelName = \"Body_Obal_1.ipt\";\n                }\n\n                model.name = modelName;\n                resolve(model);\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} // var globalOffset = \n// function wallOneTransform(){\n//     var transform = {\n//         translation: new THREE.Vector3(0.0, 0.0, 0.0),\n//         rotation: new THREE.Vector3(0.0, 0.0, 0.0),\n//         scale: new THREE.Vector3(1, 1, 1)\n//     }\n//     switch (pointData.face.normal.x * pointData.face.normal.y === 0){\n//     case (pointData.face.normal.x === 0 && Math.round(pointData.face.normal.y) === 1):\n//         transform.translation = new THREE.Vector3(pointData.point.x , pointData.point.y+0.3, pointData.point.z);\n//         transform.rotation = new THREE.Vector3(0, 0, 180);\n//         console.log('Inside Y = 1 Wall');\n//         break;\n//     case (pointData.face.normal.x === 0 && Math.round(pointData.face.normal.y) === -1) :\n//         transform.translation = new THREE.Vector3(pointData.point.x , pointData.point.y-0.3, pointData.point.z);\n//         transform.rotation = new THREE.Vector3(0, 0, 0);\n//         console.log('Inside Y = -1 Wall');\n//         break;\n//     case (Math.round(pointData.face.normal.x) === 1 && pointData.face.normal.y === 0):\n//         transform.translation = new THREE.Vector3(pointData.point.x+0.3 , pointData.point.y, pointData.point.z);\n//         transform.rotation = new THREE.Vector3(90, 90, 0);\n//         console.log('Inside X = 1 Wall');\n//         break;\n//     case (Math.round(pointData.face.normal.x) === -1 && pointData.face.normal.y === 0):\n//         transform.translation = new THREE.Vector3(pointData.point.x-0.35 , pointData.point.y, pointData.point.z);\n//         transform.rotation = new THREE.Vector3(0, 180, 90);\n//         console.log('Inside X = -1 Wall');\n//         break;\n//     default:\n//         alert('You need to select one of the walls for this AC Unit');\n//     }\n//     return transform\n// }\n// }) //EndOfButton_Click\n// /////////////////////////////////////////////////////////////////////////////////\n// //\n// // Load Viewer Background Color Extension\n// //\n// /////////////////////////////////////////////////////////////////////////////////\n// function changeBackground (){\n//        viewer.setBackgroundColor(0, 59, 111, 255,255, 255);\n// }\n// /////////////////////////////////////////////////////////////////////////////////\n// //\n// // Unload Viewer Background Color Extension\n// //\n// /////////////////////////////////////////////////////////////////////////////////\n// function resetBackground (){\n//        viewer.setBackgroundColor(169,169,169, 255,255, 255);\n// }\n// /////////////////////////////////////////////////////////////////////////////////\n// //\n// // Load Viewer Markup3D Extension\n// //\n// /////////////////////////////////////////////////////////////////////////////////\n// // 3D Markup extension to display values of the selected objects in the model. \n// function loadMarkup3D (){\n//        viewer.loadExtension('Viewing.Extension.Markup3D');\n// }\n// /////////////////////////////////////////////////////////////////////////////////\n// //\n// // Load Viewer Transform Extension\n// //\n// /////////////////////////////////////////////////////////////////////////////////\n// // Transformation is allowed with this extension to move object selected in the XYZ\n// // position or rotation in XYZ as well.\n// function loadTransform (){\n//   viewer.loadExtension('./extensions/Viewing.Extension.ModelTransformer');\n// }\n// /////////////////////////////////////////////////////////////////////////////////\n// //\n// // Load Viewer Control Selector Extension\n// //\n// /////////////////////////////////////////////////////////////////////////////////\n// // This extension allows you to remove certain extensions from the original toolbar \n// // provided to you.\n// function loadControlSelector(){\n//        viewer.loadExtension('_Viewing.Extension.ControlSelector');\n// }\n\n\nvar ForgeViewer = {\n  launchViewer: launchViewer // loadNextModel\n\n};\nexport default ForgeViewer;","map":{"version":3,"sources":["E:\\GitHub\\FrogeCsConfiguratorRivetec\\Vyvoj\\src\\js\\ForgeViewer.js"],"names":["$","getForgeToken","ModelTransformerExtension","importCsvData","Autodesk","window","THREE","viewer","pointData","pointer","globalOffset","options","env","getAccessToken","documentId","documentId2","launchViewer","viewerDiv","document","getElementById","Viewing","Private","GuiViewer3D","Initializer","onInitialized","errorCode","start","console","error","Document","load","onDocumentLoadSuccess","onDocumentLoadFailure","doc","viewables","getSubItemsWithProperties","getRootItem","length","addEventListener","GEOMETRY_LOADED_EVENT","onGeometryLoadedHandler","AGGREGATE_SELECTION_CHANGED_EVENT","onSelection","prefs","tag","indexViewable","lmvDoc","loadModel","model","getData","event","target","removeEventListener","setQualityLevel","setGroundShadow","fitToView","selections","clientToWorld","canvasX","canvasY","viewerErrorCode","onLoadModelSuccess","log","onLoadModelError","click","findModelInDatabase","getRowId","modelID","modelURN","alert","rowID","Promise","resolve","reject","initialViewable","svfUrl","getViewablePath","modelOptions","sharedPropertyDbPath","getPropertyDbPath","myData","status","toString","guid","modelName","name","ForgeViewer"],"mappings":"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","sourcesContent":["// 'use strict'\r\nimport $ from \"jquery\";\r\nimport {getForgeToken} from \"./oauth\";\r\n// import Client from './extensions/components/Client';\r\nimport ModelTransformerExtension from './extensions/Viewing.Extension.ModelTransformer';\r\n// import EventTool from './extensions/components/Viewer.EventTool';\r\nimport importCsvData from \"./importCsvData\";\r\n\r\n// var ModelTransformerExtension = require('./extensions/Viewing.Extension.ModelTransformer');\r\n// import { ModelTransformerExtension } from \"./extensions/Viewing.Extension.ModelTransformer\";\r\n// import ModelTransformerExtension from './extensions/Viewing.Extension.ModelTransformer';\r\nconst Autodesk = window.Autodesk;\r\nconst THREE = window.THREE;\r\nvar viewer;\r\nvar pointData ={};\r\nvar pointer;\r\nvar globalOffset;\r\nvar options = {\r\n    env: 'AutodeskProduction',\r\n    getAccessToken: getForgeToken\r\n}\r\n\r\nvar documentId = 'urn:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE4LTEyLTA1LTEwLTA0LTM3LWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL0JvZHlfT2JhbF8xLmlwdA';\r\nvar documentId2 = 'urn:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE5LTAxLTAzLTE0LTI4LTI4LWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL0hlYWQwMS5pcHQ';\r\n// Button_Click\r\n// document.getElementById(\"openViewerBtn\").addEventListener(\"click\",function(){\r\n// Autodesk.Viewing.Initializer(options, function onInitialized() {\r\n//     Autodesk.Viewing.Document.load(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\r\n// });\r\n\r\nlaunchViewer(documentId);\r\nexport function launchViewer(documentId) {\r\n     \r\n       var viewerDiv = document.getElementById('forgeViewer');\r\n       viewer = new Autodesk.Viewing.Private.GuiViewer3D(viewerDiv);\r\n\r\n       Autodesk.Viewing.Initializer(options, function onInitialized(){\r\n           var errorCode = viewer.start();\r\n   \r\n           // Check for initialization errors.\r\n           if (errorCode) {\r\n               console.error('viewer.start() error - errorCode:' + errorCode);\r\n               return;\r\n           }\r\n               Autodesk.Viewing.Document.load(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\r\n               \r\n           });\r\n   }\r\n\r\n/**\r\n * Autodesk.Viewing.Document.load() success callback.\r\n * Proceeds with model initialization.\r\n */\r\nfunction onDocumentLoadSuccess(doc) {\r\n\r\n    // A document contains references to 3D and 2D viewables.\r\n    var viewables = Autodesk.Viewing.Document.getSubItemsWithProperties(doc.getRootItem(), {'type':'geometry'}, true);\r\n    if (viewables.length === 0) {\r\n        console.error('Document contains no viewables.');\r\n        return;\r\n    }\r\n    // var eventTool = new EventTool(viewer)\r\n    // eventTool.activate()\r\n    // eventTool.on('singleclick', (event) => {\r\n    //     pointer = event\r\n    // })\r\n\r\n    //load model.\r\n    viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, onGeometryLoadedHandler);\r\n    viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT,onSelection);\r\n    viewer.prefs.tag('ignore-producer');\r\n    \r\n    // viewer.impl.disableRollover(true); //removed for viewer version 3.2\r\n    // viewer.loadExtension(ModelTransformerExtension, {\r\n    //      parentControl: 'modelTools',\r\n    //      autoLoad: true\r\n    // })  \r\n    // Choose any of the available viewables.\r\n    var indexViewable = 0;\r\n    var lmvDoc = doc;\r\n\r\n    // Everything is setup, load the model.\r\n    loadModel(viewables, lmvDoc, indexViewable);\r\n    \r\n}\r\nvar globalOffset = viewer.model.getData().globalOffset; //Get it from first model\r\nvar options = {globalOffset: globalOffset}\r\n// viewer.loadModel(path, options); //Load your second model\r\n/**\r\n* Autodesk.Viewing.Document.load() failuire callback.\r\n**/\r\n// function onDocumentLoadFailure(viewerErrorCode) {\r\n//     console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);\r\n// }\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\n// Model Geometry loaded callback\r\n//\r\n//////////////////////////////////////////////////////////////////////////\r\nfunction onGeometryLoadedHandler(event) {\r\n        event.target.model = event.model\r\n        var viewer = event.target;\r\n        viewer.removeEventListener(\r\n                Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\r\n                onGeometryLoadedHandler);\r\n        viewer.setQualityLevel(false,false);\r\n        viewer.setGroundShadow(false);\r\n        //viewer.showAll();\r\n        viewer.fitToView();\r\n}\r\n\r\n\r\n// function loadNextModel(documentId) {\r\n//      const extInstance = viewer.getExtension(ModelTransformerExtension);\r\n//      const pickVar = extInstance.panel;\r\n\r\n//      pickVar.tooltip.setContent(`\r\n//       <div id=\"pickTooltipId\" class=\"pick-tooltip\">\r\n//         <b>Pick position ...</b>\r\n//       </div>`, '#pickTooltipId')\r\n\r\n//     if (!pointData.point){\r\n//         alert('You need to select a point in your house to snap the AC first');\r\n//         pickVar.tooltip.activate();\r\n//     }\r\n//     else{\r\n//         Autodesk.Viewing.Document.load(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\r\n//         pickVar.tooltip.deactivate();\r\n//     }\r\n   \r\n// }\r\n\r\n\r\nfunction onSelection (event) {\r\n    if (event.selections && event.selections.length) {\r\n        pointData = viewer.clientToWorld(\r\n            pointer.canvasX,\r\n            pointer.canvasY,\r\n            true)\r\n    }\r\n}\r\n/**\r\n * Autodesk.Viewing.Document.load() success callback.\r\n * Proceeds with model initialization.\r\n */\r\n// function onDocumentLoadSuccess(doc) {\r\n\r\n//     // A document contains references to 3D and 2D viewables.\r\n//     var viewable = Autodesk.Viewing.Document.getSubItemsWithProperties(doc.getRootItem(), {\r\n//         'type': 'geometry',\r\n//         'role': '3d'\r\n//     }, true);\r\n//     if (viewable.length === 0) {\r\n//         console.error('Document contains no viewables.');\r\n//         return;\r\n//     }\r\n\r\n//     // Choose any of the available viewable\r\n//     var initialViewable = viewable[0]; // You can check for other available views in your model,\r\n//     var svfUrl = doc.getViewablePath(initialViewable);\r\n//     var modelOptions = {\r\n//         sharedPropertyDbPath: doc.getPropertyDbPath()\r\n//     };\r\n\r\n//     var viewerDiv = document.getElementById('forgeViewer');\r\n\r\n//     ///////////////USE ONLY ONE OPTION AT A TIME/////////////////////////\r\n\r\n//     /////////////////////// Headless Viewer /////////////////////////////\r\n//     // viewer = new Autodesk.Viewing.Viewer3D(viewerDiv);\r\n//     //////////////////////////////////////////////////////////////////////\r\n\r\n//     //////////////////Viewer with Autodesk Toolbar///////////////////////\r\n//     viewer = new Autodesk.Viewing.Private.GuiViewer3D(viewerDiv);\r\n//     //////////////////////////////////////////////////////////////////////\r\n\r\n//     viewer.start(svfUrl, modelOptions, onLoadModelSuccess, onLoadModelError);\r\n//     // loadModel(viewable,doc,0);\r\n// }\r\n\r\n/**\r\n * Autodesk.Viewing.Document.load() failure callback.\r\n */\r\nfunction onDocumentLoadFailure(viewerErrorCode) {\r\n    console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);\r\n}\r\n\r\n/**\r\n * viewer.loadModel() success callback.\r\n * Invoked after the model's SVF has been initially loaded.\r\n * It may trigger before any geometry has been downloaded and displayed on-screen.\r\n */\r\nfunction onLoadModelSuccess(model) {\r\n    console.log('onLoadModelSuccess()!');\r\n    console.log('Validate model loaded: ' + (viewer.model === model));\r\n    console.log(model);\r\n}\r\n\r\n/**\r\n * viewer.loadModel() failure callback.\r\n * Invoked when there's an error fetching the SVF file.\r\n */\r\nfunction onLoadModelError(viewerErrorCode) {\r\n    console.error('onLoadModelError() - errorCode:' + viewerErrorCode);\r\n}\r\n\r\n// Testovaci vlozeni dilu do vieweru\r\n$(\"#addModelBtn\").click(function(){\r\n//Ziskani vyberu z tabulky   \r\n    //Najiti modelu v databazi (seznamu)\r\n    findModelInDatabase(getRowId());\r\n    //Automaticke prelozeni modelu pro prohlizec\r\n    \r\n    //Vlozeni modelu do prohlizece\r\n    Autodesk.Viewing.Document.load(documentId2, onDocumentLoadSuccess, onDocumentLoadFailure);\r\n    //Automaticke umisteni na spravne misto v prohlizeci\r\n\r\n})\r\n\r\nfunction findModelInDatabase(modelID) {\r\n    var modelURN = \"\";\r\n    if (modelID === \"1\") {\r\n        //Pro ucely dema je vlozen jiz prelozeny model (URN)\r\n        //V tomto pripade se vlozi model \"Head01.ipt\"\r\n        modelURN = 'urn:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE5LTAxLTAzLTE0LTI4LTI4LWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL0hlYWQwMS5pcHQ';\r\n    }\r\n    else {\r\n        modelURN =\"\";\r\n        alert(\"Model s tímto ID nemám v databázi\");\r\n    }\r\n\r\n    console.log(\"model URN: \"+ modelURN);\r\n    \r\n    // loadModel(viewable,modelURN,viewable[0])\r\n    return modelURN;\r\n    \r\n}\r\n\r\nfunction getRowId() {\r\n    var modelID = importCsvData.rowID;\r\n    console.log(\"Kliknul jsi na ADD SELECTED a rowId je: \" + modelID);\r\n    // console.log(rowID);\r\n    return modelID;\r\n}\r\n\r\nfunction loadModel(viewables, lmvDoc, indexViewable) {\r\n\r\n    return new Promise(async(resolve, reject)=> {\r\n        var initialViewable = viewables[indexViewable];\r\n        var svfUrl = lmvDoc.getViewablePath(initialViewable);\r\n        var panel;\r\n        var modelName;\r\n\r\n        var modelOptions = {\r\n                    sharedPropertyDbPath: lmvDoc.getPropertyDbPath(),\r\n        };\r\n\r\n        viewer.loadModel(svfUrl, modelOptions, (model) => {\r\n            \r\n            switch (lmvDoc.myData.status.toString() === \"success\" ) {\r\n            case (lmvDoc.myData.guid.toString() === \"dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE5LTAxLTAzLTE0LTI4LTI4LWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL0hlYWQwMS5pcHQ\"):\r\n                \r\n                // panel = viewer.getExtension(ModelTransformerExtension).panel;\r\n                // panel.setTransform(wallOneTransform());\r\n                // panel.applyTransform(model);\r\n                // modelName = \"Head01.ipt\"    \r\n                break;\r\n\r\n            // case (lmvDoc.myData.guid.toString() === \"dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE4LTA2LTA2LTEzLTUzLTQ3LWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL09LTk9fMi5pcHQ\"):\r\n                \r\n            //     panel = viewer.getExtension(ModelTransformerExtension).panel;\r\n            //     panel.setTransform(wallTwoTransform()); \r\n            //     panel.applyTransform(model); \r\n            //     modelName = \"OKNO_2.ipt\"\r\n            //     break;\r\n                \r\n            // case (lmvDoc.myData.guid.toString() === \"dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWwyMDE4LTA2LTA2LTEzLTU2LTMwLWQ0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlL0RWRVJFLmlwdA\"):\r\n            //     panel = viewer.getExtension(ModelTransformerExtension).panel;\r\n            //     panel.setTransform(floorTransform());\r\n            //     panel.applyTransform(model);\r\n            //     modelName = \"DVERE.ipt\"\r\n            //     break;\r\n            default:\r\n                //viewer.impl.toggleCelShading(true);\r\n                modelName = \"Body_Obal_1.ipt\";\r\n            }\r\n\r\n            model.name = modelName;\r\n            resolve(model)\r\n        })\r\n    })\r\n}\r\n\r\n// var globalOffset = \r\n// function wallOneTransform(){\r\n\r\n//     var transform = {\r\n//         translation: new THREE.Vector3(0.0, 0.0, 0.0),\r\n//         rotation: new THREE.Vector3(0.0, 0.0, 0.0),\r\n//         scale: new THREE.Vector3(1, 1, 1)\r\n//     }\r\n//     switch (pointData.face.normal.x * pointData.face.normal.y === 0){\r\n//     case (pointData.face.normal.x === 0 && Math.round(pointData.face.normal.y) === 1):\r\n//         transform.translation = new THREE.Vector3(pointData.point.x , pointData.point.y+0.3, pointData.point.z);\r\n//         transform.rotation = new THREE.Vector3(0, 0, 180);\r\n//         console.log('Inside Y = 1 Wall');\r\n//         break;\r\n//     case (pointData.face.normal.x === 0 && Math.round(pointData.face.normal.y) === -1) :\r\n//         transform.translation = new THREE.Vector3(pointData.point.x , pointData.point.y-0.3, pointData.point.z);\r\n//         transform.rotation = new THREE.Vector3(0, 0, 0);\r\n//         console.log('Inside Y = -1 Wall');\r\n//         break;\r\n//     case (Math.round(pointData.face.normal.x) === 1 && pointData.face.normal.y === 0):\r\n//         transform.translation = new THREE.Vector3(pointData.point.x+0.3 , pointData.point.y, pointData.point.z);\r\n//         transform.rotation = new THREE.Vector3(90, 90, 0);\r\n//         console.log('Inside X = 1 Wall');\r\n//         break;\r\n//     case (Math.round(pointData.face.normal.x) === -1 && pointData.face.normal.y === 0):\r\n//         transform.translation = new THREE.Vector3(pointData.point.x-0.35 , pointData.point.y, pointData.point.z);\r\n//         transform.rotation = new THREE.Vector3(0, 180, 90);\r\n//         console.log('Inside X = -1 Wall');\r\n//         break;\r\n//     default:\r\n//         alert('You need to select one of the walls for this AC Unit');\r\n//     }\r\n//     return transform\r\n// }\r\n\r\n// }) //EndOfButton_Click\r\n\r\n// /////////////////////////////////////////////////////////////////////////////////\r\n// //\r\n// // Load Viewer Background Color Extension\r\n// //\r\n// /////////////////////////////////////////////////////////////////////////////////\r\n\r\n// function changeBackground (){\r\n//        viewer.setBackgroundColor(0, 59, 111, 255,255, 255);\r\n// }\r\n\r\n// /////////////////////////////////////////////////////////////////////////////////\r\n// //\r\n// // Unload Viewer Background Color Extension\r\n// //\r\n// /////////////////////////////////////////////////////////////////////////////////\r\n\r\n// function resetBackground (){\r\n//        viewer.setBackgroundColor(169,169,169, 255,255, 255);\r\n// }\r\n\r\n// /////////////////////////////////////////////////////////////////////////////////\r\n// //\r\n// // Load Viewer Markup3D Extension\r\n// //\r\n// /////////////////////////////////////////////////////////////////////////////////\r\n// // 3D Markup extension to display values of the selected objects in the model. \r\n\r\n// function loadMarkup3D (){\r\n//        viewer.loadExtension('Viewing.Extension.Markup3D');\r\n// }\r\n\r\n// /////////////////////////////////////////////////////////////////////////////////\r\n// //\r\n// // Load Viewer Transform Extension\r\n// //\r\n// /////////////////////////////////////////////////////////////////////////////////\r\n// // Transformation is allowed with this extension to move object selected in the XYZ\r\n// // position or rotation in XYZ as well.\r\n\r\n// function loadTransform (){\r\n//   viewer.loadExtension('./extensions/Viewing.Extension.ModelTransformer');\r\n// }\r\n\r\n// /////////////////////////////////////////////////////////////////////////////////\r\n// //\r\n// // Load Viewer Control Selector Extension\r\n// //\r\n// /////////////////////////////////////////////////////////////////////////////////\r\n// // This extension allows you to remove certain extensions from the original toolbar \r\n// // provided to you.\r\n\r\n// function loadControlSelector(){\r\n//        viewer.loadExtension('_Viewing.Extension.ControlSelector');\r\n// }\r\n\r\nconst ForgeViewer = {\r\n    launchViewer,\r\n    // loadNextModel\r\n  };\r\n  \r\n  export default ForgeViewer;"]},"metadata":{},"sourceType":"module"}