{"ast":null,"code":"import _classCallCheck from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\n/* eslint-disable */\nimport EventsEmitter from '../components/EventsEmitter';\nimport './TransformGizmos'; /// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\n\nvar Autodesk = window.Autodesk;\nvar THREE = window.THREE;\n\nvar TransformTool =\n/*#__PURE__*/\nfunction (_EventsEmitter) {\n  _inherits(TransformTool, _EventsEmitter);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n  function TransformTool(viewer) {\n    var _this;\n\n    _classCallCheck(this, TransformTool);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransformTool).call(this));\n    _this._dbIds = [];\n    _this.active = false;\n    _this._viewer = viewer;\n    _this._isDragging = false;\n    _this.fullTransform = false;\n    _this._transformMesh = null;\n    _this._selectedFragProxyMap = {};\n    _this._transformControlTx = null;\n    _this._hitPoint = new THREE.Vector3();\n    _this.onTxChange = _this.onTxChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onAggregateSelectionChanged = _this.onAggregateSelectionChanged.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onCameraChanged = _this.onCameraChanged.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._selectionMode = 'SELECTION_MODE_TRANSFORM';\n    return _this;\n  } /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(TransformTool, [{\n    key: \"getNames\",\n    value: function getNames() {\n      return [\"Viewing.Transform.Tool\"];\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return \"Viewing.Transform.Tool\";\n    } ///////////////////////////////////////////////////////////////////////////\n    // Creates a dummy mesh to attach control to\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"createTransformMesh\",\n    value: function createTransformMesh() {\n      var material = new THREE.MeshPhongMaterial({\n        color: 0xff0000\n      });\n\n      this._viewer.impl.matman().addMaterial('transform-tool-material', material, true);\n\n      var sphere = new THREE.Mesh(new THREE.SphereGeometry(0.0001, 5), material);\n      sphere.position.set(0, 0, 0);\n      return sphere;\n    } ///////////////////////////////////////////////////////////////////////////\n    // on translation change\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"onTxChange\",\n    value: function onTxChange() {\n      if (this._isDragging && this._transformControlTx.visible) {\n        var translation = new THREE.Vector3(this._transformMesh.position.x - this._selection.model.offset.x, this._transformMesh.position.y - this._selection.model.offset.y, this._transformMesh.position.z - this._selection.model.offset.z);\n\n        for (var fragId in this._selectedFragProxyMap) {\n          var fragProxy = this._selectedFragProxyMap[fragId];\n          var position = new THREE.Vector3(this._transformMesh.position.x - fragProxy.offset.x, this._transformMesh.position.y - fragProxy.offset.y, this._transformMesh.position.z - fragProxy.offset.z);\n          fragProxy.position = position;\n          fragProxy.updateAnimTransform();\n        }\n\n        this.emit('transform.translate', {\n          model: this._selection.model,\n          translation: translation\n        });\n      }\n\n      this._viewer.impl.sceneUpdated(true);\n    } ///////////////////////////////////////////////////////////////////////////\n    // on camera changed\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"onCameraChanged\",\n    value: function onCameraChanged() {\n      if (this._transformControlTx) {\n        this._transformControlTx.update();\n      }\n    } ///////////////////////////////////////////////////////////////////////////\n    // item selected callback\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"onAggregateSelectionChanged\",\n    value: function onAggregateSelectionChanged(event) {\n      var _this2 = this;\n\n      switch (this._selectionMode) {\n        case 'SELECTION_MODE_TRANSFORM':\n          if (event.selections && event.selections.length) {\n            var selection = event.selections[0];\n            this.setSelection(selection);\n          } else {\n            this.clearSelection();\n          }\n\n          break;\n\n        case 'SELECTION_MODE_PICK':\n          if (event.selections && event.selections.length) {\n            this._selectionMode = 'SELECTION_MODE_RESUME_TRANSFORM';\n            this.emit('transform.modelSelected', this._selection);\n\n            this._viewer.clearSelection();\n\n            this._viewer.select(this._dbIds);\n\n            this.setPosition(this._hitPoint);\n          }\n\n        case 'SELECTION_MODE_RESUME_TRANSFORM':\n          setTimeout(function () {\n            _this2._selectionMode = 'SELECTION_MODE_TRANSFORM';\n          }, 300);\n          break;\n      }\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(selection) {\n      this._selection = selection;\n      this._dbIds = this._selection.dbIdArray;\n\n      if (this.fullTransform) {\n        this._selection.fragIdsArray = [];\n\n        var fragCount = this._selection.model.getFragmentList().fragments.fragId2dbId.length;\n\n        for (var fragId = 0; fragId < fragCount; ++fragId) {\n          this._selection.fragIdsArray.push(fragId);\n        }\n\n        this._selection.dbIdArray = [];\n\n        var instanceTree = this._selection.model.getData().instanceTree;\n\n        var rootId = instanceTree.getRootId();\n\n        this._selection.dbIdArray.push(rootId);\n      }\n\n      this.emit('transform.modelSelected', this._selection);\n      this.initializeSelection(this._hitPoint);\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"initializeSelection\",\n    value: function initializeSelection(hitPoint) {\n      var _this3 = this;\n\n      this._selectedFragProxyMap = {};\n      var modelTransform = this._selection.model.transform || {\n        translation: {\n          x: 0,\n          y: 0,\n          z: 0\n        }\n      };\n      this._selection.model.offset = {\n        x: hitPoint.x - modelTransform.translation.x,\n        y: hitPoint.y - modelTransform.translation.y,\n        z: hitPoint.z - modelTransform.translation.z\n      };\n      this._transformControlTx.visible = true;\n\n      this._transformControlTx.setPosition(hitPoint);\n\n      this._transformControlTx.addEventListener('change', this.onTxChange);\n\n      this._viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChanged);\n\n      this._selection.fragIdsArray.forEach(function (fragId) {\n        var fragProxy = _this3._viewer.impl.getFragmentProxy(_this3._selection.model, fragId);\n\n        fragProxy.getAnimTransform();\n        fragProxy.offset = {\n          x: hitPoint.x - fragProxy.position.x,\n          y: hitPoint.y - fragProxy.position.y,\n          z: hitPoint.z - fragProxy.position.z\n        };\n        _this3._selectedFragProxyMap[fragId] = fragProxy;\n      });\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (this.active) {\n        this._selection = null;\n        this._selectedFragProxyMap = {};\n        this._transformControlTx.visible = false;\n\n        this._transformControlTx.removeEventListener('change', this.onTxChange);\n\n        this._viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChanged);\n\n        this._viewer.impl.sceneUpdated(true);\n\n        this.emit('transform.clearSelection', this._selection);\n      }\n    } //////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      this._transformControlTx.setPosition(position);\n\n      for (var fragId in this._selectedFragProxyMap) {\n        var fragProxy = this._selectedFragProxyMap[fragId];\n        var fragPosition = new THREE.Vector3(position.x - fragProxy.offset.x, position.y - fragProxy.offset.y, position.z - fragProxy.offset.z);\n        fragProxy.position = fragPosition;\n        fragProxy.updateAnimTransform();\n      }\n\n      this._viewer.impl.sceneUpdated(true);\n    } ///////////////////////////////////////////////////////////////////////////\n    // normalize screen coordinates\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(screenPoint) {\n      var viewport = this._viewer.navigation.getScreenViewport();\n\n      var n = {\n        x: (screenPoint.x - viewport.left) / viewport.width,\n        y: (screenPoint.y - viewport.top) / viewport.height\n      };\n      return n;\n    } ///////////////////////////////////////////////////////////////////////////\n    // get 3d hit point on mesh\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getHitPoint\",\n    value: function getHitPoint(event) {\n      var screenPoint = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      var n = this.normalize(screenPoint);\n\n      var hitPoint = this._viewer.utilities.getHitPoint(n.x, n.y);\n\n      return hitPoint;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"hitPoint\",\n    value: function hitPoint() {\n      return this._transformControlTx.position;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"setHitPoint\",\n    value: function setHitPoint(hitPoint) {\n      this._hitPoint.x = hitPoint.x;\n      this._hitPoint.y = hitPoint.y;\n      this._hitPoint.z = hitPoint.z;\n    } ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      if (!this.active) {\n        this.active = true;\n\n        var bbox = this._viewer.model.getBoundingBox();\n\n        this._viewer.impl.createOverlayScene('TransformToolOverlay');\n\n        this._transformControlTx = new THREE.TransformControls(this._viewer.impl.camera, this._viewer.impl.canvas, \"translate\");\n\n        this._transformControlTx.setSize(bbox.getBoundingSphere().radius * 5);\n\n        this._transformControlTx.visible = false;\n\n        this._viewer.impl.addOverlay('TransformToolOverlay', this._transformControlTx);\n\n        this._transformMesh = this.createTransformMesh();\n\n        this._transformControlTx.attach(this._transformMesh);\n\n        this._viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onAggregateSelectionChanged);\n      }\n    } ///////////////////////////////////////////////////////////////////////////\n    // deactivate tool\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      if (this.active) {\n        this.active = false;\n\n        this._viewer.impl.removeOverlay('TransformToolOverlay', this._transformControlTx);\n\n        this._transformControlTx.removeEventListener('change', this.onTxChange);\n\n        this._viewer.impl.removeOverlayScene('TransformToolOverlay');\n\n        this._viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChanged);\n\n        this._viewer.removeEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onAggregateSelectionChanged);\n      }\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"onPick\",\n    value: function onPick() {\n      if (this.active) {\n        this._selectionMode = 'SELECTION_MODE_PICK';\n      }\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleButtonDown\",\n    value: function handleButtonDown(event, button) {\n      this._isDragging = true;\n      if (this._transformControlTx.onPointerDown(event)) return true;\n      var hitPoint = this.getHitPoint(event);\n\n      if (hitPoint) {\n        this._translation = new THREE.Vector3();\n\n        this._hitPoint.copy(hitPoint);\n      }\n\n      return false;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleButtonUp\",\n    value: function handleButtonUp(event, button) {\n      this._isDragging = false;\n      if (this._transformControlTx.onPointerUp(event)) return true;\n      return false;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(event) {\n      if (this._isDragging) {\n        if (this._transformControlTx.onPointerMove(event)) {\n          return true;\n        }\n\n        return false;\n      }\n\n      if (this._transformControlTx.onPointerHover(event)) return true;\n      return false;\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event, keyCode) {\n      if (keyCode === 27) {\n        //ESC\n        this._viewer.clearSelection();\n      }\n\n      return false;\n    }\n  }]);\n\n  return TransformTool;\n}(EventsEmitter);\n\nexport { TransformTool as default };","map":{"version":3,"sources":["E:\\GitHub\\FrogeCsConfiguratorRivetec\\Vyvoj\\src\\js\\extensions\\Viewing.Extension.ModelTransformer\\Viewing.Tool.Translate.js"],"names":["EventsEmitter","Autodesk","window","THREE","TransformTool","viewer","_dbIds","active","_viewer","_isDragging","fullTransform","_transformMesh","_selectedFragProxyMap","_transformControlTx","_hitPoint","Vector3","onTxChange","bind","onAggregateSelectionChanged","onCameraChanged","_selectionMode","material","MeshPhongMaterial","color","impl","matman","addMaterial","sphere","Mesh","SphereGeometry","position","set","visible","translation","x","_selection","model","offset","y","z","fragId","fragProxy","updateAnimTransform","emit","sceneUpdated","update","event","selections","length","selection","setSelection","clearSelection","select","setPosition","setTimeout","dbIdArray","fragIdsArray","fragCount","getFragmentList","fragments","fragId2dbId","push","instanceTree","getData","rootId","getRootId","initializeSelection","hitPoint","modelTransform","transform","addEventListener","Viewing","CAMERA_CHANGE_EVENT","forEach","getFragmentProxy","getAnimTransform","removeEventListener","fragPosition","screenPoint","viewport","navigation","getScreenViewport","n","left","width","top","height","clientX","clientY","normalize","utilities","getHitPoint","bbox","getBoundingBox","createOverlayScene","TransformControls","camera","canvas","setSize","getBoundingSphere","radius","addOverlay","createTransformMesh","attach","AGGREGATE_SELECTION_CHANGED_EVENT","removeOverlay","removeOverlayScene","button","onPointerDown","_translation","copy","onPointerUp","onPointerMove","onPointerHover","keyCode"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport EventsEmitter from '../components/EventsEmitter'\r\nimport './TransformGizmos'\r\n/// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\r\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\r\n\r\nconst Autodesk = window.Autodesk;\r\nconst THREE = window.THREE;\r\n\r\nexport default class TransformTool extends EventsEmitter {\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Class constructor\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  constructor (viewer) {\r\n\r\n    super()\r\n\r\n    this._dbIds = []\r\n\r\n    this.active = false\r\n\r\n    this._viewer = viewer\r\n\r\n    this._isDragging = false\r\n\r\n    this.fullTransform = false\r\n  \r\n    this._transformMesh = null\r\n\r\n    this._selectedFragProxyMap = {}\r\n\r\n    this._transformControlTx = null\r\n\r\n    this._hitPoint = new THREE.Vector3()\r\n\r\n    this.onTxChange =\r\n      this.onTxChange.bind(this)\r\n\r\n    this.onAggregateSelectionChanged =\r\n      this.onAggregateSelectionChanged.bind(this)\r\n\r\n    this.onCameraChanged =\r\n      this.onCameraChanged.bind(this)\r\n\r\n    this._selectionMode = 'SELECTION_MODE_TRANSFORM'\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  getNames () {\r\n\r\n    return [\"Viewing.Transform.Tool\"]\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  getName () {\r\n\r\n    return \"Viewing.Transform.Tool\"\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // Creates a dummy mesh to attach control to\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  createTransformMesh() {\r\n\r\n    var material = new THREE.MeshPhongMaterial(\r\n      { color: 0xff0000 })\r\n\r\n    this._viewer.impl.matman().addMaterial(\r\n      'transform-tool-material',\r\n      material,\r\n      true)\r\n\r\n    var sphere = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.0001, 5),\r\n      material)\r\n\r\n    sphere.position.set(0, 0, 0)\r\n\r\n    return sphere\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // on translation change\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  onTxChange() {\r\n\r\n    if(this._isDragging && this._transformControlTx.visible) {\r\n\r\n      var translation = new THREE.Vector3(\r\n        this._transformMesh.position.x - this._selection.model.offset.x,\r\n        this._transformMesh.position.y - this._selection.model.offset.y,\r\n        this._transformMesh.position.z - this._selection.model.offset.z)\r\n\r\n      for(var fragId in this._selectedFragProxyMap) {\r\n\r\n        var fragProxy = this._selectedFragProxyMap[fragId]\r\n\r\n        var position = new THREE.Vector3(\r\n          this._transformMesh.position.x - fragProxy.offset.x,\r\n          this._transformMesh.position.y - fragProxy.offset.y,\r\n          this._transformMesh.position.z - fragProxy.offset.z)\r\n\r\n        fragProxy.position = position\r\n\r\n        fragProxy.updateAnimTransform()\r\n      }\r\n\r\n      this.emit('transform.translate', {\r\n        model: this._selection.model,\r\n        translation: translation\r\n      })\r\n    }\r\n\r\n    this._viewer.impl.sceneUpdated(true)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // on camera changed\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  onCameraChanged() {\r\n\r\n    if(this._transformControlTx) {\r\n\r\n      this._transformControlTx.update()\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // item selected callback\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  onAggregateSelectionChanged (event) {\r\n\r\n    switch (this._selectionMode) {\r\n\r\n      case 'SELECTION_MODE_TRANSFORM':\r\n\r\n        if(event.selections && event.selections.length) {\r\n\r\n          var selection = event.selections[0]\r\n\r\n          this.setSelection(selection)\r\n\r\n        } else {\r\n\r\n          this.clearSelection()\r\n        }\r\n\r\n        break;\r\n\r\n      case 'SELECTION_MODE_PICK':\r\n\r\n        if(event.selections && event.selections.length) {\r\n\r\n          this._selectionMode = 'SELECTION_MODE_RESUME_TRANSFORM'\r\n\r\n          this.emit('transform.modelSelected',\r\n            this._selection)\r\n\r\n          this._viewer.clearSelection()\r\n\r\n          this._viewer.select(this._dbIds)\r\n\r\n          this.setPosition(this._hitPoint)\r\n        }\r\n\r\n      case 'SELECTION_MODE_RESUME_TRANSFORM':\r\n\r\n        setTimeout(() => {\r\n\r\n          this._selectionMode = 'SELECTION_MODE_TRANSFORM'\r\n        }, 300)\r\n\r\n        break;\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  setSelection (selection) {\r\n\r\n    this._selection = selection\r\n\r\n    this._dbIds = this._selection.dbIdArray\r\n\r\n    if (this.fullTransform) {\r\n\r\n      this._selection.fragIdsArray = []\r\n\r\n      var fragCount = this._selection.model.getFragmentList().\r\n        fragments.fragId2dbId.length\r\n\r\n      for (var fragId = 0; fragId < fragCount; ++fragId) {\r\n\r\n        this._selection.fragIdsArray.push(fragId)\r\n      }\r\n\r\n      this._selection.dbIdArray = []\r\n\r\n      var instanceTree =\r\n        this._selection.model.getData().instanceTree\r\n\r\n      var rootId = instanceTree.getRootId()\r\n\r\n      this._selection.dbIdArray.push(rootId)\r\n    }\r\n\r\n    this.emit('transform.modelSelected',\r\n      this._selection)\r\n\r\n    this.initializeSelection(\r\n      this._hitPoint)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  initializeSelection (hitPoint) {\r\n\r\n    this._selectedFragProxyMap = {}\r\n\r\n    var modelTransform = this._selection.model.transform ||\r\n      { translation: { x:0, y:0, z:0 } }\r\n\r\n    this._selection.model.offset = {\r\n      x: hitPoint.x - modelTransform.translation.x,\r\n      y: hitPoint.y - modelTransform.translation.y,\r\n      z: hitPoint.z - modelTransform.translation.z\r\n    }\r\n\r\n    this._transformControlTx.visible = true\r\n\r\n    this._transformControlTx.setPosition(\r\n      hitPoint)\r\n\r\n    this._transformControlTx.addEventListener(\r\n      'change', this.onTxChange)\r\n\r\n    this._viewer.addEventListener(\r\n      Autodesk.Viewing.CAMERA_CHANGE_EVENT,\r\n      this.onCameraChanged)\r\n\r\n    this._selection.fragIdsArray.forEach((fragId) => {\r\n\r\n      var fragProxy = this._viewer.impl.getFragmentProxy(\r\n        this._selection.model,\r\n        fragId)\r\n\r\n      fragProxy.getAnimTransform()\r\n\r\n      fragProxy.offset = {\r\n\r\n        x: hitPoint.x - fragProxy.position.x,\r\n        y: hitPoint.y - fragProxy.position.y,\r\n        z: hitPoint.z - fragProxy.position.z\r\n      }\r\n\r\n      this._selectedFragProxyMap[fragId] = fragProxy\r\n    })\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  clearSelection () {\r\n\r\n    if (this.active) {\r\n\r\n      this._selection = null\r\n\r\n      this._selectedFragProxyMap = {}\r\n\r\n      this._transformControlTx.visible = false\r\n\r\n      this._transformControlTx.removeEventListener(\r\n        'change', this.onTxChange)\r\n\r\n      this._viewer.removeEventListener(\r\n        Autodesk.Viewing.CAMERA_CHANGE_EVENT,\r\n        this.onCameraChanged)\r\n\r\n      this._viewer.impl.sceneUpdated(true)\r\n\r\n      this.emit('transform.clearSelection',\r\n        this._selection)\r\n    }\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  setPosition (position) {\r\n\r\n    this._transformControlTx.setPosition(position)\r\n\r\n    for(var fragId in this._selectedFragProxyMap) {\r\n\r\n      var fragProxy = this._selectedFragProxyMap[fragId]\r\n\r\n      var fragPosition = new THREE.Vector3(\r\n        position.x - fragProxy.offset.x,\r\n        position.y - fragProxy.offset.y,\r\n        position.z - fragProxy.offset.z)\r\n\r\n      fragProxy.position = fragPosition\r\n\r\n      fragProxy.updateAnimTransform()\r\n    }\r\n\r\n    this._viewer.impl.sceneUpdated(true)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // normalize screen coordinates\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  normalize (screenPoint) {\r\n\r\n    var viewport = this._viewer.navigation.getScreenViewport()\r\n\r\n    var n = {\r\n      x: (screenPoint.x - viewport.left) / viewport.width,\r\n      y: (screenPoint.y - viewport.top) / viewport.height\r\n    }\r\n\r\n    return n\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // get 3d hit point on mesh\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  getHitPoint (event) {\r\n\r\n    var screenPoint = {\r\n      x: event.clientX,\r\n      y: event.clientY\r\n    }\r\n\r\n    var n = this.normalize(screenPoint)\r\n\r\n    var hitPoint = this._viewer.utilities.getHitPoint(n.x, n.y)\r\n\r\n    return hitPoint\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  hitPoint () {\r\n\r\n    return this._transformControlTx.position\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  setHitPoint (hitPoint) {\r\n\r\n    this._hitPoint.x = hitPoint.x\r\n    this._hitPoint.y = hitPoint.y\r\n    this._hitPoint.z = hitPoint.z\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////\r\n  activate () {\r\n\r\n    if(!this.active) {\r\n\r\n      this.active = true\r\n\r\n      var bbox = this._viewer.model.getBoundingBox()\r\n\r\n      this._viewer.impl.createOverlayScene(\r\n        'TransformToolOverlay')\r\n\r\n      this._transformControlTx = new THREE.TransformControls(\r\n        this._viewer.impl.camera,\r\n        this._viewer.impl.canvas,\r\n        \"translate\")\r\n\r\n      this._transformControlTx.setSize(\r\n        bbox.getBoundingSphere().radius * 5)\r\n\r\n      this._transformControlTx.visible = false\r\n\r\n      this._viewer.impl.addOverlay(\r\n        'TransformToolOverlay',\r\n        this._transformControlTx)\r\n\r\n      this._transformMesh = this.createTransformMesh()\r\n\r\n      this._transformControlTx.attach(\r\n        this._transformMesh)\r\n\r\n      this._viewer.addEventListener(\r\n        Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT,\r\n        this.onAggregateSelectionChanged)\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // deactivate tool\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  deactivate () {\r\n\r\n    if (this.active) {\r\n\r\n      this.active = false\r\n\r\n      this._viewer.impl.removeOverlay(\r\n        'TransformToolOverlay',\r\n        this._transformControlTx)\r\n\r\n      this._transformControlTx.removeEventListener(\r\n        'change',\r\n        this.onTxChange)\r\n\r\n      this._viewer.impl.removeOverlayScene(\r\n        'TransformToolOverlay')\r\n\r\n      this._viewer.removeEventListener(\r\n        Autodesk.Viewing.CAMERA_CHANGE_EVENT,\r\n        this.onCameraChanged)\r\n\r\n      this._viewer.removeEventListener(\r\n        Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT,\r\n        this.onAggregateSelectionChanged)\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  onPick () {\r\n\r\n    if(this.active) {\r\n\r\n      this._selectionMode = 'SELECTION_MODE_PICK'\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  handleButtonDown(event, button) {\r\n\r\n    this._isDragging = true\r\n\r\n    if (this._transformControlTx.onPointerDown(event))\r\n      return true\r\n\r\n    var hitPoint = this.getHitPoint(event)\r\n\r\n    if (hitPoint) {\r\n\r\n      this._translation = new THREE.Vector3()\r\n      this._hitPoint.copy(hitPoint)\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  handleButtonUp(event, button) {\r\n\r\n    this._isDragging = false\r\n\r\n    if (this._transformControlTx.onPointerUp(event))\r\n      return true\r\n\r\n    return false\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  handleMouseMove(event) {\r\n\r\n    if (this._isDragging) {\r\n\r\n      if (this._transformControlTx.onPointerMove(event) ) {\r\n\r\n        return true\r\n      }\r\n\r\n      return false\r\n    }\r\n\r\n    if (this._transformControlTx.onPointerHover(event))\r\n      return true\r\n\r\n    return false\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  handleKeyDown (event, keyCode) {\r\n\r\n    if (keyCode === 27) { //ESC\r\n\r\n      this._viewer.clearSelection()\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}