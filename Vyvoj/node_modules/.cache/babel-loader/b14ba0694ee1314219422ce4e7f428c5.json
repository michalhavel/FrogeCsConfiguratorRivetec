{"ast":null,"code":"import _classCallCheck from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n/////////////////////////////////////////////////////////////////////\n// Viewing.Extension.ModelTransfomerExtension\n// by Philippe Leefsma, April 2016\n//\n/////////////////////////////////////////////////////////////////////\n\n/* eslint-disable */\nimport Panel from './Viewing.Extension.ModelTransformer.Panel';\nimport ExtensionBase from '../components/Viewer.ExtensionBase';\nimport ViewerToolkit from '../components/Viewer.Toolkit'; /// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\n\nvar Autodesk = window.Autodesk;\nvar THREE = window.THREE;\n\nvar ModelTransformerExtension =\n/*#__PURE__*/\nfunction (_ExtensionBase) {\n  _inherits(ModelTransformerExtension, _ExtensionBase);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n  function ModelTransformerExtension(viewer, options) {\n    var _this;\n\n    _classCallCheck(this, ModelTransformerExtension);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModelTransformerExtension).call(this, viewer, options));\n    _this.firstModelLoaded = null;\n    _this.modelCollection = {};\n\n    _this.onGeometryLoadedHandler = function (e) {\n      _this.onGeometryLoaded(e);\n    };\n\n    _this.onAggregateSelectionChangedHandler = function (e) {\n      _this.onAggregateSelectionChanged(e);\n    };\n\n    _this.selectedDbIdArray = [];\n    return _this;\n  } /////////////////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(ModelTransformerExtension, [{\n    key: \"load\",\n    /////////////////////////////////////////////////////////////////\n    // Load callback\n    //\n    /////////////////////////////////////////////////////////////////\n    value: function load() {\n      var _this2 = this;\n\n      this.loadControls();\n      var hotkeyMng = Autodesk.Viewing.theHotkeyManager;\n      this.hotkeysId = ExtensionBase.guid();\n      var hotKeyTranslate = {\n        keycodes: [hotkeyMng.KEYCODES.t],\n        onPress: function onPress(hotkeys) {\n          //handled\n          return true;\n        },\n        onRelease: function onRelease(hotkeys) {\n          var hitPoint = null;\n\n          if (_this2.panel.rxTool.active) {\n            hitPoint = _this2.panel.rxTool.hitPoint();\n\n            _this2._viewer.toolController.deactivateTool(_this2.panel.rxTool.getName());\n          }\n\n          if (!_this2.panel.txTool.active) {\n            _this2._viewer.toolController.activateTool(_this2.panel.txTool.getName());\n\n            if (hitPoint) {\n              _this2.panel.txTool.setHitPoint(hitPoint);\n\n              var selections = _this2._viewer.getAggregateSelection();\n\n              if (selections.length) {\n                var model = selections[0].model;\n                var dbIdArray = selections[0].selection;\n                ViewerToolkit.getFragIds(model, dbIdArray).then(function (fragIdsArray) {\n                  _this2.panel.txTool.setSelection({\n                    fragIdsArray: fragIdsArray,\n                    dbIdArray: dbIdArray,\n                    model: model\n                  });\n                });\n              }\n            }\n          }\n\n          return true;\n        }\n      };\n      var hotKeyRotate = {\n        keycodes: [hotkeyMng.KEYCODES.r],\n        onPress: function onPress(hotkeys) {\n          //handled\n          return true;\n        },\n        onRelease: function onRelease(hotkeys) {\n          var hitPoint = null;\n\n          if (_this2.panel.txTool.active) {\n            hitPoint = _this2.panel.txTool.hitPoint();\n\n            _this2._viewer.toolController.deactivateTool(_this2.panel.txTool.getName());\n          }\n\n          if (!_this2.panel.rxTool.active) {\n            _this2._viewer.toolController.activateTool(_this2.panel.rxTool.getName());\n\n            if (hitPoint) {\n              _this2.panel.rxTool.setHitPoint(hitPoint);\n\n              var selections = _this2._viewer.getAggregateSelection();\n\n              if (selections.length) {\n                var model = selections[0].model;\n                var dbIdArray = selections[0].selection;\n                ViewerToolkit.getFragIds(model, dbIdArray).then(function (fragIdsArray) {\n                  _this2.panel.rxTool.setSelection({\n                    fragIdsArray: fragIdsArray,\n                    dbIdArray: dbIdArray,\n                    model: model\n                  });\n                });\n              }\n            }\n          }\n\n          return true;\n        }\n      };\n      hotkeyMng.pushHotkeys(this.hotkeysId, [hotKeyTranslate, hotKeyRotate], {\n        tryUntilSuccess: true\n      });\n\n      this._viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, this.onGeometryLoadedHandler);\n\n      this._viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onAggregateSelectionChangedHandler);\n\n      console.log('Viewing.Extension.ModelTransformer loaded');\n      return true;\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadControls\",\n    value: function loadControls() {\n      var _this3 = this;\n\n      this.control = ViewerToolkit.createButton('toolbar-model-transformer', 'adsk-button-icon model-transformer-icon fa fa-gears', 'Transform Models', function () {\n        _this3.panel.toggleVisibility();\n      });\n      this.panel = new Panel(this._viewer, this.control.container);\n      this.panel.on('open', function () {\n        if (_this3._options.autoLoad) {\n          var loadedModels = _this3._viewer.impl.modelQueue().getModels();\n\n          loadedModels.forEach(function (model) {\n            model.modelId = model.modelId || ExtensionBase.guid();\n\n            if (!_this3.modelCollection[model.modelId]) {\n              model.name = model.name || 'Model ' + (Object.keys(_this3.modelCollection).length + 1);\n\n              _this3.addModel(model);\n            }\n          });\n        }\n      });\n      this.panel.on('model.transform', function (data) {\n        data.model.transform = data.transform;\n\n        _this3.applyTransform(data.model);\n\n        _this3._viewer.impl.sceneUpdated(true); // DISABLING FIT TO VIEW for XYPLANE DEMO\n        // if (data.fitToView) {\n        //   this.fitModelToView(data.model)\n        // }\n\n      });\n      this.panel.on('model.delete', function (data) {\n        _this3.deleteModel(data.model);\n\n        _this3._viewer.impl.sceneUpdated(true);\n      });\n      this.panel.on('model.selected', function (data) {\n        _this3.currentSelection = data.selection; // DISABLING FIT TO VIEW for XYPLANE DEMO\n        // if (data.fitToView) {\n        //   this.fitModelToView(data.model)\n        // }\n      });\n\n      if (this._options.parentControl) {\n        if (typeof this._options.parentControl === 'string') {\n          this.parentControl = this._viewer.getToolbar().getControl(this._options.parentControl);\n        } else if (typeof this._options.parentControl === 'object') {\n          this.parentControl = this._options.parentControl;\n        }\n      } else {\n        var viewerToolbar = this._viewer.getToolbar(true);\n\n        this.parentControl = new Autodesk.Viewing.UI.ControlGroup('model-transformer');\n        viewerToolbar.addControl(this.parentControl);\n      }\n\n      if (this.parentControl) {\n        this.parentControl.addControl(this.control);\n      }\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"onGeometryLoaded\",\n    value: function onGeometryLoaded(e) {\n      // In Philippes extension he uses e.target\n      if (this._options.autoLoad) {\n        var model = e.model;\n        model.modelId = model.modelId || ExtensionBase.guid();\n\n        if (!this.modelCollection[model.modelId]) {\n          model.name = model.name || 'Model ' + (Object.keys(this.modelCollection).length + 1);\n          this.addModel(model);\n        }\n      }\n    } /////////////////////////////////////////////////////////////////\n    // Unload callback\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"unload\",\n    value: function unload() {\n      Autodesk.Viewing.theHotkeyManager.popHotkeys(this.hotkeysId);\n\n      this._viewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, this.onGeometryLoadedHandler);\n\n      this._viewer.removeEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onAggregateSelectionChangedHandler);\n\n      if (this.control) {\n        this.parentControl.removeControl(this.control);\n      }\n\n      console.log('Viewing.Extension.ModelTransfomer unloaded');\n      return true;\n    } /////////////////////////////////////////////////////////////////\n    // Fix model structure when selecting model\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"onAggregateSelectionChanged\",\n    value: function onAggregateSelectionChanged(event) {\n      if (event.selections && event.selections.length) {\n        var selection = event.selections[0];\n        this.selectedDbIdArray = event.selections[0].dbIdArray;\n        this.setStructure(selection.model);\n      }\n    } /////////////////////////////////////////////////////////////////\n    // Applies transform to specific model\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"applyTransform\",\n    value: function applyTransform(model) {\n      var viewer = this._viewer;\n      var euler = new THREE.Euler(model.transform.rotation.x * Math.PI / 180, model.transform.rotation.y * Math.PI / 180, model.transform.rotation.z * Math.PI / 180, 'XYZ');\n      var quaternion = new THREE.Quaternion();\n      quaternion.setFromEuler(euler);\n\n      function _transformFragProxy(fragId) {\n        var fragProxy = viewer.impl.getFragmentProxy(model, fragId);\n        fragProxy.getAnimTransform();\n        fragProxy.position = model.transform.translation;\n        fragProxy.scale = model.transform.scale; //Not a standard three.js quaternion\n\n        fragProxy.quaternion._x = quaternion.x;\n        fragProxy.quaternion._y = quaternion.y;\n        fragProxy.quaternion._z = quaternion.z;\n        fragProxy.quaternion._w = quaternion.w;\n        fragProxy.updateAnimTransform();\n      }\n\n      var fragCount = model.getFragmentList().fragments.fragId2dbId.length; //fragIds range from 0 to fragCount-1\n\n      for (var fragId = 0; fragId < fragCount; ++fragId) {\n        _transformFragProxy(fragId);\n      }\n    } //////////////////////////////////////////////////////////////////////////\n    //\n    //\n    //////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"fitModelToView\",\n    value: function fitModelToView(model) {\n      var instanceTree = model.getData().instanceTree;\n\n      if (instanceTree) {\n        var rootId = instanceTree.getRootId();\n        this._viewer.model = model;\n\n        this._viewer.fitToView([rootId]);\n      }\n    } //////////////////////////////////////////////////////////////////////////\n    //\n    //\n    //////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"setStructure\",\n    value: function setStructure(model) {\n      var instanceTree = model.getData().instanceTree;\n\n      if (instanceTree && this._viewer.modelstructure) {\n        this._viewer.modelstructure.setModel(instanceTree);\n      }\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"addModel\",\n    value: function addModel(model) {\n      this.modelCollection[model.modelId] = model;\n\n      if (!model.transform) {\n        model.transform = {\n          scale: {\n            x: 1.0,\n            y: 1.0,\n            z: 1.0\n          },\n          translation: {\n            x: 0.0,\n            y: 0.0,\n            z: 0.0\n          },\n          rotation: {\n            x: 0.0,\n            y: 0.0,\n            z: 0.0\n          }\n        };\n      }\n\n      this.panel.dropdown.addItem(model, true);\n    } //////////////////////////////////////////////////////////////////////////\n    //\n    //\n    //////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"modelTransformToMatrix\",\n    value: function modelTransformToMatrix(transform) {\n      var matrix = new THREE.Matrix4();\n      var translation = new THREE.Vector3(transform.translation.x, transform.translation.y, transform.translation.z);\n      var euler = new THREE.Euler(transform.rotation.x * Math.PI / 180, transform.rotation.y * Math.PI / 180, transform.rotation.z * Math.PI / 180, 'XYZ');\n      var quaternion = new THREE.Quaternion();\n      quaternion.setFromEuler(euler);\n      var scale = new THREE.Vector3(transform.scale.x, transform.scale.y, transform.scale.z);\n      matrix.compose(translation, quaternion, scale);\n      return matrix;\n    } //////////////////////////////////////////////////////////////////////////\n    //\n    //\n    //////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"buildPlacementTransform\",\n    value: function buildPlacementTransform(modelName) {\n      var placementTransform = new THREE.Matrix4();\n\n      if (!this.firstModelLoaded) {\n        this.firstModelLoaded = modelName;\n      } // those file type have different orientation\n      // than other, so need to correct it\n      // upon insertion\n\n\n      var zOriented = ['rvt', 'nwc'];\n      var firstExt = this.firstModelLoaded.split('.').pop(-1);\n      var modelExt = modelName.split(\".\").pop(-1);\n\n      if (zOriented.indexOf(firstExt) > -1) {\n        if (zOriented.indexOf(modelExt) < 0) {\n          placementTransform.makeRotationX(90 * Math.PI / 180);\n        }\n      } else {\n        if (zOriented.indexOf(modelExt) > -1) {\n          placementTransform.makeRotationX(-90 * Math.PI / 180);\n        }\n      }\n\n      return placementTransform;\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"deleteModel\",\n    value: function deleteModel(model) {\n      var fireEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      debugger;\n      delete this.modelCollection[model.modelId];\n\n      if (Object.keys(this.modelCollection).length === 0) {\n        this.firstModelLoaded = null;\n      }\n\n      if (fireEvent) {\n        this.emit('model.delete', model);\n      }\n\n      this._viewer.impl.unloadModel(model);\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      this.panel.clearSelection();\n      this.panel.dropdown.clear();\n      this.modelCollection = {};\n    }\n  }], [{\n    key: \"ExtensionId\",\n    get: function get() {\n      return 'Viewing.Extension.ModelTransformer';\n    }\n  }]);\n\n  return ModelTransformerExtension;\n}(ExtensionBase);\n\nAutodesk.Viewing.theExtensionManager.registerExtension(ModelTransformerExtension.ExtensionId, ModelTransformerExtension);","map":{"version":3,"sources":["E:\\GitHub\\FrogeCsConfiguratorRivetec\\Vyvoj\\src\\js\\extensions\\Viewing.Extension.ModelTransformer\\Viewing.Extension.ModelTransformer.js"],"names":["Panel","ExtensionBase","ViewerToolkit","Autodesk","window","THREE","ModelTransformerExtension","viewer","options","firstModelLoaded","modelCollection","onGeometryLoadedHandler","e","onGeometryLoaded","onAggregateSelectionChangedHandler","onAggregateSelectionChanged","selectedDbIdArray","loadControls","hotkeyMng","Viewing","theHotkeyManager","hotkeysId","guid","hotKeyTranslate","keycodes","KEYCODES","t","onPress","hotkeys","onRelease","hitPoint","panel","rxTool","active","_viewer","toolController","deactivateTool","getName","txTool","activateTool","setHitPoint","selections","getAggregateSelection","length","model","dbIdArray","selection","getFragIds","then","fragIdsArray","setSelection","hotKeyRotate","r","pushHotkeys","tryUntilSuccess","addEventListener","GEOMETRY_LOADED_EVENT","AGGREGATE_SELECTION_CHANGED_EVENT","console","log","control","createButton","toggleVisibility","container","on","_options","autoLoad","loadedModels","impl","modelQueue","getModels","forEach","modelId","name","Object","keys","addModel","data","transform","applyTransform","sceneUpdated","deleteModel","currentSelection","parentControl","getToolbar","getControl","viewerToolbar","UI","ControlGroup","addControl","popHotkeys","removeEventListener","removeControl","event","setStructure","euler","Euler","rotation","x","Math","PI","y","z","quaternion","Quaternion","setFromEuler","_transformFragProxy","fragId","fragProxy","getFragmentProxy","getAnimTransform","position","translation","scale","_x","_y","_z","_w","w","updateAnimTransform","fragCount","getFragmentList","fragments","fragId2dbId","instanceTree","getData","rootId","getRootId","fitToView","modelstructure","setModel","dropdown","addItem","matrix","Matrix4","Vector3","compose","modelName","placementTransform","zOriented","firstExt","split","pop","modelExt","indexOf","makeRotationX","fireEvent","emit","unloadModel","clearSelection","clear","theExtensionManager","registerExtension","ExtensionId"],"mappings":"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","sourcesContent":["/////////////////////////////////////////////////////////////////////\r\n// Viewing.Extension.ModelTransfomerExtension\r\n// by Philippe Leefsma, April 2016\r\n//\r\n/////////////////////////////////////////////////////////////////////\r\n/* eslint-disable */\r\nimport Panel from './Viewing.Extension.ModelTransformer.Panel'\r\nimport ExtensionBase from '../components/Viewer.ExtensionBase'\r\nimport ViewerToolkit from '../components/Viewer.Toolkit'\r\n/// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\r\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\r\n\r\nconst Autodesk = window.Autodesk;\r\nconst THREE = window.THREE;\r\n\r\nclass ModelTransformerExtension extends ExtensionBase {\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Class constructor\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  constructor (viewer, options) {\r\n\r\n    super(viewer, options)\r\n\r\n    this.firstModelLoaded = null\r\n    this.modelCollection = {}\r\n\r\n    this.onGeometryLoadedHandler = (e) => {\r\n\r\n      this.onGeometryLoaded(e)\r\n    }\r\n\r\n    this.onAggregateSelectionChangedHandler = (e) => {\r\n\r\n      this.onAggregateSelectionChanged(e)\r\n    }\r\n\r\n    this.selectedDbIdArray = []\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Extension Id\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static get ExtensionId () {\r\n\r\n    return 'Viewing.Extension.ModelTransformer'\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Load callback\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  load () {\r\n\r\n    this.loadControls()\r\n\r\n    const hotkeyMng = Autodesk.Viewing.theHotkeyManager\r\n\r\n    this.hotkeysId = ExtensionBase.guid()\r\n\r\n    const hotKeyTranslate = {\r\n\r\n      keycodes: [\r\n        hotkeyMng.KEYCODES.t\r\n      ],\r\n      onPress: (hotkeys) => {\r\n        //handled\r\n        return true\r\n      },\r\n      onRelease: (hotkeys) => {\r\n\r\n        var hitPoint = null\r\n\r\n        if (this.panel.rxTool.active) {\r\n\r\n          hitPoint = this.panel.rxTool.hitPoint()\r\n\r\n          this._viewer.toolController.deactivateTool(\r\n            this.panel.rxTool.getName())\r\n        }\r\n\r\n        if (!this.panel.txTool.active) {\r\n\r\n          this._viewer.toolController.activateTool(\r\n            this.panel.txTool.getName())\r\n\r\n          if (hitPoint) {\r\n\r\n            this.panel.txTool.setHitPoint(hitPoint)\r\n\r\n            const selections =\r\n              this._viewer.getAggregateSelection()\r\n\r\n            if (selections.length) {\r\n\r\n              const model = selections[0].model\r\n\r\n              const dbIdArray = selections[0].selection\r\n\r\n              ViewerToolkit.getFragIds(\r\n                model, dbIdArray).then((fragIdsArray) => {\r\n\r\n                  this.panel.txTool.setSelection({\r\n                    fragIdsArray,\r\n                    dbIdArray,\r\n                    model\r\n                  })\r\n                })\r\n            }\r\n          }\r\n        }\r\n\r\n        return true\r\n      }\r\n    }\r\n\r\n    const hotKeyRotate = {\r\n\r\n      keycodes: [\r\n        hotkeyMng.KEYCODES.r\r\n      ],\r\n      onPress: (hotkeys) => {\r\n        //handled\r\n        return true\r\n      },\r\n      onRelease: (hotkeys) => {\r\n\r\n        var hitPoint = null\r\n\r\n        if (this.panel.txTool.active) {\r\n\r\n          hitPoint = this.panel.txTool.hitPoint()\r\n\r\n          this._viewer.toolController.deactivateTool(\r\n            this.panel.txTool.getName())\r\n        }\r\n\r\n        if (!this.panel.rxTool.active) {\r\n\r\n          this._viewer.toolController.activateTool(\r\n            this.panel.rxTool.getName())\r\n\r\n          if (hitPoint) {\r\n\r\n            this.panel.rxTool.setHitPoint(hitPoint)\r\n\r\n            const selections =\r\n              this._viewer.getAggregateSelection()\r\n\r\n            if (selections.length) {\r\n\r\n              const model = selections[0].model\r\n\r\n              const dbIdArray = selections[0].selection\r\n\r\n              ViewerToolkit.getFragIds(\r\n                model, dbIdArray).then((fragIdsArray) => {\r\n\r\n                  this.panel.rxTool.setSelection({\r\n                    fragIdsArray,\r\n                    dbIdArray,\r\n                    model\r\n                  })\r\n                })\r\n            }\r\n          }\r\n        }\r\n\r\n        return true\r\n      }\r\n    }\r\n\r\n    hotkeyMng.pushHotkeys(\r\n      this.hotkeysId, [\r\n          hotKeyTranslate,\r\n          hotKeyRotate\r\n        ], {\r\n        tryUntilSuccess: true\r\n      })\r\n\r\n    this._viewer.addEventListener(\r\n      Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\r\n      this.onGeometryLoadedHandler)\r\n\r\n    this._viewer.addEventListener(\r\n      Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT,\r\n      this.onAggregateSelectionChangedHandler)\r\n\r\n    console.log('Viewing.Extension.ModelTransformer loaded')\r\n\r\n    return true\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  loadControls () {\r\n\r\n    this.control = ViewerToolkit.createButton(\r\n      'toolbar-model-transformer',\r\n      'adsk-button-icon model-transformer-icon fa fa-gears',\r\n      'Transform Models', () => {\r\n\r\n        this.panel.toggleVisibility()\r\n      })\r\n\r\n    this.panel = new Panel(\r\n      this._viewer,\r\n      this.control.container)\r\n\r\n    this.panel.on('open', () => {\r\n\r\n      if(this._options.autoLoad) {\r\n\r\n        var loadedModels = this._viewer.impl.modelQueue().getModels()\r\n\r\n        loadedModels.forEach((model) => {\r\n\r\n          model.modelId = model.modelId || ExtensionBase.guid()\r\n\r\n          if (!this.modelCollection[ model.modelId ]) {\r\n\r\n            model.name = model.name ||\r\n            'Model ' + (Object.keys(this.modelCollection).length + 1)\r\n\r\n            this.addModel(model)\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    this.panel.on('model.transform', (data) => {\r\n\r\n      data.model.transform = data.transform\r\n\r\n      this.applyTransform(data.model)\r\n\r\n      this._viewer.impl.sceneUpdated(true)\r\n\r\n      // DISABLING FIT TO VIEW for XYPLANE DEMO\r\n\r\n      // if (data.fitToView) {\r\n      //   this.fitModelToView(data.model)\r\n      // }\r\n    })\r\n\r\n    this.panel.on('model.delete', (data) => {\r\n      this.deleteModel(\r\n        data.model)\r\n\r\n      this._viewer.impl.sceneUpdated(true)\r\n    })\r\n\r\n    this.panel.on('model.selected', (data) => {\r\n\r\n      this.currentSelection = data.selection\r\n\r\n      // DISABLING FIT TO VIEW for XYPLANE DEMO\r\n\r\n      // if (data.fitToView) {\r\n      //   this.fitModelToView(data.model)\r\n      // }\r\n    })\r\n\r\n    if (this._options.parentControl) {\r\n\r\n      if(typeof this._options.parentControl === 'string') {\r\n\r\n        this.parentControl = this._viewer.getToolbar().getControl(\r\n          this._options.parentControl)\r\n\r\n      } else if (typeof this._options.parentControl === 'object') {\r\n\r\n        this.parentControl = this._options.parentControl\r\n      }\r\n\r\n    } else {\r\n\r\n      var viewerToolbar = this._viewer.getToolbar(true)\r\n\r\n      this.parentControl = new Autodesk.Viewing.UI.ControlGroup(\r\n        'model-transformer')\r\n\r\n      viewerToolbar.addControl(this.parentControl)\r\n    }\r\n\r\n    if (this.parentControl) {\r\n\r\n      this.parentControl.addControl(\r\n        this.control)\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  onGeometryLoaded (e) {\r\n    // In Philippes extension he uses e.target\r\n    if(this._options.autoLoad) {\r\n      var model = e.model\r\n\r\n      model.modelId = model.modelId || ExtensionBase.guid()\r\n\r\n      if (!this.modelCollection[ model.modelId ]) {\r\n\r\n        model.name = model.name ||\r\n        'Model ' + (Object.keys(this.modelCollection).length + 1)\r\n\r\n        this.addModel(model)\r\n      }\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Unload callback\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  unload () {\r\n\r\n    Autodesk.Viewing.theHotkeyManager.popHotkeys(\r\n      this.hotkeysId)\r\n\r\n    this._viewer.removeEventListener(\r\n      Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\r\n      this.onGeometryLoadedHandler)\r\n\r\n    this._viewer.removeEventListener(\r\n      Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT,\r\n      this.onAggregateSelectionChangedHandler)\r\n\r\n    if (this.control) {\r\n\r\n      this.parentControl.removeControl(\r\n        this.control)\r\n    }\r\n\r\n    console.log('Viewing.Extension.ModelTransfomer unloaded')\r\n\r\n    return true\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Fix model structure when selecting model\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  onAggregateSelectionChanged (event) {\r\n\r\n    if (event.selections && event.selections.length) {\r\n\r\n      var selection = event.selections[0]\r\n\r\n      this.selectedDbIdArray = event.selections[0].dbIdArray\r\n\r\n      this.setStructure(selection.model)\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Applies transform to specific model\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  applyTransform (model) {\r\n\r\n    var viewer = this._viewer\r\n\r\n    var euler = new THREE.Euler(\r\n      model.transform.rotation.x * Math.PI/180,\r\n      model.transform.rotation.y * Math.PI/180,\r\n      model.transform.rotation.z * Math.PI/180,\r\n      'XYZ')\r\n\r\n    var quaternion = new THREE.Quaternion()\r\n\r\n    quaternion.setFromEuler(euler)\r\n\r\n    function _transformFragProxy (fragId) {\r\n\r\n      var fragProxy = viewer.impl.getFragmentProxy(\r\n        model,\r\n        fragId)\r\n\r\n      fragProxy.getAnimTransform()\r\n\r\n      fragProxy.position = model.transform.translation\r\n\r\n      fragProxy.scale = model.transform.scale\r\n\r\n      //Not a standard three.js quaternion\r\n      fragProxy.quaternion._x = quaternion.x\r\n      fragProxy.quaternion._y = quaternion.y\r\n      fragProxy.quaternion._z = quaternion.z\r\n      fragProxy.quaternion._w = quaternion.w\r\n\r\n      fragProxy.updateAnimTransform()\r\n    }\r\n\r\n    var fragCount = model.getFragmentList().\r\n      fragments.fragId2dbId.length\r\n\r\n    //fragIds range from 0 to fragCount-1\r\n    for (var fragId = 0; fragId < fragCount; ++fragId) {\r\n\r\n      _transformFragProxy(fragId)\r\n    }\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  //////////////////////////////////////////////////////////////////////////\r\n  fitModelToView (model) {\r\n\r\n    var instanceTree = model.getData().instanceTree\r\n\r\n    if (instanceTree) {\r\n\r\n      var rootId = instanceTree.getRootId()\r\n\r\n      this._viewer.model = model\r\n\r\n      this._viewer.fitToView([rootId])\r\n    }\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  //////////////////////////////////////////////////////////////////////////\r\n  setStructure (model) {\r\n\r\n    var instanceTree = model.getData().instanceTree\r\n\r\n    if (instanceTree && this._viewer.modelstructure) {\r\n\r\n      this._viewer.modelstructure.setModel(\r\n        instanceTree)\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  addModel (model) {\r\n\r\n    this.modelCollection[model.modelId] = model\r\n\r\n    if (!model.transform) {\r\n\r\n      model.transform = {\r\n        scale: {\r\n          x: 1.0, y: 1.0, z: 1.0\r\n        },\r\n        translation: {\r\n          x: 0.0, y: 0.0, z: 0.0\r\n        },\r\n        rotation: {\r\n          x: 0.0, y: 0.0, z: 0.0\r\n        }\r\n      }\r\n    }\r\n\r\n    this.panel.dropdown.addItem(\r\n      model, true)\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  //////////////////////////////////////////////////////////////////////////\r\n  modelTransformToMatrix (transform) {\r\n\r\n    var matrix = new THREE.Matrix4()\r\n\r\n    var translation = new THREE.Vector3(\r\n      transform.translation.x,\r\n      transform.translation.y,\r\n      transform.translation.z)\r\n\r\n    var euler = new THREE.Euler(\r\n      transform.rotation.x * Math.PI / 180,\r\n      transform.rotation.y * Math.PI / 180,\r\n      transform.rotation.z * Math.PI / 180,\r\n      'XYZ')\r\n\r\n    var quaternion = new THREE.Quaternion()\r\n\r\n    quaternion.setFromEuler(euler)\r\n\r\n    var scale = new THREE.Vector3(\r\n      transform.scale.x,\r\n      transform.scale.y,\r\n      transform.scale.z)\r\n\r\n    matrix.compose(translation, quaternion, scale)\r\n\r\n    return matrix\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  //////////////////////////////////////////////////////////////////////////\r\n  buildPlacementTransform (modelName) {\r\n\r\n    var placementTransform = new THREE.Matrix4()\r\n\r\n    if (!this.firstModelLoaded) {\r\n\r\n      this.firstModelLoaded = modelName\r\n    }\r\n\r\n    // those file type have different orientation\r\n    // than other, so need to correct it\r\n    // upon insertion\r\n    const zOriented = ['rvt', 'nwc']\r\n\r\n    var firstExt = this.firstModelLoaded.split('.').pop(-1)\r\n\r\n    var modelExt = modelName.split(\".\").pop(-1)\r\n\r\n    if (zOriented.indexOf(firstExt) > -1) {\r\n\r\n      if (zOriented.indexOf(modelExt) < 0) {\r\n\r\n        placementTransform.makeRotationX(\r\n          90 * Math.PI/180)\r\n      }\r\n\r\n    } else {\r\n\r\n      if(zOriented.indexOf(modelExt) > -1) {\r\n\r\n        placementTransform.makeRotationX(\r\n          -90 * Math.PI/180)\r\n      }\r\n    }\r\n\r\n    return placementTransform\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  deleteModel (model, fireEvent = true) {\r\n    debugger\r\n    delete this.modelCollection[model.modelId]\r\n\r\n    if(Object.keys(this.modelCollection).length === 0){\r\n\r\n      this.firstModelLoaded = null\r\n    }\r\n\r\n    if(fireEvent) {\r\n\r\n      this.emit('model.delete', model)\r\n    }\r\n\r\n    this._viewer.impl.unloadModel(model)\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  clearModels () {\r\n\r\n    this.panel.clearSelection()\r\n\r\n    this.panel.dropdown.clear()\r\n\r\n    this.modelCollection = {}\r\n  }\r\n}\r\n\r\nAutodesk.Viewing.theExtensionManager.registerExtension(\r\n  ModelTransformerExtension.ExtensionId,\r\n  ModelTransformerExtension)\r\n"]},"metadata":{},"sourceType":"module"}