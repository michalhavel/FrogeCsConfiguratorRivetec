{"ast":null,"code":"import _classCallCheck from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\n/* eslint-disable */\nimport EventsEmitter from '../components/EventsEmitter'; /// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\n\nvar Autodesk = window.Autodesk;\nvar THREE = window.THREE;\n\nvar RotateTool =\n/*#__PURE__*/\nfunction (_EventsEmitter) {\n  _inherits(RotateTool, _EventsEmitter);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n  function RotateTool(viewer) {\n    var _this;\n\n    _classCallCheck(this, RotateTool);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RotateTool).call(this));\n    _this.keys = {};\n    _this.active = false;\n    _this.viewer = viewer;\n    _this.fullTransform = false;\n    _this._hitPoint = new THREE.Vector3();\n\n    _this.viewer.toolController.registerTool(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.onAggregateSelectionChangedHandler = function (e) {\n      _this.onAggregateSelectionChanged(e);\n    };\n\n    return _this;\n  } /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(RotateTool, [{\n    key: \"enable\",\n    value: function enable(_enable) {\n      var name = this.getName();\n\n      if (_enable) {\n        this.viewer.toolController.activateTool(name);\n      } else {\n        this.viewer.toolController.deactivateTool(name);\n      }\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getNames\",\n    value: function getNames() {\n      return ['Viewing.Rotate.Tool'];\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'Viewing.Rotate.Tool';\n    } ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      if (!this.active) {\n        this.active = true;\n        this.viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onAggregateSelectionChangedHandler);\n      }\n    } ///////////////////////////////////////////////////////////////////////////\n    // deactivate tool\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      if (this.active) {\n        this.active = false;\n\n        if (this.rotateControl) {\n          this.rotateControl.remove();\n          this.rotateControl = null;\n        }\n\n        this.viewer.removeEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onAggregateSelectionChangedHandler);\n      }\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"onAggregateSelectionChanged\",\n    value: function onAggregateSelectionChanged(event) {\n      if (this.rotateControl && this.rotateControl.engaged) {\n        this.rotateControl.engaged = false; //this.viewer.select(this.selection.dbIdArray)\n\n        return;\n      }\n\n      if (event.selections && event.selections.length) {\n        var selection = event.selections[0];\n        this.setSelection(selection);\n      } else {\n        this.clearSelection();\n      }\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(selection) {\n      this.selection = selection;\n      this.emit('transform.modelSelected', this.selection);\n\n      if (this.fullTransform) {\n        this.selection.fragIdsArray = [];\n        var fragCount = selection.model.getFragmentList().fragments.fragId2dbId.length;\n\n        for (var fragId = 0; fragId < fragCount; ++fragId) {\n          this.selection.fragIdsArray.push(fragId);\n        }\n\n        this.selection.dbIdArray = [];\n        var instanceTree = selection.model.getData().instanceTree;\n        var rootId = instanceTree.getRootId();\n        this.selection.dbIdArray.push(rootId);\n        this.drawAxis();\n      } else {\n        this.drawAxis();\n      }\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      this.selection = null;\n\n      if (this.rotateControl) {\n        this.rotateControl.remove();\n        this.rotateControl = null;\n        this.viewer.impl.sceneUpdated(true);\n      }\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"drawAxis\",\n    value: function drawAxis() {\n      var _this2 = this;\n\n      var bBox = this.geWorldBoundingBox(this.selection.fragIdsArray, this.selection.model.getFragmentList());\n      this.center = new THREE.Vector3((bBox.min.x + bBox.max.x) / 2, (bBox.min.y + bBox.max.y) / 2, (bBox.min.z + bBox.max.z) / 2);\n      var size = Math.max(bBox.max.x - bBox.min.x, bBox.max.y - bBox.min.y, bBox.max.z - bBox.min.z) * 0.8;\n\n      if (this.rotateControl) {\n        this.rotateControl.remove();\n      }\n\n      this.rotateControl = new RotateControl(this.viewer, this.center, size);\n      this.rotateControl.on('transform.rotate', function (data) {\n        _this2.rotateFragments(_this2.selection.model, _this2.selection.fragIdsArray, data.axis, data.angle, _this2.center);\n\n        _this2.viewer.impl.sceneUpdated(true);\n      });\n    } ///////////////////////////////////////////////////////////////////////////\n    // get 3d hit point on mesh\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getHitPoint\",\n    value: function getHitPoint(event) {\n      var screenPoint = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      var n = this.normalize(screenPoint);\n      var hitPoint = this.viewer.utilities.getHitPoint(n.x, n.y);\n      return hitPoint;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"hitPoint\",\n    value: function hitPoint() {\n      return this._hitPoint;\n    } ///////////////////////////////////////////////////////////////////////////\n    // normalize screen coordinates\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(screenPoint) {\n      var viewport = this.viewer.navigation.getScreenViewport();\n      var n = {\n        x: (screenPoint.x - viewport.left) / viewport.width,\n        y: (screenPoint.y - viewport.top) / viewport.height\n      };\n      return n;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"setHitPoint\",\n    value: function setHitPoint(hitPoint) {\n      this._hitPoint.copy(hitPoint);\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleButtonDown\",\n    value: function handleButtonDown(event, button) {\n      if (this.rotateControl) {\n        if (this.rotateControl.onPointerDown(event)) {\n          return true;\n        }\n      }\n\n      if (button === 0 && this.keys.Control) {\n        this.isDragging = true;\n        this.mousePos = {\n          x: event.clientX,\n          y: event.clientY\n        };\n        return true;\n      }\n\n      var hitPoint = this.getHitPoint(event);\n\n      if (hitPoint) {\n        this._hitPoint = hitPoint;\n      }\n\n      return false;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleButtonUp\",\n    value: function handleButtonUp(event, button) {\n      if (this.rotateControl) {\n        this.rotateControl.onPointerUp(event);\n      }\n\n      if (button === 0) {\n        this.isDragging = false;\n      }\n\n      return false;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(event) {\n      if (this.rotateControl) {\n        this.rotateControl.onPointerHover(event);\n      }\n\n      if (this.isDragging) {\n        if (this.selection) {\n          var offset = {\n            x: this.mousePos.x - event.clientX,\n            y: event.clientY - this.mousePos.y\n          };\n          this.mousePos = {\n            x: event.clientX,\n            y: event.clientY\n          };\n          var angle = Math.sqrt(offset.x * offset.x + offset.y * offset.y);\n          var sidewaysDirection = new THREE.Vector3();\n          var moveDirection = new THREE.Vector3();\n          var eyeDirection = new THREE.Vector3();\n          var upDirection = new THREE.Vector3();\n          var camera = this.viewer.getCamera();\n          var axis = new THREE.Vector3();\n          var eye = new THREE.Vector3();\n          eye.copy(camera.position).sub(camera.target);\n          eyeDirection.copy(eye).normalize();\n          upDirection.copy(camera.up).normalize();\n          sidewaysDirection.crossVectors(upDirection, eyeDirection).normalize();\n          upDirection.setLength(offset.y);\n          sidewaysDirection.setLength(offset.x);\n          moveDirection.copy(upDirection.add(sidewaysDirection));\n          axis.crossVectors(moveDirection, eye).normalize();\n          this.rotateFragments(this.selection.model, this.selection.fragIdsArray, axis, angle * Math.PI / 180, this.center);\n          this.viewer.impl.sceneUpdated(true);\n        }\n\n        return true;\n      }\n\n      return false;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event, keyCode) {\n      this.keys[event.key] = true;\n\n      if (keyCode === 27) {\n        //ESC\n        this.viewer.clearSelection();\n      }\n\n      return false;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"handleKeyUp\",\n    value: function handleKeyUp(event, keyCode) {\n      this.keys[event.key] = false;\n      return false;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"rotateFragments\",\n    value: function rotateFragments(model, fragIdsArray, axis, angle, center) {\n      var _this3 = this;\n\n      var quaternion = new THREE.Quaternion();\n      quaternion.setFromAxisAngle(axis, angle);\n      fragIdsArray.forEach(function (fragId, idx) {\n        var fragProxy = _this3.viewer.impl.getFragmentProxy(model, fragId);\n\n        fragProxy.getAnimTransform();\n        var position = new THREE.Vector3(fragProxy.position.x - center.x, fragProxy.position.y - center.y, fragProxy.position.z - center.z);\n        position.applyQuaternion(quaternion);\n        position.add(center);\n        fragProxy.position = position;\n        fragProxy.quaternion.multiplyQuaternions(quaternion, fragProxy.quaternion);\n\n        if (idx === 0) {\n          if (_this3._hitPoint) {\n            _this3._hitPoint.sub(center);\n\n            _this3._hitPoint.applyQuaternion(quaternion);\n\n            _this3._hitPoint.add(center);\n          }\n\n          var euler = new THREE.Euler();\n          euler.setFromQuaternion(fragProxy.quaternion, 0);\n\n          _this3.emit('transform.rotate', {\n            rotation: euler,\n            model: model\n          });\n        }\n\n        fragProxy.updateAnimTransform();\n      });\n    } ///////////////////////////////////////////////////////////////////////////\n    // returns bounding box as it appears in the viewer\n    // (transformations could be applied)\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"geWorldBoundingBox\",\n    value: function geWorldBoundingBox(fragIds, fragList) {\n      var fragbBox = new THREE.Box3();\n      var nodebBox = new THREE.Box3();\n      fragIds.forEach(function (fragId) {\n        fragList.getWorldBounds(fragId, fragbBox);\n        nodebBox.union(fragbBox);\n      });\n      return nodebBox;\n    }\n  }]);\n\n  return RotateTool;\n}(EventsEmitter); ///////////////////////////////////////////////////////////////////////////////\n//\n//\n///////////////////////////////////////////////////////////////////////////////\n\n\nexport { RotateTool as default };\n\nvar RotateControl =\n/*#__PURE__*/\nfunction (_EventsEmitter2) {\n  _inherits(RotateControl, _EventsEmitter2);\n\n  function RotateControl(viewer, center, size) {\n    var _this4;\n\n    _classCallCheck(this, RotateControl);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(RotateControl).call(this));\n    _this4.engaged = false;\n    _this4.overlayScene = 'rotateControlScene';\n    _this4.domElement = viewer.impl.canvas;\n    _this4.camera = viewer.impl.camera;\n    _this4.viewer = viewer;\n    _this4.center = center;\n    _this4.size = size;\n    _this4.gizmos = [];\n\n    _this4.viewer.impl.createOverlayScene(_this4.overlayScene);\n\n    _this4.createAxis(center, new THREE.Vector3(1, 0, 0), size * 0.85, 0xFF0000);\n\n    _this4.createAxis(center, new THREE.Vector3(0, 1, 0), size * 0.85, 0x00FF00);\n\n    _this4.createAxis(center, new THREE.Vector3(0, 0, 1), size * 0.85, 0x0000FF); // World UP = Y\n\n\n    if (_this4.camera.worldup.y) {\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(0, Math.PI / 2, 0), size * 0.0045, size * 0.4, 0xFF0000, Math.PI, new THREE.Vector3(1, 0, 0)));\n\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(Math.PI / 2, 0, 0), size * 0.0045, size * 0.4, 0x00FF00, 2 * Math.PI, new THREE.Vector3(0, 1, 0)));\n\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(0, 0, 0), size * 0.0045, size * 0.4, 0x0000FF, Math.PI, new THREE.Vector3(0, 0, 1)));\n    } else {\n      // World UP = Z\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(Math.PI / 2, Math.PI / 2, 0), size * 0.0045, size * 0.4, 0xFF0000, Math.PI, new THREE.Vector3(1, 0, 0)));\n\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(Math.PI / 2, 0, 0), size * 0.0045, size * 0.4, 0x00FF00, Math.PI, new THREE.Vector3(0, 1, 0)));\n\n      _this4.gizmos.push(_this4.createGizmo(center, new THREE.Euler(0, 0, 0), size * 0.0045, size * 0.4, 0x0000FF, 2 * Math.PI, new THREE.Vector3(0, 0, 1)));\n    }\n\n    _this4.picker = _this4.createSphere(size * 0.02);\n    var material = new THREE.LineBasicMaterial({\n      color: 0xFFFF00,\n      linewidth: 1,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this4.angleLine = _this4.createLine(_this4.center, _this4.center, material);\n    viewer.impl.sceneUpdated(true);\n    return _this4;\n  } ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n\n\n  _createClass(RotateControl, [{\n    key: \"createLine\",\n    value: function createLine(start, end, material) {\n      var geometry = new THREE.Geometry();\n      geometry.vertices.push(new THREE.Vector3(start.x, start.y, start.z));\n      geometry.vertices.push(new THREE.Vector3(end.x, end.y, end.z));\n      var line = new THREE.Line(geometry, material);\n      this.viewer.impl.addOverlay(this.overlayScene, line);\n      return line;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"createCone\",\n    value: function createCone(start, dir, length, material) {\n      dir.normalize();\n      var end = {\n        x: start.x + dir.x * length,\n        y: start.y + dir.y * length,\n        z: start.z + dir.z * length\n      };\n      var orientation = new THREE.Matrix4();\n      orientation.lookAt(start, end, new THREE.Object3D().up);\n      var matrix = new THREE.Matrix4();\n      matrix.set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1);\n      orientation.multiply(matrix);\n      var geometry = new THREE.CylinderGeometry(0, length * 0.2, length, 128, 1);\n      var cone = new THREE.Mesh(geometry, material);\n      cone.applyMatrix(orientation);\n      cone.position.x = start.x + dir.x * length / 2;\n      cone.position.y = start.y + dir.y * length / 2;\n      cone.position.z = start.z + dir.z * length / 2;\n      this.viewer.impl.addOverlay(this.overlayScene, cone);\n      return cone;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"createAxis\",\n    value: function createAxis(start, dir, size, color) {\n      var end = {\n        x: start.x + dir.x * size,\n        y: start.y + dir.y * size,\n        z: start.z + dir.z * size\n      };\n      var material = new THREE.LineBasicMaterial({\n        color: color,\n        linewidth: 2,\n        depthTest: false,\n        depthWrite: false,\n        transparent: true\n      });\n      this.createLine(start, end, material);\n      this.createCone(end, dir, size * 0.1, material);\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"createGizmo\",\n    value: function createGizmo(center, euler, size, radius, color, range, axis) {\n      var material = new GizmoMaterial({\n        color: color\n      });\n      var subMaterial = new GizmoMaterial({\n        color: color\n      });\n      var torusGizmo = new THREE.Mesh(new THREE.TorusGeometry(radius, size, 64, 64, range), material);\n      var subTorus = new THREE.Mesh(new THREE.TorusGeometry(radius, size, 64, 64, 2 * Math.PI), subMaterial);\n      subTorus.material.highlight(true);\n      var transform = new THREE.Matrix4();\n      var q = new THREE.Quaternion();\n      q.setFromEuler(euler);\n      var s = new THREE.Vector3(1, 1, 1);\n      transform.compose(center, q, s);\n      torusGizmo.applyMatrix(transform);\n      subTorus.applyMatrix(transform);\n      var plane = this.createBox(this.size * 100, this.size * 100, 0.01);\n      plane.applyMatrix(transform);\n      subTorus.visible = false;\n      this.viewer.impl.addOverlay(this.overlayScene, torusGizmo);\n      this.viewer.impl.addOverlay(this.overlayScene, subTorus);\n      torusGizmo.subGizmo = subTorus;\n      torusGizmo.plane = plane;\n      torusGizmo.axis = axis;\n      return torusGizmo;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"createBox\",\n    value: function createBox(w, h, d) {\n      var material = new GizmoMaterial({\n        color: 0x000000\n      });\n      var geometry = new THREE.BoxGeometry(w, h, d);\n      var box = new THREE.Mesh(geometry, material);\n      box.visible = false;\n      this.viewer.impl.addOverlay(this.overlayScene, box);\n      return box;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"createSphere\",\n    value: function createSphere(radius) {\n      var material = new GizmoMaterial({\n        color: 0xFFFF00\n      });\n      var geometry = new THREE.SphereGeometry(radius, 32, 32);\n      var sphere = new THREE.Mesh(geometry, material);\n      sphere.visible = false;\n      this.viewer.impl.addOverlay(this.overlayScene, sphere);\n      return sphere;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"pointerToRaycaster\",\n    value: function pointerToRaycaster(pointer) {\n      var pointerVector = new THREE.Vector3();\n      var pointerDir = new THREE.Vector3();\n      var ray = new THREE.Raycaster();\n      var rect = this.domElement.getBoundingClientRect();\n      var x = (pointer.clientX - rect.left) / rect.width * 2 - 1;\n      var y = -((pointer.clientY - rect.top) / rect.height) * 2 + 1;\n\n      if (this.camera.isPerspective) {\n        pointerVector.set(x, y, 0.5);\n        pointerVector.unproject(this.camera);\n        ray.set(this.camera.position, pointerVector.sub(this.camera.position).normalize());\n      } else {\n        pointerVector.set(x, y, -1);\n        pointerVector.unproject(this.camera);\n        pointerDir.set(0, 0, -1);\n        ray.set(pointerVector, pointerDir.transformDirection(this.camera.matrixWorld));\n      }\n\n      return ray;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      var pointer = event.pointers ? event.pointers[0] : event;\n\n      if (pointer.button === 0) {\n        var ray = this.pointerToRaycaster(pointer);\n        var intersectResults = ray.intersectObjects(this.gizmos, true);\n\n        if (intersectResults.length) {\n          this.gizmos.forEach(function (gizmo) {\n            gizmo.visible = false;\n          });\n          this.selectedGizmo = intersectResults[0].object;\n          this.selectedGizmo.subGizmo.visible = true;\n          this.picker.position.copy(intersectResults[0].point);\n          this.angleLine.geometry.vertices[1].copy(intersectResults[0].point);\n          this.lastDir = intersectResults[0].point.sub(this.center).normalize();\n          this.angleLine.geometry.verticesNeedUpdate = true;\n          this.angleLine.visible = true;\n          this.picker.visible = true;\n        } else {\n          this.picker.visible = false;\n        }\n\n        this.engaged = this.picker.visible;\n        this.viewer.impl.sceneUpdated(true);\n      }\n\n      return this.picker.visible;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"onPointerHover\",\n    value: function onPointerHover(event) {\n      var pointer = event.pointers ? event.pointers[0] : event;\n\n      if (this.engaged) {\n        var ray = this.pointerToRaycaster(pointer);\n        var intersectResults = ray.intersectObjects([this.selectedGizmo.plane], true);\n\n        if (intersectResults.length) {\n          var intersectPoint = intersectResults[0].point;\n          var dir = intersectPoint.sub(this.center).normalize();\n          var cross = new THREE.Vector3();\n          cross.crossVectors(this.lastDir, dir);\n          var sign = Math.sign(cross.dot(this.selectedGizmo.axis));\n          this.emit('transform.rotate', {\n            angle: sign * dir.angleTo(this.lastDir),\n            axis: this.selectedGizmo.axis\n          });\n          this.lastDir = dir;\n          var pickerPoint = new THREE.Vector3(this.center.x + dir.x * this.size * 0.8, this.center.y + dir.y * this.size * 0.8, this.center.z + dir.z * this.size * 0.8);\n          this.picker.position.copy(pickerPoint);\n          this.angleLine.geometry.vertices[1].copy(pickerPoint);\n        }\n\n        this.angleLine.visible = true;\n        this.angleLine.geometry.verticesNeedUpdate = true;\n      } else {\n        this.angleLine.visible = false;\n        var ray = this.pointerToRaycaster(pointer);\n        var intersectResults = ray.intersectObjects(this.gizmos, true);\n\n        if (intersectResults.length) {\n          this.picker.position.set(intersectResults[0].point.x, intersectResults[0].point.y, intersectResults[0].point.z);\n          this.picker.visible = true;\n        } else {\n          this.picker.visible = false;\n        }\n      }\n\n      this.viewer.impl.sceneUpdated(true);\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      var _this5 = this;\n\n      this.angleLine.visible = false;\n      this.picker.visible = false;\n      this.gizmos.forEach(function (gizmo) {\n        gizmo.visible = true;\n        gizmo.subGizmo.visible = false;\n      });\n      this.viewer.impl.sceneUpdated(true);\n      setTimeout(function () {\n        _this5.engaged = false;\n      }, 100);\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(screenPoint) {\n      var viewport = this.viewer.navigation.getScreenViewport();\n      var n = {\n        x: (screenPoint.x - viewport.left) / viewport.width,\n        y: (screenPoint.y - viewport.top) / viewport.height\n      };\n      return n;\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"projectOntoPlane\",\n    value: function projectOntoPlane(worldPoint, normal) {\n      var dist = normal.dot(worldPoint);\n      return new THREE.Vector3(worldPoint.x - dist * normal.x, worldPoint.y - dist * normal.y, worldPoint.z - dist * normal.z);\n    } ///////////////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.viewer.impl.removeOverlayScene(this.overlayScene);\n    }\n  }]);\n\n  return RotateControl;\n}(EventsEmitter); ///////////////////////////////////////////////////////////////////////////////\n//\n//\n///////////////////////////////////////////////////////////////////////////////\n\n\nvar GizmoMaterial =\n/*#__PURE__*/\nfunction (_THREE$MeshBasicMater) {\n  _inherits(GizmoMaterial, _THREE$MeshBasicMater);\n\n  function GizmoMaterial(parameters) {\n    var _this6;\n\n    _classCallCheck(this, GizmoMaterial);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(GizmoMaterial).call(this));\n\n    _this6.setValues(parameters);\n\n    _this6.colorInit = _this6.color.clone();\n    _this6.opacityInit = _this6.opacity;\n    _this6.side = THREE.FrontSide;\n    _this6.depthWrite = false;\n    _this6.transparent = true;\n    _this6.depthTest = false;\n    return _this6;\n  } ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n\n\n  _createClass(GizmoMaterial, [{\n    key: \"highlight\",\n    value: function highlight(highlighted) {\n      if (highlighted) {\n        this.color.setRGB(1, 230 / 255, 3 / 255);\n        this.opacity = 1;\n      } else {\n        this.color.copy(this.colorInit);\n        this.opacity = this.opacityInit;\n      }\n    }\n  }]);\n\n  return GizmoMaterial;\n}(THREE.MeshBasicMaterial);","map":{"version":3,"sources":["E:\\GitHub\\FrogeCsConfiguratorRivetec\\Vyvoj\\src\\js\\extensions\\Viewing.Extension.ModelTransformer\\Viewing.Tool.Rotate.js"],"names":["EventsEmitter","Autodesk","window","THREE","RotateTool","viewer","keys","active","fullTransform","_hitPoint","Vector3","toolController","registerTool","onAggregateSelectionChangedHandler","e","onAggregateSelectionChanged","enable","name","getName","activateTool","deactivateTool","addEventListener","Viewing","AGGREGATE_SELECTION_CHANGED_EVENT","rotateControl","remove","removeEventListener","event","engaged","selections","length","selection","setSelection","clearSelection","emit","fragIdsArray","fragCount","model","getFragmentList","fragments","fragId2dbId","fragId","push","dbIdArray","instanceTree","getData","rootId","getRootId","drawAxis","impl","sceneUpdated","bBox","geWorldBoundingBox","center","min","x","max","y","z","size","Math","RotateControl","on","data","rotateFragments","axis","angle","screenPoint","clientX","clientY","n","normalize","hitPoint","utilities","getHitPoint","viewport","navigation","getScreenViewport","left","width","top","height","copy","button","onPointerDown","Control","isDragging","mousePos","onPointerUp","onPointerHover","offset","sqrt","sidewaysDirection","moveDirection","eyeDirection","upDirection","camera","getCamera","eye","position","sub","target","up","crossVectors","setLength","add","PI","keyCode","key","quaternion","Quaternion","setFromAxisAngle","forEach","idx","fragProxy","getFragmentProxy","getAnimTransform","applyQuaternion","multiplyQuaternions","euler","Euler","setFromQuaternion","rotation","updateAnimTransform","fragIds","fragList","fragbBox","Box3","nodebBox","getWorldBounds","union","overlayScene","domElement","canvas","gizmos","createOverlayScene","createAxis","worldup","createGizmo","picker","createSphere","material","LineBasicMaterial","color","linewidth","depthTest","depthWrite","transparent","angleLine","createLine","start","end","geometry","Geometry","vertices","line","Line","addOverlay","dir","orientation","Matrix4","lookAt","Object3D","matrix","set","multiply","CylinderGeometry","cone","Mesh","applyMatrix","createCone","radius","range","GizmoMaterial","subMaterial","torusGizmo","TorusGeometry","subTorus","highlight","transform","q","setFromEuler","s","compose","plane","createBox","visible","subGizmo","w","h","d","BoxGeometry","box","SphereGeometry","sphere","pointer","pointerVector","pointerDir","ray","Raycaster","rect","getBoundingClientRect","isPerspective","unproject","transformDirection","matrixWorld","pointers","pointerToRaycaster","intersectResults","intersectObjects","gizmo","selectedGizmo","object","point","lastDir","verticesNeedUpdate","intersectPoint","cross","sign","dot","angleTo","pickerPoint","setTimeout","worldPoint","normal","dist","removeOverlayScene","parameters","setValues","colorInit","clone","opacityInit","opacity","side","FrontSide","highlighted","setRGB","MeshBasicMaterial"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport EventsEmitter from '../components/EventsEmitter'\r\n/// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\r\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\r\n\r\nconst Autodesk = window.Autodesk;\r\nconst THREE = window.THREE;\r\n\r\nexport default class RotateTool extends EventsEmitter {\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Class constructor\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  constructor (viewer) {\r\n\r\n    super()\r\n\r\n    this.keys = {}\r\n\r\n    this.active = false\r\n\r\n    this.viewer = viewer\r\n\r\n    this.fullTransform = false\r\n\r\n    this._hitPoint = new THREE.Vector3()\r\n\r\n    this.viewer.toolController.registerTool(this)\r\n\r\n    this.onAggregateSelectionChangedHandler = (e) => {\r\n\r\n      this.onAggregateSelectionChanged(e)\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  enable (enable) {\r\n\r\n    var name = this.getName()\r\n\r\n    if (enable) {\r\n\r\n      this.viewer.toolController.activateTool(name)\r\n\r\n    } else {\r\n\r\n      this.viewer.toolController.deactivateTool(name)\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  getNames () {\r\n\r\n    return ['Viewing.Rotate.Tool']\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  getName () {\r\n\r\n    return 'Viewing.Rotate.Tool'\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////\r\n  activate () {\r\n\r\n    if (!this.active) {\r\n\r\n      this.active = true\r\n\r\n      this.viewer.addEventListener(\r\n        Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT,\r\n        this.onAggregateSelectionChangedHandler)\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // deactivate tool\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  deactivate () {\r\n\r\n    if (this.active) {\r\n\r\n      this.active = false\r\n\r\n      if (this.rotateControl) {\r\n\r\n        this.rotateControl.remove()\r\n        this.rotateControl = null\r\n      }\r\n\r\n      this.viewer.removeEventListener(\r\n        Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT,\r\n        this.onAggregateSelectionChangedHandler)\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  onAggregateSelectionChanged (event) {\r\n\r\n    if (this.rotateControl && this.rotateControl.engaged) {\r\n\r\n      this.rotateControl.engaged = false\r\n\r\n      //this.viewer.select(this.selection.dbIdArray)\r\n\r\n      return\r\n    }\r\n\r\n    if (event.selections && event.selections.length) {\r\n\r\n      var selection = event.selections[0]\r\n\r\n      this.setSelection(selection)\r\n\r\n    } else {\r\n\r\n      this.clearSelection()\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  setSelection(selection) {\r\n\r\n    this.selection = selection\r\n\r\n    this.emit('transform.modelSelected',\r\n      this.selection)\r\n\r\n    if (this.fullTransform) {\r\n\r\n      this.selection.fragIdsArray = []\r\n\r\n      var fragCount = selection.model.getFragmentList().\r\n        fragments.fragId2dbId.length\r\n\r\n      for (var fragId = 0; fragId < fragCount; ++fragId) {\r\n\r\n        this.selection.fragIdsArray.push(fragId)\r\n      }\r\n\r\n      this.selection.dbIdArray = []\r\n\r\n      var instanceTree = selection.model.getData().instanceTree\r\n\r\n      var rootId = instanceTree.getRootId()\r\n\r\n      this.selection.dbIdArray.push(rootId)\r\n\r\n      this.drawAxis()\r\n\r\n    } else {\r\n\r\n      this.drawAxis()\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  clearSelection() {\r\n\r\n    this.selection = null\r\n\r\n    if (this.rotateControl) {\r\n\r\n      this.rotateControl.remove()\r\n\r\n      this.rotateControl = null\r\n\r\n      this.viewer.impl.sceneUpdated(true)\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  drawAxis () {\r\n\r\n    var bBox = this.geWorldBoundingBox(\r\n      this.selection.fragIdsArray,\r\n      this.selection.model.getFragmentList())\r\n\r\n    this.center = new THREE.Vector3(\r\n      (bBox.min.x + bBox.max.x) / 2,\r\n      (bBox.min.y + bBox.max.y) / 2,\r\n      (bBox.min.z + bBox.max.z) / 2)\r\n\r\n    var size = Math.max(\r\n        bBox.max.x - bBox.min.x,\r\n        bBox.max.y - bBox.min.y,\r\n        bBox.max.z - bBox.min.z) * 0.8\r\n\r\n    if (this.rotateControl) {\r\n\r\n      this.rotateControl.remove()\r\n    }\r\n\r\n    this.rotateControl = new RotateControl(\r\n      this.viewer, this.center, size)\r\n\r\n    this.rotateControl.on('transform.rotate', (data) => {\r\n\r\n      this.rotateFragments(\r\n        this.selection.model,\r\n        this.selection.fragIdsArray,\r\n        data.axis,\r\n        data.angle,\r\n        this.center)\r\n\r\n      this.viewer.impl.sceneUpdated(true)\r\n    })\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // get 3d hit point on mesh\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  getHitPoint (event) {\r\n\r\n    var screenPoint = {\r\n      x: event.clientX,\r\n      y: event.clientY\r\n    }\r\n\r\n    var n = this.normalize(screenPoint)\r\n\r\n    var hitPoint = this.viewer.utilities.getHitPoint(n.x, n.y)\r\n\r\n    return hitPoint\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  hitPoint () {\r\n\r\n    return this._hitPoint\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // normalize screen coordinates\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  normalize (screenPoint) {\r\n\r\n    var viewport = this.viewer.navigation.getScreenViewport()\r\n\r\n    var n = {\r\n      x: (screenPoint.x - viewport.left) / viewport.width,\r\n      y: (screenPoint.y - viewport.top) / viewport.height\r\n    }\r\n\r\n    return n\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  setHitPoint (hitPoint) {\r\n\r\n    this._hitPoint.copy(hitPoint)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  handleButtonDown (event, button) {\r\n\r\n    if (this.rotateControl) {\r\n\r\n      if (this.rotateControl.onPointerDown(event)) {\r\n\r\n        return true\r\n      }\r\n    }\r\n\r\n    if (button === 0 && this.keys.Control) {\r\n\r\n      this.isDragging = true\r\n\r\n      this.mousePos = {\r\n        x: event.clientX,\r\n        y: event.clientY\r\n      }\r\n\r\n      return true\r\n    }\r\n\r\n    var hitPoint = this.getHitPoint(event)\r\n\r\n    if (hitPoint) {\r\n\r\n      this._hitPoint = hitPoint\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  handleButtonUp (event, button) {\r\n\r\n    if (this.rotateControl) {\r\n\r\n      this.rotateControl.onPointerUp(event)\r\n    }\r\n\r\n    if (button === 0) {\r\n\r\n      this.isDragging = false\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  handleMouseMove (event) {\r\n\r\n    if (this.rotateControl) {\r\n\r\n      this.rotateControl.onPointerHover(event)\r\n    }\r\n\r\n    if (this.isDragging) {\r\n\r\n      if (this.selection) {\r\n\r\n        var offset = {\r\n          x: this.mousePos.x - event.clientX,\r\n          y: event.clientY - this.mousePos.y\r\n        }\r\n\r\n        this.mousePos = {\r\n          x: event.clientX,\r\n          y: event.clientY\r\n        }\r\n\r\n        var angle = Math.sqrt(\r\n          offset.x * offset.x +\r\n          offset.y * offset.y)\r\n\r\n        var sidewaysDirection = new THREE.Vector3()\r\n        var moveDirection = new THREE.Vector3()\r\n        var eyeDirection = new THREE.Vector3()\r\n        var upDirection = new THREE.Vector3()\r\n        var camera = this.viewer.getCamera()\r\n        var axis = new THREE.Vector3()\r\n        var eye = new THREE.Vector3()\r\n\r\n        eye.copy(camera.position).sub(camera.target)\r\n\r\n        eyeDirection.copy(eye).normalize()\r\n\r\n        upDirection.copy(camera.up).normalize()\r\n\r\n        sidewaysDirection.crossVectors(\r\n          upDirection, eyeDirection).normalize()\r\n\r\n        upDirection.setLength(offset.y)\r\n\r\n        sidewaysDirection.setLength(offset.x)\r\n\r\n        moveDirection.copy(\r\n          upDirection.add(\r\n            sidewaysDirection))\r\n\r\n        axis.crossVectors(moveDirection, eye).normalize()\r\n\r\n        this.rotateFragments(\r\n          this.selection.model,\r\n          this.selection.fragIdsArray,\r\n          axis, angle * Math.PI / 180,\r\n          this.center)\r\n\r\n        this.viewer.impl.sceneUpdated(true)\r\n      }\r\n\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  handleKeyDown (event, keyCode) {\r\n\r\n    this.keys[event.key] = true\r\n\r\n    if (keyCode === 27) { //ESC\r\n\r\n      this.viewer.clearSelection()\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  handleKeyUp (event, keyCode) {\r\n\r\n    this.keys[event.key] = false\r\n\r\n    return false\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  rotateFragments (model, fragIdsArray, axis, angle, center) {\r\n\r\n    var quaternion = new THREE.Quaternion()\r\n\r\n    quaternion.setFromAxisAngle(axis, angle)\r\n\r\n    fragIdsArray.forEach((fragId, idx) => {\r\n\r\n      var fragProxy = this.viewer.impl.getFragmentProxy(\r\n        model, fragId)\r\n\r\n      fragProxy.getAnimTransform()\r\n\r\n      var position = new THREE.Vector3(\r\n        fragProxy.position.x - center.x,\r\n        fragProxy.position.y - center.y,\r\n        fragProxy.position.z - center.z)\r\n\r\n      position.applyQuaternion(quaternion)\r\n\r\n      position.add(center)\r\n\r\n      fragProxy.position = position\r\n\r\n      fragProxy.quaternion.multiplyQuaternions(\r\n        quaternion, fragProxy.quaternion)\r\n\r\n      if (idx === 0) {\r\n\r\n        if(this._hitPoint) {\r\n\r\n          this._hitPoint.sub(center)\r\n\r\n          this._hitPoint.applyQuaternion(quaternion)\r\n\r\n          this._hitPoint.add(center)\r\n        }\r\n\r\n        var euler = new THREE.Euler()\r\n\r\n        euler.setFromQuaternion(\r\n          fragProxy.quaternion, 0)\r\n\r\n        this.emit('transform.rotate', {\r\n          rotation: euler,\r\n          model\r\n        })\r\n      }\r\n\r\n      fragProxy.updateAnimTransform()\r\n    })\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  // returns bounding box as it appears in the viewer\r\n  // (transformations could be applied)\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  geWorldBoundingBox (fragIds, fragList) {\r\n\r\n    var fragbBox = new THREE.Box3()\r\n    var nodebBox = new THREE.Box3()\r\n\r\n    fragIds.forEach((fragId) => {\r\n\r\n      fragList.getWorldBounds(fragId, fragbBox)\r\n      nodebBox.union(fragbBox)\r\n    })\r\n\r\n    return nodebBox\r\n  }\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n//\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nclass RotateControl extends EventsEmitter {\r\n\r\n  constructor (viewer, center, size) {\r\n\r\n    super()\r\n\r\n    this.engaged = false\r\n\r\n    this.overlayScene = 'rotateControlScene'\r\n    this.domElement = viewer.impl.canvas\r\n    this.camera = viewer.impl.camera\r\n    this.viewer = viewer\r\n    this.center = center\r\n    this.size = size\r\n    this.gizmos = []\r\n\r\n    this.viewer.impl.createOverlayScene(\r\n      this.overlayScene)\r\n\r\n    this.createAxis(\r\n      center, new THREE.Vector3(1, 0, 0),\r\n      size * 0.85, 0xFF0000)\r\n\r\n    this.createAxis(\r\n      center, new THREE.Vector3(0, 1, 0),\r\n      size * 0.85, 0x00FF00)\r\n\r\n    this.createAxis(\r\n      center, new THREE.Vector3(0, 0, 1),\r\n      size * 0.85, 0x0000FF)\r\n\r\n    // World UP = Y\r\n\r\n    if (this.camera.worldup.y) {\r\n\r\n      this.gizmos.push(this.createGizmo(\r\n        center,\r\n        new THREE.Euler(0, Math.PI / 2, 0),\r\n        size * 0.0045,\r\n        size * 0.4, 0xFF0000,\r\n        Math.PI,\r\n        new THREE.Vector3(1, 0, 0)))\r\n\r\n      this.gizmos.push(this.createGizmo(\r\n        center,\r\n        new THREE.Euler(Math.PI / 2, 0, 0),\r\n        size * 0.0045,\r\n        size * 0.4, 0x00FF00,\r\n        2 * Math.PI,\r\n        new THREE.Vector3(0, 1, 0)))\r\n\r\n      this.gizmos.push(this.createGizmo(\r\n        center,\r\n        new THREE.Euler(0, 0, 0),\r\n        size * 0.0045,\r\n        size * 0.4, 0x0000FF,\r\n        Math.PI,\r\n        new THREE.Vector3(0, 0, 1)))\r\n\r\n    } else {\r\n\r\n      // World UP = Z\r\n\r\n      this.gizmos.push(this.createGizmo(\r\n        center,\r\n        new THREE.Euler(Math.PI / 2, Math.PI / 2, 0),\r\n        size * 0.0045,\r\n        size * 0.4, 0xFF0000,\r\n        Math.PI,\r\n        new THREE.Vector3(1, 0, 0)))\r\n\r\n      this.gizmos.push(this.createGizmo(\r\n        center,\r\n        new THREE.Euler(Math.PI / 2, 0, 0),\r\n        size * 0.0045,\r\n        size * 0.4, 0x00FF00,\r\n        Math.PI,\r\n        new THREE.Vector3(0, 1, 0)))\r\n\r\n      this.gizmos.push(this.createGizmo(\r\n        center,\r\n        new THREE.Euler(0, 0, 0),\r\n        size * 0.0045,\r\n        size * 0.4, 0x0000FF,\r\n        2 * Math.PI,\r\n        new THREE.Vector3(0, 0, 1)))\r\n    }\r\n\r\n    this.picker = this.createSphere(\r\n      size * 0.02)\r\n\r\n    var material = new THREE.LineBasicMaterial({\r\n      color: 0xFFFF00,\r\n      linewidth: 1,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n      transparent: true\r\n    })\r\n\r\n    this.angleLine =\r\n      this.createLine(\r\n        this.center,\r\n        this.center,\r\n        material)\r\n\r\n    viewer.impl.sceneUpdated(true)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  createLine (start, end, material) {\r\n\r\n    var geometry = new THREE.Geometry()\r\n\r\n    geometry.vertices.push(new THREE.Vector3(\r\n      start.x, start.y, start.z))\r\n\r\n    geometry.vertices.push(new THREE.Vector3(\r\n      end.x, end.y, end.z))\r\n\r\n    var line = new THREE.Line(geometry, material)\r\n\r\n    this.viewer.impl.addOverlay(\r\n      this.overlayScene, line)\r\n\r\n    return line\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  createCone (start, dir, length, material) {\r\n\r\n    dir.normalize()\r\n\r\n    var end = {\r\n      x: start.x + dir.x * length,\r\n      y: start.y + dir.y * length,\r\n      z: start.z + dir.z * length\r\n    }\r\n\r\n    var orientation = new THREE.Matrix4()\r\n\r\n    orientation.lookAt(\r\n      start,\r\n      end,\r\n      new THREE.Object3D().up)\r\n\r\n    var matrix = new THREE.Matrix4()\r\n\r\n    matrix.set(\r\n      1, 0, 0, 0,\r\n      0, 0, 1, 0,\r\n      0, -1, 0, 0,\r\n      0, 0, 0, 1)\r\n\r\n    orientation.multiply(matrix)\r\n\r\n    var geometry = new THREE.CylinderGeometry(\r\n      0, length * 0.2, length, 128, 1)\r\n\r\n    var cone = new THREE.Mesh(geometry, material)\r\n\r\n    cone.applyMatrix(orientation)\r\n\r\n    cone.position.x = start.x + dir.x * length / 2\r\n    cone.position.y = start.y + dir.y * length / 2\r\n    cone.position.z = start.z + dir.z * length / 2\r\n\r\n    this.viewer.impl.addOverlay(\r\n      this.overlayScene, cone)\r\n\r\n    return cone\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  createAxis (start, dir, size, color) {\r\n\r\n    var end = {\r\n      x: start.x + dir.x * size,\r\n      y: start.y + dir.y * size,\r\n      z: start.z + dir.z * size\r\n    }\r\n\r\n    var material = new THREE.LineBasicMaterial({\r\n      color: color,\r\n      linewidth: 2,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n      transparent: true\r\n    })\r\n\r\n    this.createLine(\r\n      start, end, material)\r\n\r\n    this.createCone(\r\n      end, dir, size * 0.1, material)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  createGizmo (center, euler, size, radius, color, range, axis) {\r\n\r\n    var material = new GizmoMaterial({\r\n      color: color\r\n    })\r\n\r\n    var subMaterial = new GizmoMaterial({\r\n      color: color\r\n    })\r\n\r\n    var torusGizmo = new THREE.Mesh(\r\n      new THREE.TorusGeometry(\r\n        radius, size, 64, 64, range),\r\n      material)\r\n\r\n    var subTorus = new THREE.Mesh(\r\n      new THREE.TorusGeometry(\r\n        radius, size, 64, 64, 2 * Math.PI),\r\n      subMaterial)\r\n\r\n    subTorus.material.highlight(true)\r\n\r\n    var transform = new THREE.Matrix4()\r\n\r\n    var q = new THREE.Quaternion()\r\n\r\n    q.setFromEuler(euler)\r\n\r\n    var s = new THREE.Vector3(1, 1, 1)\r\n\r\n    transform.compose(center, q, s)\r\n\r\n    torusGizmo.applyMatrix(transform)\r\n\r\n    subTorus.applyMatrix(transform)\r\n\r\n    var plane = this.createBox(\r\n      this.size * 100,\r\n      this.size * 100,\r\n      0.01)\r\n\r\n    plane.applyMatrix(transform)\r\n\r\n    subTorus.visible = false\r\n\r\n    this.viewer.impl.addOverlay(\r\n      this.overlayScene, torusGizmo)\r\n\r\n    this.viewer.impl.addOverlay(\r\n      this.overlayScene, subTorus)\r\n\r\n    torusGizmo.subGizmo = subTorus\r\n    torusGizmo.plane = plane\r\n    torusGizmo.axis = axis\r\n\r\n    return torusGizmo\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  createBox (w, h, d) {\r\n\r\n    var material = new GizmoMaterial({\r\n      color: 0x000000\r\n    })\r\n\r\n    var geometry = new THREE.BoxGeometry(w, h, d)\r\n\r\n    var box = new THREE.Mesh(\r\n      geometry, material)\r\n\r\n    box.visible = false\r\n\r\n    this.viewer.impl.addOverlay(\r\n      this.overlayScene, box)\r\n\r\n    return box\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  createSphere (radius) {\r\n\r\n    var material = new GizmoMaterial({\r\n      color: 0xFFFF00\r\n    })\r\n\r\n    var geometry = new THREE.SphereGeometry(\r\n      radius, 32, 32)\r\n\r\n    var sphere = new THREE.Mesh(\r\n      geometry, material)\r\n\r\n    sphere.visible = false\r\n\r\n    this.viewer.impl.addOverlay(\r\n      this.overlayScene, sphere)\r\n\r\n    return sphere\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  pointerToRaycaster (pointer) {\r\n\r\n    var pointerVector = new THREE.Vector3()\r\n    var pointerDir = new THREE.Vector3()\r\n    var ray = new THREE.Raycaster()\r\n\r\n    var rect = this.domElement.getBoundingClientRect()\r\n\r\n    var x = ((pointer.clientX - rect.left) / rect.width) * 2 - 1\r\n    var y = -((pointer.clientY - rect.top) / rect.height) * 2 + 1\r\n\r\n    if (this.camera.isPerspective) {\r\n\r\n      pointerVector.set(x, y, 0.5)\r\n\r\n      pointerVector.unproject(this.camera)\r\n\r\n      ray.set(this.camera.position,\r\n        pointerVector.sub(\r\n          this.camera.position).normalize())\r\n\r\n    } else {\r\n\r\n      pointerVector.set(x, y, -1)\r\n\r\n      pointerVector.unproject(this.camera)\r\n\r\n      pointerDir.set(0, 0, -1)\r\n\r\n      ray.set(pointerVector,\r\n        pointerDir.transformDirection(\r\n          this.camera.matrixWorld))\r\n    }\r\n\r\n    return ray\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  onPointerDown (event) {\r\n\r\n    var pointer = event.pointers ? event.pointers[ 0 ] : event\r\n\r\n    if (pointer.button === 0) {\r\n\r\n      var ray = this.pointerToRaycaster(pointer)\r\n\r\n      var intersectResults = ray.intersectObjects(\r\n        this.gizmos, true)\r\n\r\n      if (intersectResults.length) {\r\n\r\n        this.gizmos.forEach((gizmo) => {\r\n\r\n          gizmo.visible = false\r\n        })\r\n\r\n        this.selectedGizmo = intersectResults[0].object\r\n\r\n        this.selectedGizmo.subGizmo.visible = true\r\n\r\n        this.picker.position.copy(\r\n          intersectResults[0].point)\r\n\r\n        this.angleLine.geometry.vertices[1].copy(\r\n          intersectResults[0].point)\r\n\r\n        this.lastDir = intersectResults[0].point.sub(\r\n          this.center).normalize()\r\n\r\n        this.angleLine.geometry.verticesNeedUpdate = true\r\n\r\n        this.angleLine.visible = true\r\n\r\n        this.picker.visible = true\r\n\r\n      } else {\r\n\r\n        this.picker.visible = false\r\n      }\r\n\r\n      this.engaged = this.picker.visible\r\n\r\n      this.viewer.impl.sceneUpdated(true)\r\n    }\r\n\r\n    return this.picker.visible\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  onPointerHover (event) {\r\n\r\n    var pointer = event.pointers ? event.pointers[ 0 ] : event\r\n\r\n    if (this.engaged) {\r\n\r\n      var ray = this.pointerToRaycaster(pointer)\r\n\r\n      var intersectResults = ray.intersectObjects(\r\n        [this.selectedGizmo.plane], true)\r\n\r\n      if (intersectResults.length) {\r\n\r\n        var intersectPoint = intersectResults[0].point\r\n\r\n        var dir = intersectPoint.sub(\r\n          this.center).normalize()\r\n\r\n        var cross = new THREE.Vector3()\r\n\r\n        cross.crossVectors(this.lastDir, dir)\r\n\r\n        var sign = Math.sign(\r\n          cross.dot(this.selectedGizmo.axis))\r\n\r\n        this.emit('transform.rotate', {\r\n          angle: sign * dir.angleTo(this.lastDir),\r\n          axis: this.selectedGizmo.axis\r\n        })\r\n\r\n        this.lastDir = dir\r\n\r\n        var pickerPoint = new THREE.Vector3(\r\n          this.center.x + dir.x * this.size * 0.8,\r\n          this.center.y + dir.y * this.size * 0.8,\r\n          this.center.z + dir.z * this.size * 0.8)\r\n\r\n        this.picker.position.copy(\r\n          pickerPoint)\r\n\r\n        this.angleLine.geometry.vertices[1].copy(\r\n          pickerPoint)\r\n      }\r\n\r\n      this.angleLine.visible = true\r\n\r\n      this.angleLine.geometry.verticesNeedUpdate = true\r\n\r\n    } else {\r\n\r\n      this.angleLine.visible = false\r\n\r\n      var ray = this.pointerToRaycaster(pointer)\r\n\r\n      var intersectResults = ray.intersectObjects(\r\n        this.gizmos, true)\r\n\r\n      if (intersectResults.length) {\r\n\r\n        this.picker.position.set(\r\n          intersectResults[ 0 ].point.x,\r\n          intersectResults[ 0 ].point.y,\r\n          intersectResults[ 0 ].point.z)\r\n\r\n        this.picker.visible = true\r\n\r\n      } else {\r\n\r\n        this.picker.visible = false\r\n      }\r\n    }\r\n\r\n    this.viewer.impl.sceneUpdated(true)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  onPointerUp (event) {\r\n\r\n    this.angleLine.visible = false\r\n\r\n    this.picker.visible = false\r\n\r\n    this.gizmos.forEach((gizmo) => {\r\n\r\n      gizmo.visible = true\r\n      gizmo.subGizmo.visible = false\r\n    })\r\n\r\n    this.viewer.impl.sceneUpdated(true)\r\n\r\n    setTimeout(() => {\r\n      this.engaged = false\r\n    }, 100)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  normalize(screenPoint) {\r\n\r\n    var viewport = this.viewer.navigation.getScreenViewport()\r\n\r\n    var n = {\r\n      x: (screenPoint.x - viewport.left) / viewport.width,\r\n      y: (screenPoint.y - viewport.top) / viewport.height\r\n    }\r\n\r\n    return n\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  projectOntoPlane (worldPoint, normal) {\r\n\r\n    var dist = normal.dot(worldPoint)\r\n\r\n    return new THREE.Vector3(\r\n      worldPoint.x - dist * normal.x,\r\n      worldPoint.y - dist * normal.y,\r\n      worldPoint.z - dist * normal.z)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  remove () {\r\n\r\n    this.viewer.impl.removeOverlayScene(\r\n      this.overlayScene)\r\n  }\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n//\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nclass GizmoMaterial extends THREE.MeshBasicMaterial {\r\n\r\n  constructor (parameters) {\r\n\r\n    super()\r\n\r\n    this.setValues(parameters)\r\n\r\n    this.colorInit = this.color.clone()\r\n    this.opacityInit = this.opacity\r\n    this.side = THREE.FrontSide\r\n    this.depthWrite = false\r\n    this.transparent = true\r\n    this.depthTest = false\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////////////\r\n  highlight (highlighted) {\r\n\r\n    if (highlighted) {\r\n\r\n      this.color.setRGB(1, 230 / 255, 3 / 255)\r\n      this.opacity = 1\r\n\r\n    } else {\r\n\r\n      this.color.copy(this.colorInit)\r\n      this.opacity = this.opacityInit\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}