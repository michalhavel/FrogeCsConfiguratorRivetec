{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/* eslint-disable */\n/// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\nvar Autodesk = window.Autodesk;\nvar THREE = window.THREE;\n\nvar ViewerToolkit =\n/*#__PURE__*/\nfunction () {\n  function ViewerToolkit() {\n    _classCallCheck(this, ViewerToolkit);\n  }\n\n  _createClass(ViewerToolkit, null, [{\n    key: \"guid\",\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n    value: function guid() {\n      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'xxxxxxxxxxxx';\n      var d = new Date().getTime();\n      var guid = format.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n      });\n      return guid;\n    } /////////////////////////////////////////////\n    //mobile detection\n    //\n    /////////////////////////////////////////////\n\n  }, {\n    key: \"getDefaultViewablePath\",\n    //////////////////////////////////////////////////////////////////////////\n    // Return default viewable path: first 3d or 2d item\n    //\n    //////////////////////////////////////////////////////////////////////////\n    value: function getDefaultViewablePath(doc) {\n      var roles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['3d', '2d'];\n      var rootItem = doc.getRootItem();\n\n      var roleArray = _toConsumableArray(roles);\n\n      var items = [];\n      roleArray.forEach(function (role) {\n        items = _toConsumableArray(items).concat(_toConsumableArray(Autodesk.Viewing.Document.getSubItemsWithProperties(rootItem, {\n          type: 'geometry',\n          role: role\n        }, true)));\n      });\n      return items.length ? doc.getViewablePath(items[0]) : null;\n    } /////////////////////////////////////////////////////////////////\n    // Toolbar button\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"createButton\",\n    value: function createButton(id, className, tooltip, handler) {\n      var button = new Autodesk.Viewing.UI.Button(id);\n      button.icon.style.fontSize = '24px';\n      button.icon.className = className;\n      button.setToolTip(tooltip);\n      button.onClick = handler;\n      return button;\n    } /////////////////////////////////////////////////////////////////\n    // Control group\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"createControlGroup\",\n    value: function createControlGroup(viewer, ctrlGroupName) {\n      var viewerToolbar = viewer.getToolbar(true);\n\n      if (viewerToolbar) {\n        var ctrlGroup = new Autodesk.Viewing.UI.ControlGroup(ctrlGroupName);\n        viewerToolbar.addControl(ctrlGroup);\n        return ctrlGroup;\n      }\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getLeafNodes\",\n    value: function getLeafNodes(model, dbIds) {\n      return new Promise(function (resolve, reject) {\n        try {\n          var instanceTree = model.getData().instanceTree;\n          dbIds = dbIds || instanceTree.getRootId();\n          var dbIdArray = Array.isArray(dbIds) ? dbIds : [dbIds];\n          var leafIds = [];\n\n          var getLeafNodesRec = function getLeafNodesRec(id) {\n            var childCount = 0;\n            instanceTree.enumNodeChildren(id, function (childId) {\n              getLeafNodesRec(childId);\n              ++childCount;\n            });\n\n            if (childCount == 0) {\n              leafIds.push(id);\n            }\n          };\n\n          for (var i = 0; i < dbIdArray.length; ++i) {\n            getLeafNodesRec(dbIdArray[i]);\n          }\n\n          return resolve(leafIds);\n        } catch (ex) {\n          return reject(ex);\n        }\n      });\n    } /////////////////////////////////////////////////////////////////\n    // get node fragIds\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getFragIds\",\n    value: function getFragIds(model, dbIds) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          var i, _ret;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  return _context2.delegateYield(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee() {\n                    var dbIdArray, instanceTree, leafIds, fragIds;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            dbIdArray = Array.isArray(dbIds) ? dbIds : [dbIds];\n                            instanceTree = model.getData().instanceTree;\n                            _context.next = 4;\n                            return ViewerToolkit.getLeafNodes(model, dbIdArray);\n\n                          case 4:\n                            leafIds = _context.sent;\n                            fragIds = [];\n\n                            for (i = 0; i < leafIds.length; ++i) {\n                              instanceTree.enumNodeFragments(leafIds[i], function (fragId) {\n                                fragIds.push(fragId);\n                              });\n                            }\n\n                            return _context.abrupt(\"return\", {\n                              v: resolve(fragIds)\n                            });\n\n                          case 8:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  })(), \"t0\", 2);\n\n                case 2:\n                  _ret = _context2.t0;\n\n                  if (!(typeof _ret === \"object\")) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\", _ret.v);\n\n                case 5:\n                  _context2.next = 10;\n                  break;\n\n                case 7:\n                  _context2.prev = 7;\n                  _context2.t1 = _context2[\"catch\"](0);\n                  return _context2.abrupt(\"return\", reject(_context2.t1));\n\n                case 10:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this, [[0, 7]]);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } /////////////////////////////////////////////////////////////////\n    // Node bounding box\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getWorldBoundingBox\",\n    value: function getWorldBoundingBox(model, dbId) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3(resolve, reject) {\n          var fragIds, fragList, fragbBox, nodebBox;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  _context3.next = 3;\n                  return ViewerToolkit.getFragIds(model, dbId);\n\n                case 3:\n                  fragIds = _context3.sent;\n\n                  if (fragIds.length) {\n                    _context3.next = 6;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\", reject('No geometry, invalid dbId?'));\n\n                case 6:\n                  fragList = model.getFragmentList();\n                  fragbBox = new THREE.Box3();\n                  nodebBox = new THREE.Box3();\n                  fragIds.forEach(function (fragId) {\n                    fragList.getWorldBounds(fragId, fragbBox);\n                    nodebBox.union(fragbBox);\n                  });\n                  return _context3.abrupt(\"return\", resolve(nodebBox));\n\n                case 13:\n                  _context3.prev = 13;\n                  _context3.t0 = _context3[\"catch\"](0);\n                  return _context3.abrupt(\"return\", reject(_context3.t0));\n\n                case 16:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this, [[0, 13]]);\n        }));\n\n        return function (_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    } /////////////////////////////////////////////////////////////////\n    // Gets properties from component\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getProperties\",\n    value: function getProperties(model, dbId) {\n      var requestedProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return new Promise(function (resolve, reject) {\n        try {\n          if (requestedProps) {\n            var propTasks = requestedProps.map(function (displayName) {\n              return ViewerToolkit.getProperty(model, dbId, displayName, 'Not Available');\n            });\n            Promise.all(propTasks).then(function (properties) {\n              resolve(properties);\n            });\n          } else {\n            model.getProperties(dbId, function (result) {\n              if (result.properties) {\n                return resolve(result.properties);\n              }\n\n              return reject('No Properties');\n            });\n          }\n        } catch (ex) {\n          console.log(ex);\n          return reject(ex);\n        }\n      });\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(model, dbId, displayName, defaultValue) {\n      return new Promise(function (resolve, reject) {\n        try {\n          model.getProperties(dbId, function (result) {\n            if (result.properties) {\n              result.properties.forEach(function (prop) {\n                prop.dbId = dbId;\n\n                if (typeof displayName === 'function') {\n                  if (displayName(prop.displayName)) {\n                    resolve(prop);\n                  }\n                } else if (displayName === prop.displayName) {\n                  resolve(prop);\n                }\n              });\n\n              if (defaultValue) {\n                return resolve({\n                  displayValue: defaultValue,\n                  displayName: displayName,\n                  dbId: dbId\n                });\n              }\n\n              reject(new Error('Not Found'));\n            } else {\n              reject(new Error('Error getting properties'));\n            }\n          });\n        } catch (ex) {\n          return reject(ex);\n        }\n      });\n    } /////////////////////////////////////////////////////////////////\n    // Gets all existing properties from component  dbIds\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getPropertyList\",\n    value: function getPropertyList(model, dbIds) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee4(resolve, reject) {\n          var propertyTasks, propertyResults, properties;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.prev = 0;\n                  propertyTasks = dbIds.map(function (dbId) {\n                    return ViewerToolkit.getProperties(model, dbId);\n                  });\n                  _context4.next = 4;\n                  return Promise.all(propertyTasks);\n\n                case 4:\n                  propertyResults = _context4.sent;\n                  properties = [];\n                  propertyResults.forEach(function (propertyResult) {\n                    propertyResult.forEach(function (prop) {\n                      if (properties.indexOf(prop.displayName) < 0) {\n                        properties.push(prop.displayName);\n                      }\n                    });\n                  });\n                  return _context4.abrupt(\"return\", resolve(properties.sort()));\n\n                case 10:\n                  _context4.prev = 10;\n                  _context4.t0 = _context4[\"catch\"](0);\n                  return _context4.abrupt(\"return\", reject(_context4.t0));\n\n                case 13:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this, [[0, 10]]);\n        }));\n\n        return function (_x5, _x6) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"getBulkPropertiesAsync\",\n    value: function getBulkPropertiesAsync(model, dbIds, propFilter) {\n      var _this = this;\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee5(resolve, reject) {\n          var propTasks, propRes, filteredRes;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (!(typeof propFilter === 'function')) {\n                    _context5.next = 9;\n                    break;\n                  }\n\n                  propTasks = dbIds.map(function (dbId) {\n                    return _this.getProperty(model, dbId, propFilter, 'Not Found');\n                  });\n                  _context5.next = 4;\n                  return Promise.all(propTasks);\n\n                case 4:\n                  propRes = _context5.sent;\n                  filteredRes = propRes.filter(function (res) {\n                    return res.displayValue !== 'Not Found';\n                  });\n                  resolve(filteredRes.map(function (res) {\n                    return {\n                      properties: [res],\n                      dbId: res.dbId\n                    };\n                  }));\n                  _context5.next = 10;\n                  break;\n\n                case 9:\n                  model.getBulkProperties(dbIds, propFilter, function (result) {\n                    resolve(result);\n                  }, function (error) {\n                    reject(error);\n                  });\n\n                case 10:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n\n        return function (_x7, _x8) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    } /////////////////////////////////////////////////////////////////\n    // Maps components by property\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"mapComponentsByProp\",\n    value: function mapComponentsByProp(model, propFilter, components, defaultProp) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref5 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee6(resolve, reject) {\n          var results, propertyResults, componentsMap;\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.prev = 0;\n                  _context6.next = 3;\n                  return ViewerToolkit.getBulkPropertiesAsync(model, components, propFilter);\n\n                case 3:\n                  results = _context6.sent;\n                  propertyResults = results.map(function (result) {\n                    return Object.assign({}, result.properties[0], {\n                      dbId: result.dbId\n                    });\n                  });\n                  componentsMap = {};\n                  propertyResults.forEach(function (result) {\n                    var value = result.displayValue;\n\n                    if (typeof value == 'string') {\n                      value = value.split(':')[0];\n                    }\n\n                    if (!componentsMap[value]) {\n                      componentsMap[value] = [];\n                    }\n\n                    componentsMap[value].push(result.dbId);\n                  });\n                  return _context6.abrupt(\"return\", resolve(componentsMap));\n\n                case 10:\n                  _context6.prev = 10;\n                  _context6.t0 = _context6[\"catch\"](0);\n                  return _context6.abrupt(\"return\", reject(_context6.t0));\n\n                case 13:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, this, [[0, 10]]);\n        }));\n\n        return function (_x9, _x10) {\n          return _ref5.apply(this, arguments);\n        };\n      }());\n    } /////////////////////////////////////////////////////////////\n    // Runs recursively the argument task on each node\n    // of the data tree\n    //\n    /////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"runTaskOnDataTree\",\n    value: function runTaskOnDataTree(root, taskFunc) {\n      var tasks = [];\n\n      var runTaskOnDataTreeRec = function runTaskOnDataTreeRec(node) {\n        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        if (node.children) {\n          node.children.forEach(function (childNode) {\n            runTaskOnDataTreeRec(childNode, node);\n          });\n        }\n\n        var task = taskFunc(node, parent);\n        tasks.push(task);\n      };\n\n      runTaskOnDataTreeRec(root);\n      return Promise.all(tasks);\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"drawBox\",\n    value: function drawBox(viewer, min, max) {\n      var material = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var _material = material;\n\n      if (!_material) {\n        _material = new THREE.LineBasicMaterial({\n          color: 0xffff00,\n          linewidth: 2\n        });\n        viewer.impl.matman().addMaterial('ADN-Material-Line', _material, true);\n      }\n\n      function drawLines(coordsArray, mat) {\n        var lines = [];\n\n        for (var i = 0; i < coordsArray.length; i += 2) {\n          var start = coordsArray[i];\n          var end = coordsArray[i + 1];\n          var geometry = new THREE.Geometry();\n          geometry.vertices.push(new THREE.Vector3(start.x, start.y, start.z));\n          geometry.vertices.push(new THREE.Vector3(end.x, end.y, end.z));\n          geometry.computeLineDistances();\n          var line = new THREE.Line(geometry, mat);\n          viewer.impl.scene.add(line);\n          lines.push(line);\n        }\n\n        return lines;\n      }\n\n      var lines = drawLines([{\n        x: min.x,\n        y: min.y,\n        z: min.z\n      }, {\n        x: max.x,\n        y: min.y,\n        z: min.z\n      }, {\n        x: max.x,\n        y: min.y,\n        z: min.z\n      }, {\n        x: max.x,\n        y: min.y,\n        z: max.z\n      }, {\n        x: max.x,\n        y: min.y,\n        z: max.z\n      }, {\n        x: min.x,\n        y: min.y,\n        z: max.z\n      }, {\n        x: min.x,\n        y: min.y,\n        z: max.z\n      }, {\n        x: min.x,\n        y: min.y,\n        z: min.z\n      }, {\n        x: min.x,\n        y: max.y,\n        z: max.z\n      }, {\n        x: max.x,\n        y: max.y,\n        z: max.z\n      }, {\n        x: max.x,\n        y: max.y,\n        z: max.z\n      }, {\n        x: max.x,\n        y: max.y,\n        z: min.z\n      }, {\n        x: max.x,\n        y: max.y,\n        z: min.z\n      }, {\n        x: min.x,\n        y: max.y,\n        z: min.z\n      }, {\n        x: min.x,\n        y: max.y,\n        z: min.z\n      }, {\n        x: min.x,\n        y: max.y,\n        z: max.z\n      }, {\n        x: min.x,\n        y: min.y,\n        z: min.z\n      }, {\n        x: min.x,\n        y: max.y,\n        z: min.z\n      }, {\n        x: max.x,\n        y: min.y,\n        z: min.z\n      }, {\n        x: max.x,\n        y: max.y,\n        z: min.z\n      }, {\n        x: max.x,\n        y: min.y,\n        z: max.z\n      }, {\n        x: max.x,\n        y: max.y,\n        z: max.z\n      }, {\n        x: min.x,\n        y: min.y,\n        z: max.z\n      }, {\n        x: min.x,\n        y: max.y,\n        z: max.z\n      }], _material);\n      viewer.impl.sceneUpdated(true);\n      return lines;\n    } /////////////////////////////////////////////////////////////////\n    // Set component material\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"setMaterial\",\n    value: function () {\n      var _setMaterial = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(model, dbId, material) {\n        var fragIds, fragList;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return ViewerToolkit.getFragIds(model, dbId);\n\n              case 2:\n                fragIds = _context7.sent;\n                fragList = model.getFragmentList();\n                fragIds.forEach(function (fragId) {\n                  fragList.setMaterial(fragId, material);\n                });\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function setMaterial(_x11, _x12, _x13) {\n        return _setMaterial.apply(this, arguments);\n      }\n\n      return setMaterial;\n    }() /////////////////////////////////////////////////////////////////\n    // Recursively builds the model tree\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"buildModelTree\",\n    value: function buildModelTree(model) {\n      var createNodeFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      //builds model tree recursively\n      function _buildModelTreeRec(node) {\n        instanceTree.enumNodeChildren(node.dbId, function (childId) {\n          var childNode = null;\n\n          if (createNodeFunc) {\n            childNode = createNodeFunc(childId);\n          } else {\n            node.children = node.children || [];\n            childNode = {\n              dbId: childId,\n              name: instanceTree.getNodeName(childId)\n            };\n            node.children.push(childNode);\n          }\n\n          _buildModelTreeRec(childNode);\n        });\n      } //get model instance tree and root component\n\n\n      var instanceTree = model.getData().instanceTree;\n      var rootId = instanceTree.getRootId();\n      var rootNode = {\n        dbId: rootId,\n        name: instanceTree.getNodeName(rootId)\n      };\n\n      _buildModelTreeRec(rootNode);\n\n      return rootNode;\n    } /////////////////////////////////////////////////////////////////\n    // Recursively execute task on model tree\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"executeTaskOnModelTree\",\n    value: function executeTaskOnModelTree(model, task) {\n      var taskResults = [];\n\n      function _executeTaskOnModelTreeRec(dbId) {\n        instanceTree.enumNodeChildren(dbId, function (childId) {\n          taskResults.push(task(model, childId));\n\n          _executeTaskOnModelTreeRec(childId);\n        });\n      } //get model instance tree and root component\n\n\n      var instanceTree = model.getData().instanceTree;\n      var rootId = instanceTree.getRootId();\n\n      _executeTaskOnModelTreeRec(rootId);\n\n      return taskResults;\n    } /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"isolateFull\",\n    value: function isolateFull(viewer) {\n      var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var dbIds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref6 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee8(resolve, reject) {\n          var targetIds, targetLeafIds, leafIds, leafTasks;\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.prev = 0;\n                  model = model || viewer.model;\n                  viewer.isolate(dbIds);\n                  targetIds = Array.isArray(dbIds) ? dbIds : [dbIds];\n                  _context8.next = 6;\n                  return ViewerToolkit.getLeafNodes(model, targetIds);\n\n                case 6:\n                  targetLeafIds = _context8.sent;\n                  _context8.next = 9;\n                  return ViewerToolkit.getLeafNodes(model);\n\n                case 9:\n                  leafIds = _context8.sent;\n                  leafTasks = leafIds.map(function (dbId) {\n                    return new Promise(function (resolveLeaf) {\n                      var show = !targetLeafIds.length || targetLeafIds.indexOf(dbId) > -1;\n                      viewer.impl.visibilityManager.setNodeOff(dbId, !show);\n                      resolveLeaf();\n                    });\n                  });\n                  return _context8.abrupt(\"return\", Promise.all(leafTasks));\n\n                case 14:\n                  _context8.prev = 14;\n                  _context8.t0 = _context8[\"catch\"](0);\n                  return _context8.abrupt(\"return\", reject(_context8.t0));\n\n                case 17:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8, this, [[0, 14]]);\n        }));\n\n        return function (_x14, _x15) {\n          return _ref6.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"mobile\",\n    get: function get() {\n      return {\n        getUserAgent: function getUserAgent() {\n          return navigator.userAgent;\n        },\n        isAndroid: function isAndroid() {\n          return this.getUserAgent().match(/Android/i);\n        },\n        isBlackBerry: function isBlackBerry() {\n          return this.getUserAgent().match(/BlackBerry/i);\n        },\n        isIOS: function isIOS() {\n          return this.getUserAgent().match(/iPhone|iPad|iPod/i);\n        },\n        isOpera: function isOpera() {\n          return this.getUserAgent().match(/Opera Mini/i);\n        },\n        isWindows: function isWindows() {\n          return this.isWindowsDesktop() || this.isWindowsMobile();\n        },\n        isWindowsMobile: function isWindowsMobile() {\n          return this.getUserAgent().match(/IEMobile/i);\n        },\n        isWindowsDesktop: function isWindowsDesktop() {\n          return this.getUserAgent().match(/WPDesktop/i);\n        },\n        isAny: function isAny() {\n          return this.isAndroid() || this.isBlackBerry() || this.isIOS() || this.isWindowsMobile();\n        }\n      };\n    }\n  }]);\n\n  return ViewerToolkit;\n}();\n\nexport { ViewerToolkit as default };","map":{"version":3,"sources":["E:\\GitHub\\FrogeCsConfiguratorRivetec\\Vyvoj\\src\\js\\extensions\\components\\Viewer.Toolkit\\Viewer.Toolkit.js"],"names":["Autodesk","window","THREE","ViewerToolkit","format","d","Date","getTime","guid","replace","c","r","Math","random","floor","toString","doc","roles","rootItem","getRootItem","roleArray","items","forEach","role","Viewing","Document","getSubItemsWithProperties","type","length","getViewablePath","id","className","tooltip","handler","button","UI","Button","icon","style","fontSize","setToolTip","onClick","viewer","ctrlGroupName","viewerToolbar","getToolbar","ctrlGroup","ControlGroup","addControl","model","dbIds","Promise","resolve","reject","instanceTree","getData","getRootId","dbIdArray","Array","isArray","leafIds","getLeafNodesRec","childCount","enumNodeChildren","childId","push","i","ex","getLeafNodes","fragIds","enumNodeFragments","fragId","dbId","getFragIds","fragList","getFragmentList","fragbBox","Box3","nodebBox","getWorldBounds","union","requestedProps","propTasks","map","displayName","getProperty","all","then","properties","getProperties","result","console","log","defaultValue","prop","displayValue","Error","propertyTasks","propertyResults","propertyResult","indexOf","sort","propFilter","propRes","filteredRes","filter","res","getBulkProperties","error","components","defaultProp","getBulkPropertiesAsync","results","Object","assign","componentsMap","value","split","root","taskFunc","tasks","runTaskOnDataTreeRec","node","parent","children","childNode","task","min","max","material","_material","LineBasicMaterial","color","linewidth","impl","matman","addMaterial","drawLines","coordsArray","mat","lines","start","end","geometry","Geometry","vertices","Vector3","x","y","z","computeLineDistances","line","Line","scene","add","sceneUpdated","setMaterial","createNodeFunc","_buildModelTreeRec","name","getNodeName","rootId","rootNode","taskResults","_executeTaskOnModelTreeRec","isolate","targetIds","targetLeafIds","leafTasks","resolveLeaf","show","visibilityManager","setNodeOff","getUserAgent","navigator","userAgent","isAndroid","match","isBlackBerry","isIOS","isOpera","isWindows","isWindowsDesktop","isWindowsMobile","isAny"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\n\r\n/// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\r\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\r\n\r\nconst Autodesk = window.Autodesk;\r\nconst THREE = window.THREE;\r\n\r\nexport default class ViewerToolkit {\r\n\r\n  ///////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  ///////////////////////////////////////////////////////////////////\r\n  static guid(format = 'xxxxxxxxxxxx') {\r\n\r\n    var d = new Date().getTime();\r\n\r\n    var guid = format.replace(\r\n      /[xy]/g,\r\n      function (c) {\r\n        var r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);\r\n      });\r\n\r\n    return guid;\r\n  }\r\n\r\n  /////////////////////////////////////////////\r\n  //mobile detection\r\n  //\r\n  /////////////////////////////////////////////\r\n  static get mobile() {\r\n\r\n    return {\r\n\r\n      getUserAgent: function () {\r\n        return navigator.userAgent;\r\n      },\r\n      isAndroid: function () {\r\n        return this.getUserAgent().match(/Android/i);\r\n      },\r\n      isBlackBerry: function () {\r\n        return this.getUserAgent().match(/BlackBerry/i);\r\n      },\r\n      isIOS: function () {\r\n        return this.getUserAgent().match(/iPhone|iPad|iPod/i);\r\n      },\r\n      isOpera: function () {\r\n        return this.getUserAgent().match(/Opera Mini/i);\r\n      },\r\n      isWindows: function () {\r\n        return this.isWindowsDesktop() || this.isWindowsMobile();\r\n      },\r\n      isWindowsMobile: function () {\r\n        return this.getUserAgent().match(/IEMobile/i);\r\n      },\r\n      isWindowsDesktop: function () {\r\n        return this.getUserAgent().match(/WPDesktop/i);\r\n      },\r\n      isAny: function () {\r\n\r\n        return this.isAndroid() ||\r\n          this.isBlackBerry() ||\r\n          this.isIOS() ||\r\n          this.isWindowsMobile();\r\n      }\r\n    }\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////\r\n  // Return default viewable path: first 3d or 2d item\r\n  //\r\n  //////////////////////////////////////////////////////////////////////////\r\n  static getDefaultViewablePath (doc, roles = ['3d', '2d']) {\r\n\r\n    var rootItem = doc.getRootItem()\r\n\r\n    let roleArray = [...roles]\r\n\r\n    let items = []\r\n\r\n    roleArray.forEach((role) => {\r\n\r\n      items = [ ...items,\r\n        ...Autodesk.Viewing.Document.getSubItemsWithProperties(\r\n          rootItem, { type: 'geometry', role }, true) ]\r\n    })\r\n\r\n    return items.length ? doc.getViewablePath(items[0]) : null\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Toolbar button\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static createButton(id, className, tooltip, handler) {\r\n\r\n    var button = new Autodesk.Viewing.UI.Button(id);\r\n\r\n    button.icon.style.fontSize = '24px';\r\n\r\n    button.icon.className = className;\r\n\r\n    button.setToolTip(tooltip);\r\n\r\n    button.onClick = handler;\r\n\r\n    return button;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Control group\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static createControlGroup(viewer, ctrlGroupName) {\r\n\r\n    var viewerToolbar = viewer.getToolbar(true);\r\n\r\n    if(viewerToolbar){\r\n\r\n      var ctrlGroup =  new Autodesk.Viewing.UI.ControlGroup(\r\n        ctrlGroupName);\r\n\r\n      viewerToolbar.addControl(ctrlGroup);\r\n\r\n      return ctrlGroup;\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static getLeafNodes (model, dbIds) {\r\n\r\n    return new Promise((resolve, reject)=>{\r\n\r\n      try {\r\n\r\n        const instanceTree = model.getData().instanceTree\r\n\r\n        dbIds = dbIds || instanceTree.getRootId()\r\n\r\n        const dbIdArray = Array.isArray(dbIds) ? dbIds : [dbIds]\r\n\r\n        let leafIds = []\r\n\r\n        const getLeafNodesRec = (id) => {\r\n\r\n          var childCount = 0;\r\n\r\n          instanceTree.enumNodeChildren(id, (childId) => {\r\n\r\n              getLeafNodesRec(childId)\r\n\r\n              ++childCount\r\n            })\r\n\r\n          if (childCount == 0) {\r\n\r\n            leafIds.push(id)\r\n          }\r\n        }\r\n\r\n        for (var i = 0; i < dbIdArray.length; ++i) {\r\n\r\n          getLeafNodesRec(dbIdArray[i])\r\n        }\r\n\r\n        return resolve(leafIds)\r\n\r\n      } catch(ex){\r\n\r\n        return reject(ex)\r\n      }\r\n    })\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // get node fragIds\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static getFragIds (model, dbIds) {\r\n\r\n    return new Promise(async(resolve, reject) => {\r\n\r\n      try{\r\n\r\n        const dbIdArray = Array.isArray(dbIds) ? dbIds : [dbIds]\r\n\r\n        const instanceTree = model.getData().instanceTree\r\n\r\n        const leafIds = await ViewerToolkit.getLeafNodes(\r\n          model, dbIdArray)\r\n\r\n        let fragIds = []\r\n\r\n        for(var i=0; i< leafIds.length; ++i) {\r\n\r\n          instanceTree.enumNodeFragments(\r\n            leafIds[i], (fragId) => {\r\n              fragIds.push(fragId)\r\n            })\r\n        }\r\n\r\n        return resolve(fragIds)\r\n\r\n      } catch(ex){\r\n\r\n        return reject(ex)\r\n      }\r\n    })\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Node bounding box\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static getWorldBoundingBox(model, dbId) {\r\n\r\n    return new Promise(async(resolve, reject)=>{\r\n\r\n      try{\r\n\r\n        var fragIds = await ViewerToolkit.getFragIds(\r\n          model, dbId);\r\n\r\n        if(!fragIds.length){\r\n\r\n          return reject('No geometry, invalid dbId?');\r\n        }\r\n\r\n        var fragList = model.getFragmentList();\r\n\r\n        var fragbBox = new THREE.Box3();\r\n        var nodebBox = new THREE.Box3();\r\n\r\n        fragIds.forEach(function(fragId) {\r\n\r\n          fragList.getWorldBounds(fragId, fragbBox);\r\n          nodebBox.union(fragbBox);\r\n        });\r\n\r\n        return resolve(nodebBox);\r\n      }\r\n      catch(ex){\r\n\r\n        return reject(ex);\r\n      }\r\n    });\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Gets properties from component\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static getProperties(model, dbId, requestedProps = null) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      try {\r\n\r\n        if (requestedProps) {\r\n\r\n          const propTasks = requestedProps.map((displayName) => {\r\n\r\n            return ViewerToolkit.getProperty(\r\n              model, dbId, displayName, 'Not Available')\r\n          })\r\n\r\n          Promise.all(propTasks).then((properties) => {\r\n\r\n            resolve(properties)\r\n          })\r\n\r\n        } else {\r\n\r\n          model.getProperties(dbId, function(result) {\r\n\r\n            if (result.properties) {\r\n\r\n              return resolve(\r\n                result.properties)\r\n            }\r\n\r\n            return reject('No Properties')\r\n          })\r\n        }\r\n\r\n      } catch (ex) {\r\n\r\n          console.log(ex)\r\n          return reject(ex)\r\n      }\r\n    })\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static getProperty(model, dbId, displayName, defaultValue) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      try{\r\n\r\n        model.getProperties(dbId, (result) => {\r\n\r\n          if (result.properties) {\r\n\r\n            result.properties.forEach((prop) => {\r\n\r\n              prop.dbId = dbId\r\n\r\n              if (typeof displayName === 'function') {\r\n\r\n                if (displayName(prop.displayName)){\r\n\r\n                  resolve(prop)\r\n                }\r\n\r\n              } else if (displayName === prop.displayName) {\r\n\r\n                resolve(prop)\r\n              }\r\n            })\r\n\r\n            if (defaultValue) {\r\n\r\n              return resolve({\r\n                displayValue: defaultValue,\r\n                displayName,\r\n                dbId\r\n              })\r\n            }\r\n\r\n            reject(new Error('Not Found'))\r\n\r\n          } else {\r\n\r\n            reject(new Error('Error getting properties'));\r\n          }\r\n        })\r\n\r\n      } catch(ex){\r\n\r\n        return reject(ex)\r\n      }\r\n    })\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Gets all existing properties from component  dbIds\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static getPropertyList (model, dbIds) {\r\n\r\n    return new Promise(async(resolve, reject) => {\r\n\r\n      try{\r\n\r\n        var propertyTasks = dbIds.map((dbId) => {\r\n\r\n          return ViewerToolkit.getProperties(model, dbId)\r\n        })\r\n\r\n        var propertyResults = await Promise.all(\r\n          propertyTasks)\r\n\r\n        var properties = []\r\n\r\n        propertyResults.forEach((propertyResult)=>{\r\n\r\n          propertyResult.forEach((prop)=>{\r\n\r\n            if(properties.indexOf(prop.displayName) < 0){\r\n\r\n              properties.push(prop.displayName)\r\n            }\r\n          })\r\n        })\r\n\r\n        return resolve(properties.sort())\r\n\r\n      } catch(ex){\r\n\r\n        return reject(ex)\r\n      }\r\n    })\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static getBulkPropertiesAsync (model, dbIds, propFilter) {\r\n\r\n    return new Promise(async(resolve, reject) => {\r\n\r\n      if (typeof propFilter === 'function') {\r\n\r\n        const propTasks = dbIds.map((dbId) => {\r\n\r\n          return this.getProperty(\r\n            model, dbId, propFilter, 'Not Found')\r\n        })\r\n\r\n        const propRes = await Promise.all(propTasks)\r\n\r\n        const filteredRes = propRes.filter((res) => {\r\n\r\n          return res.displayValue !== 'Not Found'\r\n        })\r\n\r\n        resolve(filteredRes.map((res) => {\r\n\r\n          return {\r\n            properties: [res],\r\n            dbId: res.dbId\r\n          }\r\n        }))\r\n\r\n      } else {\r\n\r\n        model.getBulkProperties(dbIds, propFilter, (result) => {\r\n\r\n          resolve (result)\r\n\r\n        }, (error) => {\r\n\r\n          reject(error)\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Maps components by property\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static mapComponentsByProp (model, propFilter, components, defaultProp) {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n      try {\r\n\r\n        const results = await ViewerToolkit.getBulkPropertiesAsync(\r\n          model, components, propFilter)\r\n\r\n        const propertyResults = results.map((result) => {\r\n\r\n          return Object.assign({}, result.properties[0], {\r\n            dbId: result.dbId\r\n          })\r\n        })\r\n\r\n        var componentsMap = {};\r\n\r\n        propertyResults.forEach((result) => {\r\n\r\n          var value = result.displayValue;\r\n\r\n          if (typeof value == 'string') {\r\n\r\n            value = value.split(':')[0]\r\n          }\r\n\r\n          if (!componentsMap[value]) {\r\n\r\n            componentsMap[value] = []\r\n          }\r\n\r\n          componentsMap[value].push(result.dbId)\r\n        })\r\n\r\n        return resolve(componentsMap)\r\n\r\n      } catch(ex){\r\n\r\n        return reject(ex);\r\n      }\r\n    })\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////\r\n  // Runs recursively the argument task on each node\r\n  // of the data tree\r\n  //\r\n  /////////////////////////////////////////////////////////////\r\n  static runTaskOnDataTree(root, taskFunc) {\r\n\r\n    var tasks = [];\r\n\r\n    var runTaskOnDataTreeRec = (node, parent=null)=> {\r\n\r\n      if (node.children) {\r\n\r\n        node.children.forEach((childNode)=> {\r\n\r\n          runTaskOnDataTreeRec(childNode, node);\r\n        });\r\n      }\r\n\r\n      var task = taskFunc(node, parent);\r\n\r\n      tasks.push(task);\r\n    }\r\n\r\n    runTaskOnDataTreeRec(root);\r\n\r\n    return Promise.all(tasks);\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static drawBox(viewer, min, max, material = null) {\r\n\r\n    var _material = material;\r\n\r\n    if(!_material) {\r\n\r\n      _material = new THREE.LineBasicMaterial({\r\n        color: 0xffff00,\r\n        linewidth: 2\r\n      });\r\n\r\n      viewer.impl.matman().addMaterial(\r\n        'ADN-Material-Line',\r\n        _material,\r\n        true);\r\n    }\r\n\r\n    function drawLines(coordsArray, mat) {\r\n\r\n      var lines = [];\r\n\r\n      for (var i = 0; i < coordsArray.length; i+=2) {\r\n\r\n        var start = coordsArray[i];\r\n        var end = coordsArray[i+1];\r\n\r\n        var geometry = new THREE.Geometry();\r\n\r\n        geometry.vertices.push(new THREE.Vector3(\r\n          start.x, start.y, start.z));\r\n\r\n        geometry.vertices.push(new THREE.Vector3(\r\n          end.x, end.y, end.z));\r\n\r\n        geometry.computeLineDistances();\r\n\r\n        var line = new THREE.Line(geometry, mat);\r\n\r\n        viewer.impl.scene.add(line);\r\n\r\n        lines.push(line);\r\n      }\r\n\r\n      return lines;\r\n    }\r\n\r\n    var lines = drawLines([\r\n\r\n        {x: min.x, y: min.y, z: min.z},\r\n        {x: max.x, y: min.y, z: min.z},\r\n\r\n        {x: max.x, y: min.y, z: min.z},\r\n        {x: max.x, y: min.y, z: max.z},\r\n\r\n        {x: max.x, y: min.y, z: max.z},\r\n        {x: min.x, y: min.y, z: max.z},\r\n\r\n        {x: min.x, y: min.y, z: max.z},\r\n        {x: min.x, y: min.y, z: min.z},\r\n\r\n        {x: min.x, y: max.y, z: max.z},\r\n        {x: max.x, y: max.y, z: max.z},\r\n\r\n        {x: max.x, y: max.y, z: max.z},\r\n        {x: max.x, y: max.y, z: min.z},\r\n\r\n        {x: max.x, y: max.y, z: min.z},\r\n        {x: min.x, y: max.y, z: min.z},\r\n\r\n        {x: min.x, y: max.y, z: min.z},\r\n        {x: min.x, y: max.y, z: max.z},\r\n\r\n        {x: min.x, y: min.y, z: min.z},\r\n        {x: min.x, y: max.y, z: min.z},\r\n\r\n        {x: max.x, y: min.y, z: min.z},\r\n        {x: max.x, y: max.y, z: min.z},\r\n\r\n        {x: max.x, y: min.y, z: max.z},\r\n        {x: max.x, y: max.y, z: max.z},\r\n\r\n        {x: min.x, y: min.y, z: max.z},\r\n        {x: min.x, y: max.y, z: max.z}],\r\n\r\n      _material);\r\n\r\n    viewer.impl.sceneUpdated(true);\r\n\r\n    return lines;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Set component material\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static async setMaterial(model, dbId, material) {\r\n\r\n    const fragIds = await ViewerToolkit.getFragIds(\r\n      model, dbId)\r\n\r\n    const fragList = model.getFragmentList()\r\n\r\n    fragIds.forEach((fragId)=> {\r\n\r\n      fragList.setMaterial(fragId, material)\r\n    })\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Recursively builds the model tree\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static buildModelTree(model, createNodeFunc = null){\r\n\r\n    //builds model tree recursively\r\n    function _buildModelTreeRec(node){\r\n\r\n      instanceTree.enumNodeChildren(node.dbId,\r\n        function(childId) {\r\n\r\n          var childNode = null;\r\n\r\n          if(createNodeFunc){\r\n\r\n            childNode = createNodeFunc(childId);\r\n\r\n          } else {\r\n\r\n            node.children = node.children || [];\r\n\r\n            childNode = {\r\n              dbId: childId,\r\n              name: instanceTree.getNodeName(childId)\r\n            }\r\n\r\n            node.children.push(childNode);\r\n          }\r\n\r\n          _buildModelTreeRec(childNode);\r\n        });\r\n    }\r\n\r\n    //get model instance tree and root component\r\n    var instanceTree = model.getData().instanceTree;\r\n\r\n    var rootId = instanceTree.getRootId();\r\n\r\n    var rootNode = {\r\n      dbId: rootId,\r\n      name: instanceTree.getNodeName(rootId)\r\n    }\r\n\r\n    _buildModelTreeRec(rootNode);\r\n\r\n    return rootNode;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Recursively execute task on model tree\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static executeTaskOnModelTree(model, task) {\r\n\r\n    var taskResults = [];\r\n\r\n    function _executeTaskOnModelTreeRec(dbId){\r\n\r\n      instanceTree.enumNodeChildren(dbId,\r\n        function(childId) {\r\n\r\n          taskResults.push(task(model, childId));\r\n\r\n          _executeTaskOnModelTreeRec(childId);\r\n        });\r\n    }\r\n\r\n    //get model instance tree and root component\r\n    var instanceTree = model.getData().instanceTree;\r\n\r\n    var rootId = instanceTree.getRootId();\r\n\r\n    _executeTaskOnModelTreeRec(rootId);\r\n\r\n    return taskResults;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////\r\n  static isolateFull (viewer, model = null, dbIds = []) {\r\n\r\n    return new Promise(async(resolve, reject) => {\r\n\r\n      try {\r\n\r\n        model = model || viewer.model\r\n\r\n        viewer.isolate(dbIds)\r\n\r\n        const targetIds = Array.isArray(dbIds) ? dbIds : [dbIds]\r\n\r\n        const targetLeafIds = await ViewerToolkit.getLeafNodes(\r\n          model, targetIds)\r\n\r\n        const leafIds = await ViewerToolkit.getLeafNodes (model)\r\n\r\n        const leafTasks = leafIds.map((dbId) => {\r\n\r\n          return new Promise((resolveLeaf) => {\r\n\r\n            const show = !targetLeafIds.length  ||\r\n              targetLeafIds.indexOf(dbId) > -1\r\n\r\n            viewer.impl.visibilityManager.setNodeOff(\r\n              dbId, !show)\r\n\r\n            resolveLeaf()\r\n          })\r\n        })\r\n\r\n        return Promise.all(leafTasks)\r\n\r\n      } catch(ex){\r\n\r\n        return reject(ex)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}