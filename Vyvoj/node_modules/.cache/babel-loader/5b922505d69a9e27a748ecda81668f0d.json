{"ast":null,"code":"import _classCallCheck from \"E:\\\\GitHub\\\\FrogeCsConfiguratorRivetec\\\\Vyvoj\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n\n/* eslint-disable */\n/// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\nvar Autodesk = window.Autodesk;\nvar THREE = window.THREE;\n\n(function init_TransformGizmos() {\n  'use strict';\n\n  var GizmoMaterial = function GizmoMaterial(parameters) {\n    _classCallCheck(this, GizmoMaterial);\n\n    THREE.MeshBasicMaterial.call(this);\n    this.depthTest = false;\n    this.depthWrite = false;\n    this.side = THREE.FrontSide;\n    this.transparent = true;\n    this.setValues(parameters);\n    this.oldColor = this.color.clone();\n    this.oldOpacity = this.opacity;\n\n    this.highlight = function (highlighted) {\n      if (highlighted) {\n        this.color.setRGB(1, 230 / 255, 3 / 255);\n        this.opacity = 1;\n      } else {\n        this.color.copy(this.oldColor);\n        this.opacity = this.oldOpacity;\n      }\n    };\n  };\n\n  GizmoMaterial.prototype = Object.create(THREE.MeshBasicMaterial.prototype);\n\n  var GizmoLineMaterial = function GizmoLineMaterial(parameters) {\n    _classCallCheck(this, GizmoLineMaterial);\n\n    THREE.LineBasicMaterial.call(this);\n    this.depthTest = false;\n    this.depthWrite = false;\n    this.transparent = true;\n    this.linewidth = 3;\n    this.setValues(parameters);\n    this.oldColor = this.color.clone();\n    this.oldOpacity = this.opacity;\n\n    this.highlight = function (highlighted) {\n      if (highlighted) {\n        this.color.setRGB(1, 230 / 255, 3 / 255);\n        this.opacity = 1;\n      } else {\n        this.color.copy(this.oldColor);\n        this.opacity = this.oldOpacity;\n      }\n    };\n  };\n\n  GizmoLineMaterial.prototype = Object.create(THREE.LineBasicMaterial.prototype); // polyfill\n\n  if (THREE.PolyhedronGeometry === undefined) {\n    THREE.PolyhedronGeometry = function (vertices, indices, radius, detail) {\n      THREE.Geometry.call(this);\n      this.type = 'PolyhedronGeometry';\n      this.parameters = {\n        vertices: vertices,\n        indices: indices,\n        radius: radius,\n        detail: detail\n      };\n      radius = radius || 1;\n      detail = detail || 0;\n      var that = this;\n\n      for (var i = 0, l = vertices.length; i < l; i += 3) {\n        prepare(new THREE.Vector3(vertices[i], vertices[i + 1], vertices[i + 2]));\n      }\n\n      var midpoints = [],\n          p = this.vertices;\n      var faces = [];\n\n      for (var i = 0, j = 0, l = indices.length; i < l; i += 3, j++) {\n        var v1 = p[indices[i]];\n        var v2 = p[indices[i + 1]];\n        var v3 = p[indices[i + 2]];\n        faces[j] = new THREE.Face3(v1.index, v2.index, v3.index, [v1.clone(), v2.clone(), v3.clone()]);\n      }\n\n      var centroid = new THREE.Vector3();\n\n      for (var i = 0, l = faces.length; i < l; i++) {\n        subdivide(faces[i], detail);\n      } // Handle case when face straddles the seam\n\n\n      for (var i = 0, l = this.faceVertexUvs[0].length; i < l; i++) {\n        var uvs = this.faceVertexUvs[0][i];\n        var x0 = uvs[0].x;\n        var x1 = uvs[1].x;\n        var x2 = uvs[2].x;\n        var max = Math.max(x0, Math.max(x1, x2));\n        var min = Math.min(x0, Math.min(x1, x2));\n\n        if (max > 0.9 && min < 0.1) {\n          // 0.9 is somewhat arbitrary\n          if (x0 < 0.2) uvs[0].x += 1;\n          if (x1 < 0.2) uvs[1].x += 1;\n          if (x2 < 0.2) uvs[2].x += 1;\n        }\n      } // Apply radius\n\n\n      for (var i = 0, l = this.vertices.length; i < l; i++) {\n        this.vertices[i].multiplyScalar(radius);\n      } // Merge vertices\n\n\n      this.mergeVertices();\n      this.computeFaceNormals();\n      this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), radius); // Project vector onto sphere's surface\n\n      function prepare(vector) {\n        var vertex = vector.normalize().clone();\n        vertex.index = that.vertices.push(vertex) - 1; // Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n        var u = azimuth(vector) / 2 / Math.PI + 0.5;\n        var v = inclination(vector) / Math.PI + 0.5;\n        vertex.uv = new THREE.Vector2(u, 1 - v);\n        return vertex;\n      } // Approximate a curved face with recursively sub-divided triangles.\n\n\n      function make(v1, v2, v3) {\n        var face = new THREE.Face3(v1.index, v2.index, v3.index, [v1.clone(), v2.clone(), v3.clone()]);\n        that.faces.push(face);\n        centroid.copy(v1).add(v2).add(v3).divideScalar(3);\n        var azi = azimuth(centroid);\n        that.faceVertexUvs[0].push([correctUV(v1.uv, v1, azi), correctUV(v2.uv, v2, azi), correctUV(v3.uv, v3, azi)]);\n      } // Analytically subdivide a face to the required detail level.\n\n\n      function subdivide(face, detail) {\n        var cols = Math.pow(2, detail);\n        var cells = Math.pow(4, detail);\n        var a = prepare(that.vertices[face.a]);\n        var b = prepare(that.vertices[face.b]);\n        var c = prepare(that.vertices[face.c]);\n        var v = []; // Construct all of the vertices for this subdivision.\n\n        for (var i = 0; i <= cols; i++) {\n          v[i] = [];\n          var aj = prepare(a.clone().lerp(c, i / cols));\n          var bj = prepare(b.clone().lerp(c, i / cols));\n          var rows = cols - i;\n\n          for (var j = 0; j <= rows; j++) {\n            if (j == 0 && i == cols) {\n              v[i][j] = aj;\n            } else {\n              v[i][j] = prepare(aj.clone().lerp(bj, j / rows));\n            }\n          }\n        } // Construct all of the faces.\n\n\n        for (var i = 0; i < cols; i++) {\n          for (var j = 0; j < 2 * (cols - i) - 1; j++) {\n            var k = Math.floor(j / 2);\n\n            if (j % 2 == 0) {\n              make(v[i][k + 1], v[i + 1][k], v[i][k]);\n            } else {\n              make(v[i][k + 1], v[i + 1][k + 1], v[i + 1][k]);\n            }\n          }\n        }\n      } // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n      function azimuth(vector) {\n        return Math.atan2(vector.z, -vector.x);\n      } // Angle above the XZ plane.\n\n\n      function inclination(vector) {\n        return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n      } // Texture fixing helper. Spheres have some odd behaviours.\n\n\n      function correctUV(uv, vector, azimuth) {\n        if (azimuth < 0 && uv.x === 1) uv = new THREE.Vector2(uv.x - 1, uv.y);\n        if (vector.x === 0 && vector.z === 0) uv = new THREE.Vector2(azimuth / 2 / Math.PI + 0.5, uv.y);\n        return uv.clone();\n      }\n    };\n\n    THREE.PolyhedronGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  } // polyfill\n\n\n  if (THREE.OctahedronGeometry === undefined) {\n    THREE.OctahedronGeometry = function (radius, detail) {\n      this.parameters = {\n        radius: radius,\n        detail: detail\n      };\n      var vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n      var indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n      THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);\n      this.type = 'OctahedronGeometry';\n      this.parameters = {\n        radius: radius,\n        detail: detail\n      };\n    };\n\n    THREE.OctahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  } // polyfill\n\n\n  if (THREE.TorusGeometry === undefined) {\n    THREE.TorusGeometry = function (radius, tube, radialSegments, tubularSegments, arc) {\n      THREE.Geometry.call(this);\n      this.type = 'TorusGeometry';\n      this.parameters = {\n        radius: radius,\n        tube: tube,\n        radialSegments: radialSegments,\n        tubularSegments: tubularSegments,\n        arc: arc\n      };\n      radius = radius || 100;\n      tube = tube || 40;\n      radialSegments = radialSegments || 8;\n      tubularSegments = tubularSegments || 6;\n      arc = arc || Math.PI * 2;\n      var center = new THREE.Vector3(),\n          uvs = [],\n          normals = [];\n\n      for (var j = 0; j <= radialSegments; j++) {\n        for (var i = 0; i <= tubularSegments; i++) {\n          var u = i / tubularSegments * arc;\n          var v = j / radialSegments * Math.PI * 2;\n          center.x = radius * Math.cos(u);\n          center.y = radius * Math.sin(u);\n          var vertex = new THREE.Vector3();\n          vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n          vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n          vertex.z = tube * Math.sin(v);\n          this.vertices.push(vertex);\n          uvs.push(new THREE.Vector2(i / tubularSegments, j / radialSegments));\n          normals.push(vertex.clone().sub(center).normalize());\n        }\n      }\n\n      for (var j = 1; j <= radialSegments; j++) {\n        for (var i = 1; i <= tubularSegments; i++) {\n          var a = (tubularSegments + 1) * j + i - 1;\n          var b = (tubularSegments + 1) * (j - 1) + i - 1;\n          var c = (tubularSegments + 1) * (j - 1) + i;\n          var d = (tubularSegments + 1) * j + i;\n          var face = new THREE.Face3(a, b, d, [normals[a].clone(), normals[b].clone(), normals[d].clone()]);\n          this.faces.push(face);\n          this.faceVertexUvs[0].push([uvs[a].clone(), uvs[b].clone(), uvs[d].clone()]);\n          face = new THREE.Face3(b, c, d, [normals[b].clone(), normals[c].clone(), normals[d].clone()]);\n          this.faces.push(face);\n          this.faceVertexUvs[0].push([uvs[b].clone(), uvs[c].clone(), uvs[d].clone()]);\n        }\n      }\n\n      this.computeFaceNormals();\n    };\n\n    THREE.TorusGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  }\n\n  var createCircleGeometry = function createCircleGeometry(radius, facing, arc) {\n    var geometry = new THREE.Geometry();\n    arc = arc ? arc : 1;\n\n    for (var i = 0; i <= 64 * arc; ++i) {\n      if (facing == 'x') geometry.vertices.push(new THREE.Vector3(0, Math.cos(i / 32 * Math.PI), Math.sin(i / 32 * Math.PI)).multiplyScalar(radius));\n      if (facing == 'y') geometry.vertices.push(new THREE.Vector3(Math.cos(i / 32 * Math.PI), 0, Math.sin(i / 32 * Math.PI)).multiplyScalar(radius));\n      if (facing == 'z') geometry.vertices.push(new THREE.Vector3(Math.sin(i / 32 * Math.PI), Math.cos(i / 32 * Math.PI), 0).multiplyScalar(radius));\n    }\n\n    return geometry;\n  };\n\n  var createArrowGeometry = function createArrowGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded) {\n    var arrowGeometry = new THREE.Geometry();\n    var mesh = new THREE.Mesh(new THREE.CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded));\n    mesh.position.y = 0.5;\n    mesh.updateMatrix();\n    arrowGeometry.merge(mesh.geometry, mesh.matrix);\n    return arrowGeometry;\n  };\n\n  var createLineGeometry = function createLineGeometry(axis) {\n    var lineGeometry = new THREE.Geometry();\n    if (axis === 'X') lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(1, 0, 0));else if (axis === 'Y') lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));else if (axis === 'Z') lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1));\n    return lineGeometry;\n  };\n\n  THREE.TransformGizmo = function () {\n    var scope = this;\n    var showPickers = false; //debug\n\n    var showActivePlane = false; //debug\n\n    this.init = function () {\n      THREE.Object3D.call(this);\n      this.handles = new THREE.Object3D();\n      this.pickers = new THREE.Object3D();\n      this.planes = new THREE.Object3D();\n      this.highlights = new THREE.Object3D();\n      this.hemiPicker = new THREE.Object3D();\n      this.subPickers = new THREE.Object3D();\n      this.add(this.handles);\n      this.add(this.pickers);\n      this.add(this.planes);\n      this.add(this.highlights);\n      this.add(this.hemiPicker);\n      this.add(this.subPickers); //// PLANES\n\n      var planeGeometry = new THREE.PlaneBufferGeometry(50, 50, 2, 2);\n      var planeMaterial = new THREE.MeshBasicMaterial({\n        wireframe: true\n      });\n      planeMaterial.side = THREE.DoubleSide;\n      var planes = {\n        \"XY\": new THREE.Mesh(planeGeometry, planeMaterial),\n        \"YZ\": new THREE.Mesh(planeGeometry, planeMaterial),\n        \"XZ\": new THREE.Mesh(planeGeometry, planeMaterial),\n        \"XYZE\": new THREE.Mesh(planeGeometry, planeMaterial)\n      };\n      this.activePlane = planes[\"XYZE\"];\n      planes[\"YZ\"].rotation.set(0, Math.PI / 2, 0);\n      planes[\"XZ\"].rotation.set(-Math.PI / 2, 0, 0);\n\n      for (var i in planes) {\n        planes[i].name = i;\n        this.planes.add(planes[i]);\n        this.planes[i] = planes[i];\n        planes[i].visible = false;\n      }\n\n      this.setupGizmos();\n      this.activeMode = \"\"; // reset Transformations\n\n      this.traverse(function (child) {\n        if (child instanceof THREE.Mesh) {\n          child.updateMatrix();\n          var tempGeometry = new THREE.Geometry();\n\n          if (child.geometry instanceof THREE.BufferGeometry) {\n            child.geometry = new THREE.Geometry().fromBufferGeometry(child.geometry);\n          }\n\n          tempGeometry.merge(child.geometry, child.matrix);\n          child.geometry = tempGeometry;\n          child.position.set(0, 0, 0);\n          child.rotation.set(0, 0, 0);\n          child.scale.set(1, 1, 1);\n        }\n      });\n    };\n\n    this.hide = function () {\n      this.traverse(function (child) {\n        child.visible = false;\n      });\n    };\n\n    this.show = function () {\n      this.traverse(function (child) {\n        child.visible = true;\n        if (child.parent == scope.pickers || child.parent == scope.hemiPicker) child.visible = showPickers;\n        if (child.parent == scope.planes) child.visible = false;\n      });\n      this.activePlane.visible = showActivePlane;\n    };\n\n    this.highlight = function (axis) {\n      this.traverse(function (child) {\n        if (child.material && child.material.highlight) {\n          if (child.name == axis) {\n            child.material.highlight(true);\n          } else {\n            child.material.highlight(false);\n          }\n        }\n      });\n    };\n\n    this.setupGizmos = function () {\n      var addGizmos = function addGizmos(gizmoMap, parent) {\n        for (var name in gizmoMap) {\n          for (var i = gizmoMap[name].length; i--;) {\n            var object = gizmoMap[name][i][0];\n            var position = gizmoMap[name][i][1];\n            var rotation = gizmoMap[name][i][2];\n            var visble = gizmoMap[name][i][3];\n            object.name = name;\n            if (position) object.position.set(position[0], position[1], position[2]);\n            if (rotation) object.rotation.set(rotation[0], rotation[1], rotation[2]);\n            if (visble) object.visble = visble;\n            parent.add(object);\n          }\n        }\n      };\n\n      this.setHandlePickerGizmos();\n      addGizmos(this.handleGizmos, this.handles);\n      addGizmos(this.pickerGizmos, this.pickers);\n      addGizmos(this.highlightGizmos, this.highlights);\n      addGizmos(this.hemiPickerGizmos, this.hemiPicker);\n      addGizmos(this.subPickerGizmos, this.subPickers);\n      this.hide();\n      this.show();\n    };\n  };\n\n  THREE.TransformGizmo.prototype = Object.create(THREE.Object3D.prototype);\n\n  THREE.TransformGizmo.prototype.update = function (rotation, eye) {\n    var vec1 = new THREE.Vector3(0, 0, 0);\n    var vec2 = new THREE.Vector3(0, 1, 0);\n    var lookAtMatrix = new THREE.Matrix4();\n    this.traverse(function (child) {\n      if (child.name) {\n        if (child.name.search(\"E\") != -1) {\n          child.quaternion.setFromRotationMatrix(lookAtMatrix.lookAt(eye, vec1, vec2));\n        } else if (child.name.search(\"X\") != -1 || child.name.search(\"Y\") != -1 || child.name.search(\"Z\") != -1) {\n          child.quaternion.setFromEuler(rotation);\n        }\n      }\n    });\n  };\n\n  THREE.TransformGizmoTranslate = function () {\n    THREE.TransformGizmo.call(this);\n\n    this.setHandlePickerGizmos = function () {\n      var arrowGeometry = createArrowGeometry(0, 0.05, 0.2, 12, 1, false);\n      var lineXGeometry = createLineGeometry('X');\n      var lineYGeometry = createLineGeometry('Y');\n      var lineZGeometry = createLineGeometry('Z');\n      this.handleGizmos = {\n        X: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({\n          color: 0xf12c2c\n        })), [0.5, 0, 0], [0, 0, -Math.PI / 2]], [new THREE.Line(lineXGeometry, new GizmoLineMaterial({\n          color: 0xf12c2c\n        }))]],\n        Y: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({\n          color: 0x0bb80b\n        })), [0, 0.5, 0]], [new THREE.Line(lineYGeometry, new GizmoLineMaterial({\n          color: 0x0bb80b\n        }))]],\n        Z: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({\n          color: 0x2c2cf1\n        })), [0, 0, 0.5], [Math.PI / 2, 0, 0]], [new THREE.Line(lineZGeometry, new GizmoLineMaterial({\n          color: 0x2c2cf1\n        }))]],\n        XYZ: [[new THREE.Mesh(new THREE.OctahedronGeometry(0.1, 0), new GizmoMaterial({\n          color: 0xffffff,\n          opacity: 0.25\n        })), [0, 0, 0], [0, 0, 0]]],\n        XY: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({\n          color: 0xffff00,\n          opacity: 0.25\n        })), [0.15, 0.15, 0]]],\n        YZ: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({\n          color: 0x00ffff,\n          opacity: 0.25\n        })), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n        XZ: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({\n          color: 0xff00ff,\n          opacity: 0.25\n        })), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]]\n      };\n      this.pickerGizmos = {\n        X: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({\n          color: 0xff0000,\n          opacity: 0.25\n        })), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n        Y: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({\n          color: 0x00ff00,\n          opacity: 0.25\n        })), [0, 0.6, 0]]],\n        Z: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({\n          color: 0x0000ff,\n          opacity: 0.25\n        })), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n        XYZ: [[new THREE.Mesh(new THREE.OctahedronGeometry(0.2, 0), new GizmoMaterial({\n          color: 0xffffff,\n          opacity: 0.25\n        }))]],\n        XY: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), new GizmoMaterial({\n          color: 0xffff00,\n          opacity: 0.25\n        })), [0.2, 0.2, 0]]],\n        YZ: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), new GizmoMaterial({\n          color: 0x00ffff,\n          opacity: 0.25\n        })), [0, 0.2, 0.2], [0, Math.PI / 2, 0]]],\n        XZ: [[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), new GizmoMaterial({\n          color: 0xff00ff,\n          opacity: 0.25\n        })), [0.2, 0, 0.2], [-Math.PI / 2, 0, 0]]]\n      };\n      this.hemiPickerGizmos = {\n        XYZ: [[new THREE.Mesh(new THREE.BoxGeometry(1.2, 1.2, 1.2), new GizmoMaterial({\n          color: 0x0000ff\n        })), [0.5, 0.5, 0.5], null, false]]\n      };\n    };\n\n    this.setActivePlane = function (axis, eye) {\n      var tempMatrix = new THREE.Matrix4();\n      eye.applyMatrix4(tempMatrix.getInverse(tempMatrix.extractRotation(this.planes[\"XY\"].matrixWorld)));\n\n      if (axis == \"X\") {\n        this.activePlane = this.planes[\"XY\"];\n        if (Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes[\"XZ\"];\n      }\n\n      if (axis == \"Y\") {\n        this.activePlane = this.planes[\"XY\"];\n        if (Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes[\"YZ\"];\n      }\n\n      if (axis == \"Z\") {\n        this.activePlane = this.planes[\"XZ\"];\n        if (Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes[\"YZ\"];\n      }\n\n      if (axis == \"XYZ\") this.activePlane = this.planes[\"XYZE\"];\n      if (axis == \"XY\") this.activePlane = this.planes[\"XY\"];\n      if (axis == \"YZ\") this.activePlane = this.planes[\"YZ\"];\n      if (axis == \"XZ\") this.activePlane = this.planes[\"XZ\"];\n      this.hide();\n      this.show();\n    };\n\n    this.init();\n  };\n\n  THREE.TransformGizmoTranslate.prototype = Object.create(THREE.TransformGizmo.prototype);\n\n  THREE.TransformGizmoRotate = function () {\n    THREE.TransformGizmo.call(this);\n\n    this.setHandlePickerGizmos = function () {\n      this.handleGizmos = {\n        RX: [[new THREE.Line(createCircleGeometry(1, 'x', 0.5), new GizmoLineMaterial({\n          color: 0xff0000\n        }))]],\n        RY: [[new THREE.Line(createCircleGeometry(1, 'y', 0.5), new GizmoLineMaterial({\n          color: 0x00ff00\n        }))]],\n        RZ: [[new THREE.Line(createCircleGeometry(1, 'z', 0.5), new GizmoLineMaterial({\n          color: 0x0000ff\n        }))]],\n        RE: [[new THREE.Line(createCircleGeometry(1.25, 'z', 1), new GizmoLineMaterial({\n          color: 0x00ffff\n        }))]],\n        RXYZE: [[new THREE.Line(createCircleGeometry(1, 'z', 1), new GizmoLineMaterial({\n          color: 0xff00ff\n        }))]]\n      };\n      this.pickerGizmos = {\n        RX: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 4, 12, Math.PI), new GizmoMaterial({\n          color: 0xff0000,\n          opacity: 0.25\n        })), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n        RY: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 4, 12, Math.PI), new GizmoMaterial({\n          color: 0x00ff00,\n          opacity: 0.25\n        })), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n        RZ: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 4, 12, Math.PI), new GizmoMaterial({\n          color: 0x0000ff,\n          opacity: 0.25\n        })), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n        RE: [[new THREE.Mesh(new THREE.TorusGeometry(1.25, 0.12, 2, 24), new GizmoMaterial({\n          color: 0x00ffff,\n          opacity: 0.25\n        }))]],\n        RXYZE: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 2, 24), new GizmoMaterial({\n          color: 0xff00ff,\n          opacity: 0.25\n        }))]]\n      };\n    };\n\n    this.setActivePlane = function (axis) {\n      if (axis == \"RE\") this.activePlane = this.planes[\"XYZE\"];\n      if (axis == \"RX\") this.activePlane = this.planes[\"YZ\"];\n      if (axis == \"RY\") this.activePlane = this.planes[\"XZ\"];\n      if (axis == \"RZ\") this.activePlane = this.planes[\"XY\"];\n      this.hide();\n      this.show();\n    };\n\n    this.update = function (rotation, eye2) {\n      THREE.TransformGizmo.prototype.update.apply(this, arguments);\n      var tempMatrix = new THREE.Matrix4();\n      var worldRotation = new THREE.Euler(0, 0, 1);\n      var tempQuaternion = new THREE.Quaternion();\n      var unitX = new THREE.Vector3(1, 0, 0);\n      var unitY = new THREE.Vector3(0, 1, 0);\n      var unitZ = new THREE.Vector3(0, 0, 1);\n      var quaternionX = new THREE.Quaternion();\n      var quaternionY = new THREE.Quaternion();\n      var quaternionZ = new THREE.Quaternion();\n      var eye = eye2.clone();\n      worldRotation.copy(this.planes[\"XY\"].rotation);\n      tempQuaternion.setFromEuler(worldRotation);\n      tempMatrix.makeRotationFromQuaternion(tempQuaternion).getInverse(tempMatrix);\n      eye.applyMatrix4(tempMatrix);\n      this.traverse(function (child) {\n        tempQuaternion.setFromEuler(worldRotation);\n\n        if (child.name == \"RX\") {\n          quaternionX.setFromAxisAngle(unitX, Math.atan2(-eye.y, eye.z));\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n          child.quaternion.copy(tempQuaternion);\n        }\n\n        if (child.name == \"RY\") {\n          quaternionY.setFromAxisAngle(unitY, Math.atan2(eye.x, eye.z));\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n          child.quaternion.copy(tempQuaternion);\n        }\n\n        if (child.name == \"RZ\") {\n          quaternionZ.setFromAxisAngle(unitZ, Math.atan2(eye.y, eye.x));\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n          child.quaternion.copy(tempQuaternion);\n        }\n      });\n    };\n\n    this.init();\n  };\n\n  THREE.TransformGizmoRotate.prototype = Object.create(THREE.TransformGizmo.prototype);\n\n  THREE.TransformGizmoTranslateRotate = function () {\n    THREE.TransformGizmo.call(this);\n    var scope = this;\n\n    this.setHandlePickerGizmos = function () {\n      var arrowGeometry = createArrowGeometry(0, 0.05, 0.2, 12, 1, false);\n      var lineGeometry = new THREE.Geometry();\n      lineGeometry.vertices.push(new THREE.Vector3(0, 0, -0.1), new THREE.Vector3(0, 0, 0.1), new THREE.Vector3(-0.1, 0, 0), new THREE.Vector3(0.1, 0, 0));\n      var theta = 0.15;\n      this.handleGizmos = {\n        Z: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({\n          color: 0xffffff\n        })), [0, 0, 0.25], [Math.PI / 2, 0, 0]], [new THREE.Mesh(new THREE.CylinderGeometry(0.015, 0.015, 0.6, 4, 1, false), new GizmoMaterial({\n          color: 0xffffff\n        })), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n        RX: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.015, 12, 60, theta * 2 * Math.PI), new GizmoMaterial({\n          color: 0xff0000\n        })), [0, 0, 0], [theta * Math.PI, -Math.PI / 2, 0]], [new THREE.Mesh(new THREE.CylinderGeometry(0.05, 0.05, 0.015, 60, 1, false), new GizmoMaterial({\n          color: 0xff0000\n        })), [0, 0, 1], [Math.PI / 2, 0, 0]]],\n        RY: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.015, 12, 60, theta * 2 * Math.PI), new GizmoMaterial({\n          color: 0x0000ff\n        })), [0, 0, 0], [Math.PI / 2, 0, (0.5 - theta) * Math.PI]], [new THREE.Mesh(new THREE.CylinderGeometry(0.05, 0.05, 0.01, 60, 1, false), new GizmoMaterial({\n          color: 0x0000ff\n        })), [0, 0, 1]]]\n      };\n      this.pickerGizmos = {\n        Z: [[new THREE.Mesh(new THREE.CylinderGeometry(0.12, 0.12, 0.65, 4, 1, false), new GizmoMaterial({\n          color: 0x0000ff,\n          opacity: 0.25\n        })), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n        RX: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 4, 12, theta * 2 * Math.PI), new GizmoMaterial({\n          color: 0xff0000,\n          opacity: 0.25\n        })), [0, 0, 0], [theta * Math.PI, -Math.PI / 2, 0]]],\n        RY: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.12, 4, 12, theta * 2 * Math.PI), new GizmoMaterial({\n          color: 0x0000ff,\n          opacity: 0.25\n        })), [0, 0, 0], [Math.PI / 2, 0, (0.5 - theta) * Math.PI]]]\n      };\n      this.subPickerGizmos = {\n        Z: [[new THREE.Mesh(new THREE.CylinderGeometry(0.12, 0.12, 0.65, 4, 1, false), new GizmoMaterial({\n          color: 0x0000ff,\n          opacity: 0.25\n        })), [0, 0, 0.5], [Math.PI / 2, 0, 0]]]\n      };\n      this.highlightGizmos = {\n        Z: [],\n        RX: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.02, 12, 60, 2 * Math.PI), new GizmoMaterial({\n          color: 0xff0000,\n          opacity: 1\n        })), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2], false]],\n        RY: [[new THREE.Mesh(new THREE.TorusGeometry(1, 0.02, 12, 60, 2 * Math.PI), new GizmoMaterial({\n          color: 0x0000ff,\n          opacity: 1\n        })), [0, 0, 0], [Math.PI / 2, 0, 0], false]]\n      };\n      this.hemiPickerGizmos = {\n        XYZ: [[new THREE.Mesh(new THREE.SphereGeometry(1.2, 8, 8, 0, Math.PI), new GizmoMaterial({\n          color: 0x0000ff\n        })), null, null, false]]\n      };\n    };\n\n    this.setActivePlane = function (axis, eye) {\n      if (this.activeMode == \"translate\") {\n        var tempMatrix = new THREE.Matrix4();\n        eye.applyMatrix4(tempMatrix.getInverse(tempMatrix.extractRotation(this.planes[\"XY\"].matrixWorld)));\n\n        if (axis == \"X\") {\n          this.activePlane = this.planes[\"XY\"];\n          if (Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes[\"XZ\"];\n        }\n\n        if (axis == \"Y\") {\n          this.activePlane = this.planes[\"XY\"];\n          if (Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes[\"YZ\"];\n        }\n\n        if (axis == \"Z\") {\n          this.activePlane = this.planes[\"XZ\"];\n          if (Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes[\"YZ\"];\n        }\n      } else if (this.activeMode == \"rotate\") {\n        if (axis == \"RX\") this.activePlane = this.planes[\"YZ\"];\n        if (axis == \"RY\") this.activePlane = this.planes[\"XZ\"];\n        if (axis == \"RZ\") this.activePlane = this.planes[\"XY\"];\n      }\n\n      this.hide();\n      this.show();\n    };\n\n    this.update = function (rotation, eye2) {\n      if (this.activeMode == \"translate\") {\n        THREE.TransformGizmo.prototype.update.apply(this, arguments);\n      } else if (this.activeMode == \"rotate\") {\n        THREE.TransformGizmo.prototype.update.apply(this, arguments);\n        var tempMatrix = new THREE.Matrix4();\n        var worldRotation = new THREE.Euler(0, 0, 1);\n        var tempQuaternion = new THREE.Quaternion();\n        var unitX = new THREE.Vector3(1, 0, 0);\n        var unitY = new THREE.Vector3(0, 1, 0);\n        var unitZ = new THREE.Vector3(0, 0, 1);\n        var quaternionX = new THREE.Quaternion();\n        var quaternionY = new THREE.Quaternion();\n        var quaternionZ = new THREE.Quaternion();\n        var eye = eye2.clone();\n        worldRotation.copy(this.planes[\"XY\"].rotation);\n        tempQuaternion.setFromEuler(worldRotation);\n        tempMatrix.makeRotationFromQuaternion(tempQuaternion).getInverse(tempMatrix);\n        eye.applyMatrix4(tempMatrix);\n        this.traverse(function (child) {\n          tempQuaternion.setFromEuler(worldRotation);\n\n          if (child.name == \"RX\") {\n            quaternionX.setFromAxisAngle(unitX, Math.atan2(-eye.y, eye.z));\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n            child.quaternion.copy(tempQuaternion);\n          }\n\n          if (child.name == \"RY\") {\n            quaternionY.setFromAxisAngle(unitY, Math.atan2(eye.x, eye.z));\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n            child.quaternion.copy(tempQuaternion);\n          }\n\n          if (child.name == \"RZ\") {\n            quaternionZ.setFromAxisAngle(unitZ, Math.atan2(eye.y, eye.x));\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n            child.quaternion.copy(tempQuaternion);\n          }\n        });\n      }\n    };\n\n    this.show = function () {\n      this.traverse(function (child) {\n        if (scope.parent == null || scope.parent.useAllPickers || child.parent != scope.handles) child.visible = true;\n        if (child.material) child.material.opacity = child.material.oldOpacity;\n        if (child.parent == scope.pickers || child.parent == scope.hemiPicker || child.parent == scope.subPickers) child.visible = false;\n        if (child.parent == scope.planes || child.parent == scope.highlights) child.visible = false;\n      });\n      this.activePlane.visible = false;\n    };\n\n    this.highlight = function (axis) {\n      this.traverse(function (child) {\n        if (child.material && child.material.highlight) {\n          if (child.name == axis) {\n            if (child.parent == scope.highlights || child.parent == scope.handles) child.visible = true;\n            child.material.highlight(true);\n          } else {\n            child.material.highlight(false);\n            child.material.opacity = 0.1;\n          }\n        }\n      });\n    };\n\n    this.init();\n  };\n\n  THREE.TransformGizmoTranslateRotate.prototype = Object.create(THREE.TransformGizmo.prototype);\n\n  THREE.TransformGizmoScale = function () {\n    THREE.TransformGizmo.call(this);\n\n    this.setHandlePickerGizmos = function () {\n      var arrowGeometry = createArrowGeometry(0.125, 0.125, 0.125);\n      var lineXGeometry = createLineGeometry('X');\n      var lineYGeometry = createLineGeometry('Y');\n      var lineZGeometry = createLineGeometry('Z');\n      this.handleGizmos = {\n        X: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({\n          color: 0xff0000\n        })), [0.5, 0, 0], [0, 0, -Math.PI / 2]], [new THREE.Line(lineXGeometry, new GizmoLineMaterial({\n          color: 0xff0000\n        }))]],\n        Y: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({\n          color: 0x00ff00\n        })), [0, 0.5, 0]], [new THREE.Line(lineYGeometry, new GizmoLineMaterial({\n          color: 0x00ff00\n        }))]],\n        Z: [[new THREE.Mesh(arrowGeometry, new GizmoMaterial({\n          color: 0x0000ff\n        })), [0, 0, 0.5], [Math.PI / 2, 0, 0]], [new THREE.Line(lineZGeometry, new GizmoLineMaterial({\n          color: 0x0000ff\n        }))]],\n        XYZ: [[new THREE.Mesh(new THREE.BoxGeometry(0.125, 0.125, 0.125), new GizmoMaterial({\n          color: 0xffffff,\n          opacity: 0.25\n        }))]]\n      };\n      this.pickerGizmos = {\n        X: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({\n          color: 0xff0000,\n          opacity: 0.25\n        })), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n        Y: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({\n          color: 0x00ff00,\n          opacity: 0.25\n        })), [0, 0.6, 0]]],\n        Z: [[new THREE.Mesh(new THREE.CylinderGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({\n          color: 0x0000ff,\n          opacity: 0.25\n        })), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n        XYZ: [[new THREE.Mesh(new THREE.BoxGeometry(0.4, 0.4, 0.4), new GizmoMaterial({\n          color: 0xffffff,\n          opacity: 0.25\n        }))]]\n      };\n    };\n\n    this.setActivePlane = function (axis, eye) {\n      var tempMatrix = new THREE.Matrix4();\n      eye.applyMatrix4(tempMatrix.getInverse(tempMatrix.extractRotation(this.planes[\"XY\"].matrixWorld)));\n\n      if (axis == \"X\") {\n        this.activePlane = this.planes[\"XY\"];\n        if (Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes[\"XZ\"];\n      }\n\n      if (axis == \"Y\") {\n        this.activePlane = this.planes[\"XY\"];\n        if (Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes[\"YZ\"];\n      }\n\n      if (axis == \"Z\") {\n        this.activePlane = this.planes[\"XZ\"];\n        if (Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes[\"YZ\"];\n      }\n\n      if (axis == \"XYZ\") this.activePlane = this.planes[\"XYZE\"];\n      this.hide();\n      this.show();\n    };\n\n    this.init();\n  };\n\n  THREE.TransformGizmoScale.prototype = Object.create(THREE.TransformGizmo.prototype);\n\n  THREE.TransformControls = function (camera, domElement, mode) {\n    // TODO: Make non-uniform scale and rotate play nice in hierarchies\n    // TODO: ADD RXYZ contol\n    THREE.Object3D.call(this);\n    domElement = domElement !== undefined ? domElement : document;\n    this.gizmo = {};\n\n    switch (mode) {\n      case \"translate\":\n        this.gizmo[mode] = new THREE.TransformGizmoTranslate();\n        break;\n\n      case \"rotate\":\n        this.gizmo[mode] = new THREE.TransformGizmoRotate();\n        break;\n\n      case \"transrotate\":\n        this.gizmo[mode] = new THREE.TransformGizmoTranslateRotate();\n        break;\n\n      case \"scale\":\n        this.gizmo[mode] = new THREE.TransformGizmoScale();\n        break;\n    }\n\n    this.add(this.gizmo[mode]);\n    this.gizmo[mode].hide();\n    this.object = undefined;\n    this.snap = null;\n    this.snapDelta = 0;\n    this.space = \"world\";\n    this.size = 1;\n    this.axis = null;\n    this.useAllPickers = true;\n    this.unitX = new THREE.Vector3(1, 0, 0);\n    this.unitY = new THREE.Vector3(0, 1, 0);\n    this.unitZ = new THREE.Vector3(0, 0, 1);\n    this.normal = new THREE.Vector3(0, 0, 1);\n\n    if (mode === \"transrotate\") {\n      var geometry = new THREE.Geometry();\n      geometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1));\n      var material = new THREE.LineBasicMaterial({\n        color: 0x000000,\n        linewidth: 2,\n        depthTest: false\n      });\n      this.startLine = new THREE.Line(geometry, material);\n      var geometry = new THREE.Geometry();\n      var material = new THREE.LineBasicMaterial({\n        color: 0xffe603,\n        linewidth: 2,\n        depthTest: false\n      });\n      geometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1));\n      this.endLine = new THREE.Line(geometry, material);\n      var geometry = new THREE.Geometry();\n      var material = new THREE.LineDashedMaterial({\n        color: 0x000000,\n        linewidth: 1,\n        depthTest: false\n      });\n      geometry.vertices.push(new THREE.Vector3(0, -1, 0), new THREE.Vector3(0, 1, 0));\n      this.centerLine = new THREE.Line(geometry, material);\n      var map = THREE.ImageUtils.loadTexture(Autodesk.Viewing.Private.getResourceUrl(\"res/textures/centerMarker_X.png\"));\n      map.magFilter = map.minFilter = THREE.NearestFilter;\n      var geometry = new THREE.CircleGeometry(0.1, 32);\n      var material = new THREE.MeshBasicMaterial({\n        opacity: 1,\n        side: THREE.DoubleSide,\n        transparent: true,\n        map: map\n      });\n      this.centerMark = new THREE.Mesh(geometry, material);\n      this.centerMark.rotation.set(Math.PI / 2, 0, 0);\n      this.ticks = {};\n      var map = THREE.ImageUtils.loadTexture(Autodesk.Viewing.Private.getResourceUrl(\"res/textures/cardinalPoint.png\"));\n      map.magFilter = map.minFilter = THREE.NearestFilter;\n      var material = new THREE.MeshBasicMaterial({\n        depthTest: false,\n        opacity: 1,\n        transparent: true,\n        side: THREE.DoubleSide,\n        map: map\n      });\n      var w = 0.12,\n          h = 0.25,\n          d = 1.15;\n      this.ticks[\"RX\"] = new THREE.Object3D();\n      var geometry = new THREE.PlaneBufferGeometry(w, h);\n      var mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(0, 0, -d - h / 2);\n      mesh.rotation.set(Math.PI / 2, Math.PI / 2, 0);\n      this.ticks[\"RX\"].add(mesh);\n      mesh = mesh.clone();\n      mesh.position.set(0, d + h / 2, 0);\n      mesh.rotation.set(0, Math.PI / 2, 0);\n      this.ticks[\"RX\"].add(mesh);\n      mesh = mesh.clone();\n      mesh.position.set(0, 0, d + h / 2);\n      mesh.rotation.set(0, Math.PI / 2, Math.PI / 2);\n      this.ticks[\"RX\"].add(mesh);\n      mesh = mesh.clone();\n      mesh.position.set(0, -d - h / 2, 0);\n      mesh.rotation.set(0, Math.PI / 2, 0);\n      this.ticks[\"RX\"].add(mesh);\n      this.ticks[\"RY\"] = new THREE.Object3D();\n      mesh = mesh.clone();\n      mesh.position.set(0, 0, -d - h / 2);\n      mesh.rotation.set(Math.PI / 2, 0, 0);\n      this.ticks[\"RY\"].add(mesh);\n      mesh = mesh.clone();\n      mesh.position.set(-d - h / 2, 0, 0);\n      mesh.rotation.set(Math.PI / 2, 0, Math.PI / 2);\n      this.ticks[\"RY\"].add(mesh);\n      mesh = mesh.clone();\n      mesh.position.set(0, 0, d + h / 2);\n      mesh.rotation.set(Math.PI / 2, 0, 0);\n      this.ticks[\"RY\"].add(mesh);\n      mesh = mesh.clone();\n      mesh.position.set(d + h / 2, 0, 0);\n      mesh.rotation.set(Math.PI / 2, 0, Math.PI / 2);\n      this.ticks[\"RY\"].add(mesh);\n    }\n\n    var scope = this;\n    var _dragging = false;\n    var _mode = mode;\n    var _plane = \"XY\";\n    var changeEvent = {\n      type: \"change\"\n    };\n    var mouseDownEvent = {\n      type: \"mouseDown\"\n    };\n    var mouseUpEvent = {\n      type: \"mouseUp\",\n      mode: _mode\n    };\n    var objectChangeEvent = {\n      type: \"objectChange\"\n    };\n    var ray = new THREE.Raycaster();\n    var pointerVector = new THREE.Vector3();\n    var pointerDir = new THREE.Vector3();\n    var point = new THREE.Vector3();\n    var offset = new THREE.Vector3();\n    var rotation = new THREE.Vector3();\n    var offsetRotation = new THREE.Vector3();\n    var scale = 1;\n    var lookAtMatrix = new THREE.Matrix4();\n    var eye = new THREE.Vector3();\n    var tempMatrix = new THREE.Matrix4();\n    var tempVector = new THREE.Vector3();\n    var tempQuaternion = new THREE.Quaternion();\n    var projX = new THREE.Vector3();\n    var projY = new THREE.Vector3();\n    var projZ = new THREE.Vector3();\n    var quaternionXYZ = new THREE.Quaternion();\n    var quaternionX = new THREE.Quaternion();\n    var quaternionY = new THREE.Quaternion();\n    var quaternionZ = new THREE.Quaternion();\n    var quaternionE = new THREE.Quaternion();\n    var oldPosition = new THREE.Vector3();\n    var oldScale = new THREE.Vector3();\n    var oldRotationMatrix = new THREE.Matrix4();\n    var parentRotationMatrix = new THREE.Matrix4();\n    var parentScale = new THREE.Vector3();\n    var worldPosition = new THREE.Vector3();\n    var worldRotation = new THREE.Euler();\n    var worldRotationMatrix = new THREE.Matrix4();\n    var camPosition = new THREE.Vector3();\n    var camRotation = new THREE.Euler();\n\n    this.attach = function (object) {\n      scope.object = object;\n\n      this.gizmo[_mode].show();\n\n      scope.update();\n      scope.updateUnitVectors();\n    };\n\n    this.detach = function (object) {\n      scope.object = undefined;\n      this.axis = null;\n\n      this.gizmo[_mode].hide();\n    };\n\n    this.setMode = function (mode) {\n      _mode = mode ? mode : _mode;\n      if (_mode == \"scale\") scope.space = \"local\";\n\n      this.gizmo[_mode].show();\n\n      this.update();\n      scope.dispatchEvent(changeEvent);\n    };\n\n    this.getPicker = function () {\n      return scope.gizmo[_mode].hemiPicker.children;\n    };\n\n    this.setPosition = function (position) {\n      this.object.position.copy(position);\n      this.update();\n    };\n\n    this.setNormal = function (normal) {\n      tempQuaternion.setFromUnitVectors(this.normal, normal);\n      this.unitX.applyQuaternion(tempQuaternion);\n      this.unitY.applyQuaternion(tempQuaternion);\n      this.unitZ.applyQuaternion(tempQuaternion);\n      this.normal.copy(normal);\n\n      if (this.object) {\n        this.object.quaternion.multiply(tempQuaternion);\n      }\n\n      this.update();\n    };\n\n    this.setSnap = function (snap, delta) {\n      scope.snap = snap;\n      scope.snapDelta = delta;\n    };\n\n    this.setSize = function (size) {\n      scope.size = size;\n      this.update();\n      scope.dispatchEvent(changeEvent);\n    };\n\n    this.setSpace = function (space) {\n      scope.space = space;\n      this.update();\n      scope.dispatchEvent(changeEvent);\n    };\n\n    this.update = function (highlight) {\n      if (scope.object === undefined) return;\n      scope.object.updateMatrixWorld();\n      worldPosition.setFromMatrixPosition(scope.object.matrixWorld);\n      worldRotation.setFromRotationMatrix(tempMatrix.extractRotation(scope.object.matrixWorld));\n      camera.updateMatrixWorld();\n      camPosition.setFromMatrixPosition(camera.matrixWorld); //camRotation.setFromRotationMatrix( tempMatrix.extractRotation( camera.matrixWorld ) );\n\n      this.position.copy(worldPosition);\n      this.quaternion.setFromEuler(worldRotation);\n      this.normal.set(0, 0, 1);\n      this.normal.applyEuler(worldRotation); // keep same screen height (100px)\n\n      var dist = worldPosition.distanceTo(camPosition);\n      var height = camera.isPerspective ? 2 * Math.tan(camera.fov * Math.PI / 360) * dist : dist;\n      var rect = domElement.getBoundingClientRect();\n      scale = 100 * height / rect.height;\n      this.scale.set(scale, scale, scale); //eye.copy( camPosition ).sub( worldPosition ).normalize();\n      //if ( scope.space == \"local\" )\n      //    this.gizmo[_mode].update( worldRotation, eye );\n      //else if ( scope.space == \"world\" )\n      //    this.gizmo[_mode].update( new THREE.Euler(), eye );\n\n      if (highlight) this.gizmo[_mode].highlight(scope.axis);\n    };\n\n    this.updateUnitVectors = function () {\n      this.unitX.set(1, 0, 0);\n      this.unitY.set(0, 1, 0);\n      this.unitZ.set(0, 0, 1);\n      this.unitX.applyEuler(worldRotation);\n      this.unitY.applyEuler(worldRotation);\n      this.unitZ.applyEuler(worldRotation);\n    };\n\n    this.showRotationGizmos = function (set) {\n      var handles = this.gizmo[_mode].handles.children;\n\n      for (var i = 0; i < handles.length; i++) {\n        var child = handles[i];\n        child.visible = true;\n        if (child.name.search(\"R\") !== -1) child.visible = set;\n      }\n\n      this.useAllPickers = set;\n    };\n\n    this.highlight = function () {\n      this.gizmo[_mode].highlight(this.axis || \"Z\");\n    };\n\n    this.onPointerHover = function (event) {\n      if (scope.object === undefined || _dragging === true) return false;\n      var pointer = event.pointers ? event.pointers[0] : event;\n      var intersect = intersectObjects(pointer, scope.useAllPickers ? scope.gizmo[_mode].pickers.children : scope.gizmo[_mode].subPickers.children);\n      var axis = null;\n      var mode = \"\";\n\n      if (intersect) {\n        axis = intersect.object.name;\n        mode = axis.search(\"R\") != -1 ? \"rotate\" : \"translate\";\n      }\n\n      if (scope.axis !== axis) {\n        scope.axis = axis;\n        scope.gizmo[_mode].activeMode = mode;\n        scope.update(true);\n        scope.dispatchEvent(changeEvent);\n      }\n\n      if (scope.axis === null) {\n        scope.gizmo[_mode].show();\n      }\n\n      return intersect ? true : false;\n    };\n\n    this.onPointerDown = function (event) {\n      if (scope.object === undefined || _dragging === true) return false;\n      var pointer = event.pointers ? event.pointers[0] : event;\n\n      if (event.pointerType === 'touch') {\n        var intersect = intersectObjects(pointer, scope.useAllPickers ? scope.gizmo[_mode].pickers.children : scope.gizmo[_mode].subPickers.children);\n        var axis = null;\n        var mode = \"\";\n\n        if (intersect) {\n          axis = intersect.object.name;\n          mode = axis.search(\"R\") != -1 ? \"rotate\" : \"translate\";\n        }\n\n        if (scope.axis !== axis) {\n          scope.axis = axis;\n          scope.gizmo[_mode].activeMode = mode;\n        }\n      }\n\n      var intersect = null;\n\n      if (pointer.button === 0 || pointer.button === undefined) {\n        intersect = intersectObjects(pointer, scope.useAllPickers ? scope.gizmo[_mode].pickers.children : scope.gizmo[_mode].subPickers.children);\n\n        if (intersect) {\n          scope.dispatchEvent(mouseDownEvent);\n          scope.axis = intersect.object.name;\n          scope.update();\n          eye.copy(camera.position).sub(worldPosition).normalize();\n\n          scope.gizmo[_mode].setActivePlane(scope.axis, eye);\n\n          var planeIntersect = intersectObjects(pointer, [scope.gizmo[_mode].activePlane]);\n          if (planeIntersect) offset.copy(planeIntersect.point);\n          oldPosition.copy(scope.object.position);\n          oldScale.copy(scope.object.scale);\n          oldRotationMatrix.extractRotation(scope.object.matrix);\n          worldRotationMatrix.extractRotation(scope.object.matrixWorld);\n\n          if (scope.object.parent) {\n            parentRotationMatrix.extractRotation(scope.object.parent.matrixWorld);\n            parentScale.setFromMatrixScale(tempMatrix.getInverse(scope.object.parent.matrixWorld));\n          } else {\n            parentRotationMatrix.extractRotation(scope.object.matrixWorld);\n            parentScale.setFromMatrixScale(tempMatrix.getInverse(scope.object.matrixWorld));\n          } // show rotation start line and ticks\n\n\n          if (_mode === \"transrotate\" && scope.gizmo[_mode].activeMode === \"rotate\") {\n            scope.startLine.geometry.vertices[0].set(0, 0, 0).applyMatrix4(scope.matrixWorld);\n            scope.startLine.geometry.vertices[1].set(0, 0, 1).applyMatrix4(scope.matrixWorld);\n            scope.startLine.geometry.verticesNeedUpdate = true;\n            scope.parent.add(scope.startLine);\n            var pos = scope.object.geometry.getAttribute('position');\n            var pt1 = new THREE.Vector3().fromAttribute(pos, 0).applyMatrix4(scope.object.matrixWorld);\n            var pt2 = new THREE.Vector3().fromAttribute(pos, 1).applyMatrix4(scope.object.matrixWorld);\n            var pt3 = new THREE.Vector3().fromAttribute(pos, 2).applyMatrix4(scope.object.matrixWorld);\n            var pt4 = new THREE.Vector3().fromAttribute(pos, 3).applyMatrix4(scope.object.matrixWorld);\n\n            if (scope.axis === \"RX\") {\n              pt1.lerp(pt3, 0.5);\n              pt2.lerp(pt4, 0.5);\n              var dist = pt1.distanceTo(pt2);\n              scope.centerLine.material.dashSize = dist / 15;\n              scope.centerLine.material.gapSize = dist / 30;\n              scope.centerLine.geometry.vertices[0].copy(pt1);\n              scope.centerLine.geometry.vertices[1].copy(pt2);\n            } else {\n              pt1.lerp(pt2, 0.5);\n              pt3.lerp(pt4, 0.5);\n              var dist = pt1.distanceTo(pt3);\n              scope.centerLine.material.dashSize = dist / 15;\n              scope.centerLine.material.gapSize = dist / 30;\n              scope.centerLine.geometry.vertices[0].copy(pt1);\n              scope.centerLine.geometry.vertices[1].copy(pt3);\n            }\n\n            scope.centerLine.geometry.computeLineDistances();\n            scope.centerLine.geometry.verticesNeedUpdate = true;\n            scope.parent.add(scope.centerLine);\n            scope.ticks[scope.axis].position.copy(scope.position);\n            scope.ticks[scope.axis].quaternion.copy(scope.quaternion);\n            scope.ticks[scope.axis].scale.copy(scope.scale);\n            scope.parent.add(scope.ticks[scope.axis]);\n          }\n        }\n      }\n\n      _dragging = true;\n      return intersect ? true : false;\n    };\n\n    this.onPointerMove = function (event) {\n      if (scope.object === undefined || scope.axis === null || _dragging === false) return false;\n      var pointer = event.pointers ? event.pointers[0] : event;\n      var planeIntersect = intersectObjects(pointer, [scope.gizmo[_mode].activePlane]);\n      if (planeIntersect) point.copy(planeIntersect.point);\n      var mode = scope.gizmo[_mode].activeMode;\n\n      if (mode == \"translate\") {\n        point.sub(offset);\n        point.multiply(parentScale);\n\n        if (scope.space == \"local\") {\n          point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n          projX.copy(this.unitX);\n          projY.copy(this.unitY);\n          projZ.copy(this.unitZ);\n          tempVector.set(0, 0, 0);\n\n          if (scope.axis.search(\"X\") != -1) {\n            projX.multiplyScalar(point.dot(this.unitX));\n            tempVector.add(projX);\n          }\n\n          if (scope.axis.search(\"Y\") != -1) {\n            projY.multiplyScalar(point.dot(this.unitY));\n            tempVector.add(projY);\n          }\n\n          if (scope.axis.search(\"Z\") != -1) {\n            projZ.multiplyScalar(point.dot(this.unitZ));\n            tempVector.add(projZ);\n          }\n\n          point.copy(tempVector);\n          point.applyMatrix4(oldRotationMatrix);\n          scope.object.position.copy(oldPosition);\n          scope.object.position.add(point);\n        }\n\n        if (scope.space == \"world\" || scope.axis.search(\"XYZ\") != -1) {\n          projX.copy(this.unitX);\n          projY.copy(this.unitY);\n          projZ.copy(this.unitZ);\n          tempVector.set(0, 0, 0);\n\n          if (scope.axis.search(\"X\") != -1) {\n            projX.multiplyScalar(point.dot(this.unitX));\n            tempVector.add(projX);\n          }\n\n          if (scope.axis.search(\"Y\") != -1) {\n            projY.multiplyScalar(point.dot(this.unitY));\n            tempVector.add(projY);\n          }\n\n          if (scope.axis.search(\"Z\") != -1) {\n            projZ.multiplyScalar(point.dot(this.unitZ));\n            tempVector.add(projZ);\n          }\n\n          point.copy(tempVector);\n          point.applyMatrix4(tempMatrix.getInverse(parentRotationMatrix));\n          scope.object.position.copy(oldPosition);\n          scope.object.position.add(point);\n        }\n      } else if (mode == \"scale\") {\n        point.sub(offset);\n        point.multiply(parentScale);\n\n        if (scope.space == \"local\") {\n          if (scope.axis == \"XYZ\") {\n            scale = 1 + point.y / 50;\n            scope.object.scale.x = oldScale.x * scale;\n            scope.object.scale.y = oldScale.y * scale;\n            scope.object.scale.z = oldScale.z * scale;\n          } else {\n            point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n            if (scope.axis == \"X\") scope.object.scale.x = oldScale.x * (1 + point.x / 50);\n            if (scope.axis == \"Y\") scope.object.scale.y = oldScale.y * (1 + point.y / 50);\n            if (scope.axis == \"Z\") scope.object.scale.z = oldScale.z * (1 + point.z / 50);\n          }\n        }\n      } else if (mode == \"rotate\") {\n        point.sub(worldPosition);\n        point.multiply(parentScale);\n        tempVector.copy(offset).sub(worldPosition);\n        tempVector.multiply(parentScale);\n\n        if (scope.axis == \"RE\") {\n          point.applyMatrix4(tempMatrix.getInverse(lookAtMatrix));\n          tempVector.applyMatrix4(tempMatrix.getInverse(lookAtMatrix));\n          rotation.set(Math.atan2(point.z, point.y), Math.atan2(point.x, point.z), Math.atan2(point.y, point.x));\n          offsetRotation.set(Math.atan2(tempVector.z, tempVector.y), Math.atan2(tempVector.x, tempVector.z), Math.atan2(tempVector.y, tempVector.x));\n          tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));\n          var rotz = rotation.z - offsetRotation.z;\n\n          if (scope.snap !== null) {\n            var rotsnap = Math.round(rotz / scope.snap) * scope.snap;\n\n            if (Math.abs(rotsnap - rotz) < scope.snapDelta) {\n              rotz = rotsnap;\n            }\n          }\n\n          quaternionE.setFromAxisAngle(eye, rotz);\n          quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionE);\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n          scope.object.quaternion.copy(tempQuaternion);\n        } else if (scope.axis == \"RXYZE\") {\n          var tempAxis = point.clone().cross(tempVector).normalize(); // rotation axis\n\n          tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));\n          var rot = -point.clone().angleTo(tempVector);\n\n          if (scope.snap !== null) {\n            var rotsnap = Math.round(rot / scope.snap) * scope.snap;\n\n            if (Math.abs(rotsnap - rot) < scope.snapDelta) {\n              rot = rotsnap;\n            }\n          }\n\n          quaternionX.setFromAxisAngle(tempAxis, rot);\n          quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n          scope.object.quaternion.copy(tempQuaternion);\n        } else if (scope.space == \"local\") {\n          point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n          tempVector.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n          var projx = point.dot(this.unitX),\n              projy = point.dot(this.unitY),\n              projz = point.dot(this.unitZ);\n          var tempx = tempVector.dot(this.unitX),\n              tempy = tempVector.dot(this.unitY),\n              tempz = tempVector.dot(this.unitZ);\n          rotation.set(Math.atan2(projz, projy), Math.atan2(projx, projz), Math.atan2(projy, projx));\n          offsetRotation.set(Math.atan2(tempz, tempy), Math.atan2(tempx, tempz), Math.atan2(tempy, tempx));\n          var rotx = rotation.x - offsetRotation.x;\n          var roty = rotation.y - offsetRotation.y;\n          var rotz = rotation.z - offsetRotation.z;\n\n          if (scope.snap !== null) {\n            if (scope.axis.search(\"X\") != -1) {\n              var rotsnap = Math.round(rotx / scope.snap) * scope.snap;\n\n              if (Math.abs(rotsnap - rotx) < scope.snapDelta) {\n                rotx = rotsnap;\n              }\n            }\n\n            if (scope.axis.search(\"Y\") != -1) {\n              var rotsnap = Math.round(roty / scope.snap) * scope.snap;\n\n              if (Math.abs(rotsnap - roty) < scope.snapDelta) {\n                roty = rotsnap;\n              }\n            }\n\n            if (scope.axis.search(\"Z\") != -1) {\n              var rotsnap = Math.round(rotz / scope.snap) * scope.snap;\n\n              if (Math.abs(rotsnap - rotz) < scope.snapDelta) {\n                rotz = rotsnap;\n              }\n            }\n          }\n\n          quaternionX.setFromAxisAngle(this.unitX, rotx);\n          quaternionY.setFromAxisAngle(this.unitY, roty);\n          quaternionZ.setFromAxisAngle(this.unitZ, rotz);\n          quaternionXYZ.setFromRotationMatrix(oldRotationMatrix);\n          if (scope.axis == \"RX\") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionX);\n          if (scope.axis == \"RY\") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionY);\n          if (scope.axis == \"RZ\") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionZ);\n          scope.object.quaternion.copy(quaternionXYZ);\n        } else if (scope.space == \"world\") {\n          var projx = point.dot(this.unitX),\n              projy = point.dot(this.unitY),\n              projz = point.dot(this.unitZ);\n          var tempx = tempVector.dot(this.unitX),\n              tempy = tempVector.dot(this.unitY),\n              tempz = tempVector.dot(this.unitZ);\n          rotation.set(Math.atan2(projz, projy), Math.atan2(projx, projz), Math.atan2(projy, projx));\n          offsetRotation.set(Math.atan2(tempz, tempy), Math.atan2(tempx, tempz), Math.atan2(tempy, tempx));\n          tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));\n          var rotx = rotation.x - offsetRotation.x;\n          var roty = rotation.y - offsetRotation.y;\n          var rotz = rotation.z - offsetRotation.z;\n\n          if (scope.snap !== null) {\n            if (scope.axis.search(\"X\") != -1) {\n              var rotsnap = Math.round(rotx / scope.snap) * scope.snap;\n\n              if (Math.abs(rotsnap - rotx) < scope.snapDelta) {\n                rotx = rotsnap;\n              }\n            }\n\n            if (scope.axis.search(\"Y\") != -1) {\n              var rotsnap = Math.round(roty / scope.snap) * scope.snap;\n\n              if (Math.abs(rotsnap - roty) < scope.snapDelta) {\n                roty = rotsnap;\n              }\n            }\n\n            if (scope.axis.search(\"Z\") != -1) {\n              var rotsnap = Math.round(rotz / scope.snap) * scope.snap;\n\n              if (Math.abs(rotsnap - rotz) < scope.snapDelta) {\n                rotz = rotsnap;\n              }\n            }\n          }\n\n          quaternionX.setFromAxisAngle(this.unitX, rotx);\n          quaternionY.setFromAxisAngle(this.unitY, roty);\n          quaternionZ.setFromAxisAngle(this.unitZ, rotz);\n          quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n          if (scope.axis == \"RX\") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n          if (scope.axis == \"RY\") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n          if (scope.axis == \"RZ\") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n          tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n          scope.object.quaternion.copy(tempQuaternion);\n        } // show rotation end line\n\n\n        if (_mode === \"transrotate\") {\n          scope.add(scope.endLine);\n          scope.add(scope.centerMark);\n        }\n      } // update matrix\n\n\n      scope.object.matrixAutoUpdate = true;\n      scope.update(true);\n      scope.dispatchEvent(changeEvent);\n      scope.dispatchEvent(objectChangeEvent);\n      return planeIntersect ? true : false;\n    };\n\n    this.onPointerUp = function (event) {\n      if (_dragging && scope.axis !== null) {\n        mouseUpEvent.mode = _mode;\n        scope.dispatchEvent(mouseUpEvent);\n      }\n\n      _dragging = false;\n\n      this.gizmo[_mode].show();\n\n      this.updateUnitVectors(); // remove rotation start/end lines\n\n      if (_mode === \"transrotate\" && this.gizmo[_mode].activeMode === \"rotate\") {\n        this.remove(this.endLine);\n        this.remove(this.centerMark);\n        this.parent.remove(this.centerLine);\n        this.parent.remove(this.startLine);\n        this.parent.remove(this.ticks[this.axis]);\n      }\n\n      return false;\n    };\n\n    function intersectObjects(pointer, objects) {\n      var rect = domElement.getBoundingClientRect();\n      var x = (pointer.clientX - rect.left) / rect.width * 2 - 1;\n      var y = -((pointer.clientY - rect.top) / rect.height) * 2 + 1;\n\n      if (camera.isPerspective) {\n        pointerVector.set(x, y, 0.5);\n        pointerVector.unproject(camera);\n        ray.set(camera.position, pointerVector.sub(camera.position).normalize());\n      } else {\n        pointerVector.set(x, y, -1);\n        pointerVector.unproject(camera);\n        pointerDir.set(0, 0, -1);\n        ray.set(pointerVector, pointerDir.transformDirection(camera.matrixWorld));\n      }\n\n      var intersections = ray.intersectObjects(objects, true);\n      return intersections[0] ? intersections[0] : false;\n    }\n  };\n\n  THREE.TransformControls.prototype = Object.create(THREE.Object3D.prototype);\n})();","map":{"version":3,"sources":["E:\\GitHub\\FrogeCsConfiguratorRivetec\\Vyvoj\\src\\js\\extensions\\Viewing.Extension.ModelTransformer\\TransformGizmos.js"],"names":["Autodesk","window","THREE","init_TransformGizmos","GizmoMaterial","parameters","MeshBasicMaterial","call","depthTest","depthWrite","side","FrontSide","transparent","setValues","oldColor","color","clone","oldOpacity","opacity","highlight","highlighted","setRGB","copy","prototype","Object","create","GizmoLineMaterial","LineBasicMaterial","linewidth","PolyhedronGeometry","undefined","vertices","indices","radius","detail","Geometry","type","that","i","l","length","prepare","Vector3","midpoints","p","faces","j","v1","v2","v3","Face3","index","centroid","subdivide","faceVertexUvs","uvs","x0","x","x1","x2","max","Math","min","multiplyScalar","mergeVertices","computeFaceNormals","boundingSphere","Sphere","vector","vertex","normalize","push","u","azimuth","PI","v","inclination","uv","Vector2","make","face","add","divideScalar","azi","correctUV","cols","pow","cells","a","b","c","aj","lerp","bj","rows","k","floor","atan2","z","y","sqrt","OctahedronGeometry","TorusGeometry","tube","radialSegments","tubularSegments","arc","center","normals","cos","sin","sub","d","createCircleGeometry","facing","geometry","createArrowGeometry","radiusTop","radiusBottom","height","heightSegments","openEnded","arrowGeometry","mesh","Mesh","CylinderGeometry","position","updateMatrix","merge","matrix","createLineGeometry","axis","lineGeometry","TransformGizmo","scope","showPickers","showActivePlane","init","Object3D","handles","pickers","planes","highlights","hemiPicker","subPickers","planeGeometry","PlaneBufferGeometry","planeMaterial","wireframe","DoubleSide","activePlane","rotation","set","name","visible","setupGizmos","activeMode","traverse","child","tempGeometry","BufferGeometry","fromBufferGeometry","scale","hide","show","parent","material","addGizmos","gizmoMap","object","visble","setHandlePickerGizmos","handleGizmos","pickerGizmos","highlightGizmos","hemiPickerGizmos","subPickerGizmos","update","eye","vec1","vec2","lookAtMatrix","Matrix4","search","quaternion","setFromRotationMatrix","lookAt","setFromEuler","TransformGizmoTranslate","lineXGeometry","lineYGeometry","lineZGeometry","X","Line","Y","Z","XYZ","XY","YZ","XZ","BoxGeometry","setActivePlane","tempMatrix","applyMatrix4","getInverse","extractRotation","matrixWorld","abs","TransformGizmoRotate","RX","RY","RZ","RE","RXYZE","eye2","apply","arguments","worldRotation","Euler","tempQuaternion","Quaternion","unitX","unitY","unitZ","quaternionX","quaternionY","quaternionZ","makeRotationFromQuaternion","setFromAxisAngle","multiplyQuaternions","TransformGizmoTranslateRotate","theta","SphereGeometry","useAllPickers","TransformGizmoScale","TransformControls","camera","domElement","mode","document","gizmo","snap","snapDelta","space","size","normal","startLine","endLine","LineDashedMaterial","centerLine","map","ImageUtils","loadTexture","Viewing","Private","getResourceUrl","magFilter","minFilter","NearestFilter","CircleGeometry","centerMark","ticks","w","h","_dragging","_mode","_plane","changeEvent","mouseDownEvent","mouseUpEvent","objectChangeEvent","ray","Raycaster","pointerVector","pointerDir","point","offset","offsetRotation","tempVector","projX","projY","projZ","quaternionXYZ","quaternionE","oldPosition","oldScale","oldRotationMatrix","parentRotationMatrix","parentScale","worldPosition","worldRotationMatrix","camPosition","camRotation","attach","updateUnitVectors","detach","setMode","dispatchEvent","getPicker","children","setPosition","setNormal","setFromUnitVectors","applyQuaternion","multiply","setSnap","delta","setSize","setSpace","updateMatrixWorld","setFromMatrixPosition","applyEuler","dist","distanceTo","isPerspective","tan","fov","rect","getBoundingClientRect","showRotationGizmos","onPointerHover","event","pointer","pointers","intersect","intersectObjects","onPointerDown","pointerType","button","planeIntersect","setFromMatrixScale","verticesNeedUpdate","pos","getAttribute","pt1","fromAttribute","pt2","pt3","pt4","dashSize","gapSize","computeLineDistances","onPointerMove","dot","rotz","rotsnap","round","tempAxis","cross","rot","angleTo","projx","projy","projz","tempx","tempy","tempz","rotx","roty","matrixAutoUpdate","onPointerUp","remove","objects","clientX","left","width","clientY","top","unproject","transformDirection","intersections"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\n/// WHY I'M USING GLOBAL VARIABLES, SIMPLE I'M SETTING UP WITH REACT-SCRIPTS FOR EASIER 3RD PARTY DEVELOPER USE OF PROJECT\r\n/// https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-global-variables\r\n\r\nconst Autodesk = window.Autodesk;\r\nconst THREE = window.THREE;\r\n\r\n(function init_TransformGizmos() {\r\n\r\n  'use strict';\r\n\r\n  class GizmoMaterial {\r\n    constructor(parameters) {\r\n      THREE.MeshBasicMaterial.call(this);\r\n      this.depthTest = false;\r\n      this.depthWrite = false;\r\n      this.side = THREE.FrontSide;\r\n      this.transparent = true;\r\n      this.setValues(parameters);\r\n      this.oldColor = this.color.clone();\r\n      this.oldOpacity = this.opacity;\r\n      this.highlight = function (highlighted) {\r\n        if (highlighted) {\r\n          this.color.setRGB(1, 230 / 255, 3 / 255);\r\n          this.opacity = 1;\r\n        }\r\n        else {\r\n          this.color.copy(this.oldColor);\r\n          this.opacity = this.oldOpacity;\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  GizmoMaterial.prototype = Object.create( THREE.MeshBasicMaterial.prototype );\r\n\r\n  class GizmoLineMaterial {\r\n    constructor(parameters) {\r\n      THREE.LineBasicMaterial.call(this);\r\n      this.depthTest = false;\r\n      this.depthWrite = false;\r\n      this.transparent = true;\r\n      this.linewidth = 3;\r\n      this.setValues(parameters);\r\n      this.oldColor = this.color.clone();\r\n      this.oldOpacity = this.opacity;\r\n      this.highlight = function (highlighted) {\r\n        if (highlighted) {\r\n          this.color.setRGB(1, 230 / 255, 3 / 255);\r\n          this.opacity = 1;\r\n        }\r\n        else {\r\n          this.color.copy(this.oldColor);\r\n          this.opacity = this.oldOpacity;\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  GizmoLineMaterial.prototype = Object.create( THREE.LineBasicMaterial.prototype );\r\n\r\n  // polyfill\r\n  if (THREE.PolyhedronGeometry === undefined) {\r\n    THREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\r\n\r\n      THREE.Geometry.call( this );\r\n\r\n      this.type = 'PolyhedronGeometry';\r\n\r\n      this.parameters = {\r\n        vertices: vertices,\r\n        indices: indices,\r\n        radius: radius,\r\n        detail: detail\r\n      };\r\n\r\n      radius = radius || 1;\r\n      detail = detail || 0;\r\n\r\n      var that = this;\r\n\r\n      for ( var i = 0, l = vertices.length; i < l; i += 3 ) {\r\n\r\n        prepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\r\n\r\n      }\r\n\r\n      var midpoints = [], p = this.vertices;\r\n\r\n      var faces = [];\r\n\r\n      for ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\r\n\r\n        var v1 = p[ indices[ i     ] ];\r\n        var v2 = p[ indices[ i + 1 ] ];\r\n        var v3 = p[ indices[ i + 2 ] ];\r\n\r\n        faces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\r\n\r\n      }\r\n\r\n      var centroid = new THREE.Vector3();\r\n\r\n      for ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n        subdivide( faces[ i ], detail );\r\n\r\n      }\r\n\r\n\r\n      // Handle case when face straddles the seam\r\n\r\n      for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\r\n\r\n        var uvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n        var x0 = uvs[ 0 ].x;\r\n        var x1 = uvs[ 1 ].x;\r\n        var x2 = uvs[ 2 ].x;\r\n\r\n        var max = Math.max( x0, Math.max( x1, x2 ) );\r\n        var min = Math.min( x0, Math.min( x1, x2 ) );\r\n\r\n        if ( max > 0.9 && min < 0.1 ) { // 0.9 is somewhat arbitrary\r\n\r\n          if ( x0 < 0.2 ) uvs[ 0 ].x += 1;\r\n          if ( x1 < 0.2 ) uvs[ 1 ].x += 1;\r\n          if ( x2 < 0.2 ) uvs[ 2 ].x += 1;\r\n\r\n        }\r\n\r\n      }\r\n\r\n\r\n      // Apply radius\r\n\r\n      for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n        this.vertices[ i ].multiplyScalar( radius );\r\n\r\n      }\r\n\r\n\r\n      // Merge vertices\r\n\r\n      this.mergeVertices();\r\n\r\n      this.computeFaceNormals();\r\n\r\n      this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n\r\n      // Project vector onto sphere's surface\r\n\r\n      function prepare( vector ) {\r\n\r\n        var vertex = vector.normalize().clone();\r\n        vertex.index = that.vertices.push( vertex ) - 1;\r\n\r\n        // Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\r\n\r\n        var u = azimuth( vector ) / 2 / Math.PI + 0.5;\r\n        var v = inclination( vector ) / Math.PI + 0.5;\r\n        vertex.uv = new THREE.Vector2( u, 1 - v );\r\n\r\n        return vertex;\r\n\r\n      }\r\n\r\n\r\n      // Approximate a curved face with recursively sub-divided triangles.\r\n\r\n      function make( v1, v2, v3 ) {\r\n\r\n        var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\r\n        that.faces.push( face );\r\n\r\n        centroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\r\n\r\n        var azi = azimuth( centroid );\r\n\r\n        that.faceVertexUvs[ 0 ].push( [\r\n          correctUV( v1.uv, v1, azi ),\r\n          correctUV( v2.uv, v2, azi ),\r\n          correctUV( v3.uv, v3, azi )\r\n        ] );\r\n\r\n      }\r\n\r\n\r\n      // Analytically subdivide a face to the required detail level.\r\n\r\n      function subdivide( face, detail ) {\r\n\r\n        var cols = Math.pow(2, detail);\r\n        var cells = Math.pow(4, detail);\r\n        var a = prepare( that.vertices[ face.a ] );\r\n        var b = prepare( that.vertices[ face.b ] );\r\n        var c = prepare( that.vertices[ face.c ] );\r\n        var v = [];\r\n\r\n        // Construct all of the vertices for this subdivision.\r\n\r\n        for ( var i = 0 ; i <= cols; i ++ ) {\r\n\r\n          v[ i ] = [];\r\n\r\n          var aj = prepare( a.clone().lerp( c, i / cols ) );\r\n          var bj = prepare( b.clone().lerp( c, i / cols ) );\r\n          var rows = cols - i;\r\n\r\n          for ( var j = 0; j <= rows; j ++) {\r\n\r\n            if ( j == 0 && i == cols ) {\r\n\r\n              v[ i ][ j ] = aj;\r\n\r\n            } else {\r\n\r\n              v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\r\n\r\n            }\r\n\r\n          }\r\n\r\n        }\r\n\r\n        // Construct all of the faces.\r\n\r\n        for ( var i = 0; i < cols ; i ++ ) {\r\n\r\n          for ( var j = 0; j < 2 * (cols - i) - 1; j ++ ) {\r\n\r\n            var k = Math.floor( j / 2 );\r\n\r\n            if ( j % 2 == 0 ) {\r\n\r\n              make(\r\n                v[ i ][ k + 1],\r\n                v[ i + 1 ][ k ],\r\n                v[ i ][ k ]\r\n              );\r\n\r\n            } else {\r\n\r\n              make(\r\n                v[ i ][ k + 1 ],\r\n                v[ i + 1][ k + 1],\r\n                v[ i + 1 ][ k ]\r\n              );\r\n\r\n            }\r\n\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n\r\n      // Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n      function azimuth( vector ) {\r\n\r\n        return Math.atan2( vector.z, - vector.x );\r\n\r\n      }\r\n\r\n\r\n      // Angle above the XZ plane.\r\n\r\n      function inclination( vector ) {\r\n\r\n        return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n      }\r\n\r\n\r\n      // Texture fixing helper. Spheres have some odd behaviours.\r\n\r\n      function correctUV( uv, vector, azimuth ) {\r\n\r\n        if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\r\n        if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\r\n        return uv.clone();\r\n\r\n      }\r\n\r\n    };\r\n\r\n    THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n  }\r\n\r\n  // polyfill\r\n  if (THREE.OctahedronGeometry === undefined) {\r\n    THREE.OctahedronGeometry = function ( radius, detail ) {\r\n\r\n      this.parameters = {\r\n        radius: radius,\r\n        detail: detail\r\n      };\r\n\r\n      var vertices = [\r\n        1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0,- 1, 0,    0, 0, 1,    0, 0,- 1\r\n      ];\r\n\r\n      var indices = [\r\n        0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\r\n      ];\r\n\r\n      THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n      this.type = 'OctahedronGeometry';\r\n\r\n      this.parameters = {\r\n        radius: radius,\r\n        detail: detail\r\n      };\r\n    };\r\n\r\n    THREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n  }\r\n\r\n  // polyfill\r\n  if (THREE.TorusGeometry === undefined) {\r\n    THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n      THREE.Geometry.call( this );\r\n\r\n      this.type = 'TorusGeometry';\r\n\r\n      this.parameters = {\r\n        radius: radius,\r\n        tube: tube,\r\n        radialSegments: radialSegments,\r\n        tubularSegments: tubularSegments,\r\n        arc: arc\r\n      };\r\n\r\n      radius = radius || 100;\r\n      tube = tube || 40;\r\n      radialSegments = radialSegments || 8;\r\n      tubularSegments = tubularSegments || 6;\r\n      arc = arc || Math.PI * 2;\r\n\r\n      var center = new THREE.Vector3(), uvs = [], normals = [];\r\n\r\n      for ( var j = 0; j <= radialSegments; j ++ ) {\r\n\r\n        for ( var i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n          var u = i / tubularSegments * arc;\r\n          var v = j / radialSegments * Math.PI * 2;\r\n\r\n          center.x = radius * Math.cos( u );\r\n          center.y = radius * Math.sin( u );\r\n\r\n          var vertex = new THREE.Vector3();\r\n          vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n          vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n          vertex.z = tube * Math.sin( v );\r\n\r\n          this.vertices.push( vertex );\r\n\r\n          uvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );\r\n          normals.push( vertex.clone().sub( center ).normalize() );\r\n\r\n        }\r\n\r\n      }\r\n\r\n      for ( var j = 1; j <= radialSegments; j ++ ) {\r\n\r\n        for ( var i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n          var a = ( tubularSegments + 1 ) * j + i - 1;\r\n          var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n          var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n          var d = ( tubularSegments + 1 ) * j + i;\r\n\r\n          var face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );\r\n          this.faces.push( face );\r\n          this.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );\r\n\r\n          face = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );\r\n          this.faces.push( face );\r\n          this.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );\r\n\r\n        }\r\n\r\n      }\r\n\r\n      this.computeFaceNormals();\r\n\r\n    };\r\n\r\n    THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n  }\r\n\r\n  var createCircleGeometry = function ( radius, facing, arc ) {\r\n\r\n    var geometry = new THREE.Geometry();\r\n    arc = arc ? arc : 1;\r\n    for ( var i = 0; i <= 64 * arc; ++i ) {\r\n      if ( facing == 'x' ) geometry.vertices.push( new THREE.Vector3( 0, Math.cos( i / 32 * Math.PI ), Math.sin( i / 32 * Math.PI ) ).multiplyScalar(radius) );\r\n      if ( facing == 'y' ) geometry.vertices.push( new THREE.Vector3( Math.cos( i / 32 * Math.PI ), 0, Math.sin( i / 32 * Math.PI ) ).multiplyScalar(radius) );\r\n      if ( facing == 'z' ) geometry.vertices.push( new THREE.Vector3( Math.sin( i / 32 * Math.PI ), Math.cos( i / 32 * Math.PI ), 0 ).multiplyScalar(radius) );\r\n    }\r\n\r\n    return geometry;\r\n  };\r\n\r\n  var createArrowGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded ) {\r\n\r\n    var arrowGeometry = new THREE.Geometry();\r\n    var mesh = new THREE.Mesh( new THREE.CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded ) );\r\n    mesh.position.y = 0.5;\r\n    mesh.updateMatrix();\r\n\r\n    arrowGeometry.merge( mesh.geometry, mesh.matrix );\r\n\r\n    return arrowGeometry;\r\n  };\r\n\r\n  var createLineGeometry = function ( axis ) {\r\n\r\n    var lineGeometry = new THREE.Geometry();\r\n    if ( axis === 'X')\r\n      lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 1, 0, 0 ) );\r\n    else if ( axis === 'Y' )\r\n      lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );\r\n    else if ( axis === 'Z' )\r\n      lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 0, 1 ) );\r\n\r\n    return lineGeometry;\r\n  };\r\n\r\n  THREE.TransformGizmo = function () {\r\n\r\n    var scope = this;\r\n    var showPickers = false; //debug\r\n    var showActivePlane = false; //debug\r\n\r\n    this.init = function () {\r\n\r\n      THREE.Object3D.call( this );\r\n\r\n      this.handles = new THREE.Object3D();\r\n      this.pickers = new THREE.Object3D();\r\n      this.planes = new THREE.Object3D();\r\n      this.highlights = new THREE.Object3D();\r\n      this.hemiPicker = new THREE.Object3D();\r\n      this.subPickers = new THREE.Object3D();\r\n\r\n      this.add(this.handles);\r\n      this.add(this.pickers);\r\n      this.add(this.planes);\r\n      this.add(this.highlights);\r\n      this.add(this.hemiPicker);\r\n      this.add(this.subPickers);\r\n\r\n      //// PLANES\r\n\r\n      var planeGeometry = new THREE.PlaneBufferGeometry( 50, 50, 2, 2 );\r\n      var planeMaterial = new THREE.MeshBasicMaterial( { wireframe: true } );\r\n      planeMaterial.side = THREE.DoubleSide;\r\n\r\n      var planes = {\r\n        \"XY\":   new THREE.Mesh( planeGeometry, planeMaterial ),\r\n        \"YZ\":   new THREE.Mesh( planeGeometry, planeMaterial ),\r\n        \"XZ\":   new THREE.Mesh( planeGeometry, planeMaterial ),\r\n        \"XYZE\": new THREE.Mesh( planeGeometry, planeMaterial )\r\n      };\r\n\r\n      this.activePlane = planes[\"XYZE\"];\r\n\r\n      planes[\"YZ\"].rotation.set( 0, Math.PI/2, 0 );\r\n      planes[\"XZ\"].rotation.set( -Math.PI/2, 0, 0 );\r\n\r\n      for (var i in planes) {\r\n        planes[i].name = i;\r\n        this.planes.add(planes[i]);\r\n        this.planes[i] = planes[i];\r\n        planes[i].visible = false;\r\n      }\r\n\r\n      this.setupGizmos();\r\n      this.activeMode = \"\";\r\n\r\n      // reset Transformations\r\n\r\n      this.traverse(function ( child ) {\r\n        if (child instanceof THREE.Mesh) {\r\n          child.updateMatrix();\r\n\r\n          var tempGeometry = new THREE.Geometry();\r\n          if (child.geometry instanceof THREE.BufferGeometry) {\r\n            child.geometry = new THREE.Geometry().fromBufferGeometry( child.geometry );\r\n          }\r\n          tempGeometry.merge( child.geometry, child.matrix );\r\n\r\n          child.geometry = tempGeometry;\r\n          child.position.set( 0, 0, 0 );\r\n          child.rotation.set( 0, 0, 0 );\r\n          child.scale.set( 1, 1, 1 );\r\n        }\r\n      });\r\n\r\n    };\r\n\r\n    this.hide = function () {\r\n      this.traverse(function( child ) {\r\n        child.visible = false;\r\n      });\r\n    };\r\n\r\n    this.show = function () {\r\n      this.traverse(function( child ) {\r\n        child.visible = true;\r\n        if (child.parent == scope.pickers || child.parent == scope.hemiPicker ) child.visible = showPickers;\r\n        if (child.parent == scope.planes ) child.visible = false;\r\n      });\r\n      this.activePlane.visible = showActivePlane;\r\n    };\r\n\r\n    this.highlight = function ( axis ) {\r\n      this.traverse(function( child ) {\r\n        if ( child.material && child.material.highlight ) {\r\n          if ( child.name == axis ) {\r\n            child.material.highlight( true );\r\n          } else {\r\n            child.material.highlight( false );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    this.setupGizmos = function () {\r\n\r\n      var addGizmos = function( gizmoMap, parent ) {\r\n\r\n        for ( var name in gizmoMap ) {\r\n\r\n          for ( var i = gizmoMap[name].length; i--;) {\r\n\r\n            var object = gizmoMap[name][i][0];\r\n            var position = gizmoMap[name][i][1];\r\n            var rotation = gizmoMap[name][i][2];\r\n            var visble = gizmoMap[name][i][3];\r\n\r\n            object.name = name;\r\n\r\n            if ( position ) object.position.set( position[0], position[1], position[2] );\r\n            if ( rotation ) object.rotation.set( rotation[0], rotation[1], rotation[2] );\r\n            if ( visble ) object.visble = visble;\r\n\r\n            parent.add( object );\r\n\r\n          }\r\n\r\n        }\r\n\r\n      };\r\n\r\n      this.setHandlePickerGizmos();\r\n\r\n      addGizmos(this.handleGizmos, this.handles);\r\n      addGizmos(this.pickerGizmos, this.pickers);\r\n      addGizmos(this.highlightGizmos, this.highlights);\r\n      addGizmos(this.hemiPickerGizmos, this.hemiPicker);\r\n      addGizmos(this.subPickerGizmos, this.subPickers);\r\n\r\n      this.hide();\r\n      this.show();\r\n\r\n    };\r\n\r\n  };\r\n\r\n  THREE.TransformGizmo.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\n  THREE.TransformGizmo.prototype.update = function ( rotation, eye ) {\r\n\r\n    var vec1 = new THREE.Vector3( 0, 0, 0 );\r\n    var vec2 = new THREE.Vector3( 0, 1, 0 );\r\n    var lookAtMatrix = new THREE.Matrix4();\r\n\r\n    this.traverse(function(child) {\r\n      if ( child.name ) {\r\n        if ( child.name.search(\"E\") != -1 ) {\r\n          child.quaternion.setFromRotationMatrix( lookAtMatrix.lookAt( eye, vec1, vec2 ) );\r\n        } else if ( child.name.search(\"X\") != -1 || child.name.search(\"Y\") != -1 || child.name.search(\"Z\") != -1 ) {\r\n          child.quaternion.setFromEuler( rotation );\r\n        }\r\n      }\r\n    });\r\n\r\n  };\r\n\r\n  THREE.TransformGizmoTranslate = function () {\r\n\r\n    THREE.TransformGizmo.call( this );\r\n\r\n    this.setHandlePickerGizmos = function () {\r\n\r\n      var arrowGeometry = createArrowGeometry( 0, 0.05, 0.2, 12, 1, false );\r\n      var lineXGeometry = createLineGeometry( 'X' );\r\n      var lineYGeometry = createLineGeometry( 'Y' );\r\n      var lineZGeometry = createLineGeometry( 'Z' );\r\n\r\n      this.handleGizmos = {\r\n        X: [\r\n          [ new THREE.Mesh( arrowGeometry, new GizmoMaterial( { color: 0xf12c2c } ) ), [ 0.5, 0, 0 ], [ 0, 0, -Math.PI/2 ] ],\r\n          [ new THREE.Line( lineXGeometry, new GizmoLineMaterial( { color: 0xf12c2c } ) ) ]\r\n        ],\r\n        Y: [\r\n          [ new THREE.Mesh( arrowGeometry, new GizmoMaterial( { color: 0x0bb80b } ) ), [ 0, 0.5, 0 ] ],\r\n          [   new THREE.Line( lineYGeometry, new GizmoLineMaterial( { color: 0x0bb80b } ) ) ]\r\n        ],\r\n        Z: [\r\n          [ new THREE.Mesh( arrowGeometry, new GizmoMaterial( { color: 0x2c2cf1 } ) ), [ 0, 0, 0.5 ], [ Math.PI/2, 0, 0 ] ],\r\n          [ new THREE.Line( lineZGeometry, new GizmoLineMaterial( { color: 0x2c2cf1 } ) ) ]\r\n        ],\r\n        XYZ: [\r\n          [ new THREE.Mesh( new THREE.OctahedronGeometry( 0.1, 0 ), new GizmoMaterial( { color: 0xffffff, opacity: 0.25 } ) ), [ 0, 0, 0 ], [ 0, 0, 0 ] ]\r\n        ],\r\n        XY: [\r\n          [ new THREE.Mesh( new THREE.PlaneBufferGeometry( 0.29, 0.29 ), new GizmoMaterial( { color: 0xffff00, opacity: 0.25 } ) ), [ 0.15, 0.15, 0 ] ]\r\n        ],\r\n        YZ: [\r\n          [ new THREE.Mesh( new THREE.PlaneBufferGeometry( 0.29, 0.29 ), new GizmoMaterial( { color: 0x00ffff, opacity: 0.25 } ) ), [ 0, 0.15, 0.15 ], [ 0, Math.PI/2, 0 ] ]\r\n        ],\r\n        XZ: [\r\n          [ new THREE.Mesh( new THREE.PlaneBufferGeometry( 0.29, 0.29 ), new GizmoMaterial( { color: 0xff00ff, opacity: 0.25 } ) ), [ 0.15, 0, 0.15 ], [ -Math.PI/2, 0, 0 ] ]\r\n        ]\r\n      };\r\n\r\n      this.pickerGizmos = {\r\n        X: [\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.2, 0, 1, 4, 1, false ), new GizmoMaterial( { color: 0xff0000, opacity: 0.25 } ) ), [ 0.6, 0, 0 ], [ 0, 0, -Math.PI/2 ] ]\r\n        ],\r\n        Y: [\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.2, 0, 1, 4, 1, false ), new GizmoMaterial( { color: 0x00ff00, opacity: 0.25 } ) ), [ 0, 0.6, 0 ] ]\r\n        ],\r\n        Z: [\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.2, 0, 1, 4, 1, false ), new GizmoMaterial( { color: 0x0000ff, opacity: 0.25 } ) ), [ 0, 0, 0.6 ], [ Math.PI/2, 0, 0 ] ]\r\n        ],\r\n        XYZ: [\r\n          [ new THREE.Mesh( new THREE.OctahedronGeometry( 0.2, 0 ), new GizmoMaterial( { color: 0xffffff, opacity: 0.25 } ) ) ]\r\n        ],\r\n        XY: [\r\n          [ new THREE.Mesh( new THREE.PlaneBufferGeometry( 0.4, 0.4 ), new GizmoMaterial( { color: 0xffff00, opacity: 0.25 } ) ), [ 0.2, 0.2, 0 ] ]\r\n        ],\r\n        YZ: [\r\n          [ new THREE.Mesh( new THREE.PlaneBufferGeometry( 0.4, 0.4 ), new GizmoMaterial( { color: 0x00ffff, opacity: 0.25 } ) ), [ 0, 0.2, 0.2 ], [ 0, Math.PI/2, 0 ] ]\r\n        ],\r\n        XZ: [\r\n          [ new THREE.Mesh( new THREE.PlaneBufferGeometry( 0.4, 0.4 ), new GizmoMaterial( { color: 0xff00ff, opacity: 0.25 } ) ), [ 0.2, 0, 0.2 ], [ -Math.PI/2, 0, 0 ] ]\r\n        ]\r\n      };\r\n\r\n      this.hemiPickerGizmos = {\r\n        XYZ: [\r\n          [ new THREE.Mesh( new THREE.BoxGeometry( 1.2, 1.2, 1.2 ), new GizmoMaterial( { color: 0x0000ff } ) ), [ 0.5, 0.5, 0.5 ], null, false ]\r\n        ]\r\n      };\r\n\r\n    };\r\n\r\n    this.setActivePlane = function ( axis, eye ) {\r\n\r\n      var tempMatrix = new THREE.Matrix4();\r\n      eye.applyMatrix4( tempMatrix.getInverse( tempMatrix.extractRotation( this.planes[ \"XY\" ].matrixWorld ) ) );\r\n\r\n      if ( axis == \"X\" ) {\r\n        this.activePlane = this.planes[ \"XY\" ];\r\n        if ( Math.abs(eye.y) > Math.abs(eye.z) ) this.activePlane = this.planes[ \"XZ\" ];\r\n      }\r\n\r\n      if ( axis == \"Y\" ){\r\n        this.activePlane = this.planes[ \"XY\" ];\r\n        if ( Math.abs(eye.x) > Math.abs(eye.z) ) this.activePlane = this.planes[ \"YZ\" ];\r\n      }\r\n\r\n      if ( axis == \"Z\" ){\r\n        this.activePlane = this.planes[ \"XZ\" ];\r\n        if ( Math.abs(eye.x) > Math.abs(eye.y) ) this.activePlane = this.planes[ \"YZ\" ];\r\n      }\r\n\r\n      if ( axis == \"XYZ\" ) this.activePlane = this.planes[ \"XYZE\" ];\r\n\r\n      if ( axis == \"XY\" ) this.activePlane = this.planes[ \"XY\" ];\r\n\r\n      if ( axis == \"YZ\" ) this.activePlane = this.planes[ \"YZ\" ];\r\n\r\n      if ( axis == \"XZ\" ) this.activePlane = this.planes[ \"XZ\" ];\r\n\r\n      this.hide();\r\n      this.show();\r\n\r\n    };\r\n\r\n    this.init();\r\n\r\n  };\r\n\r\n  THREE.TransformGizmoTranslate.prototype = Object.create( THREE.TransformGizmo.prototype );\r\n\r\n  THREE.TransformGizmoRotate = function () {\r\n\r\n    THREE.TransformGizmo.call( this );\r\n\r\n    this.setHandlePickerGizmos = function () {\r\n\r\n      this.handleGizmos = {\r\n        RX: [\r\n          [ new THREE.Line( createCircleGeometry(1,'x',0.5), new GizmoLineMaterial( { color: 0xff0000 } ) ) ]\r\n        ],\r\n        RY: [\r\n          [ new THREE.Line( createCircleGeometry(1,'y',0.5), new GizmoLineMaterial( { color: 0x00ff00 } ) ) ]\r\n        ],\r\n        RZ: [\r\n          [ new THREE.Line( createCircleGeometry(1,'z',0.5), new GizmoLineMaterial( { color: 0x0000ff } ) ) ]\r\n        ],\r\n        RE: [\r\n          [ new THREE.Line( createCircleGeometry(1.25,'z',1), new GizmoLineMaterial( { color: 0x00ffff } ) ) ]\r\n        ],\r\n        RXYZE: [\r\n          [ new THREE.Line( createCircleGeometry(1,'z',1), new GizmoLineMaterial( { color: 0xff00ff } ) ) ]\r\n        ]\r\n      };\r\n\r\n      this.pickerGizmos = {\r\n        RX: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1, 0.12, 4, 12, Math.PI ), new GizmoMaterial( { color: 0xff0000, opacity: 0.25 } ) ), [ 0, 0, 0 ], [ 0, -Math.PI/2, -Math.PI/2 ] ]\r\n        ],\r\n        RY: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1, 0.12, 4, 12, Math.PI ), new GizmoMaterial( { color: 0x00ff00, opacity: 0.25 } ) ), [ 0, 0, 0 ], [ Math.PI/2, 0, 0 ] ]\r\n        ],\r\n        RZ: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1, 0.12, 4, 12, Math.PI ), new GizmoMaterial( { color: 0x0000ff, opacity: 0.25 } ) ), [ 0, 0, 0 ], [ 0, 0, -Math.PI/2 ] ]\r\n        ],\r\n        RE: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1.25, 0.12, 2, 24 ), new GizmoMaterial( { color: 0x00ffff, opacity: 0.25 } ) ) ]\r\n        ],\r\n        RXYZE: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1, 0.12, 2, 24 ), new GizmoMaterial( { color: 0xff00ff, opacity: 0.25 } ) ) ]\r\n        ]\r\n      };\r\n\r\n    };\r\n\r\n    this.setActivePlane = function ( axis ) {\r\n\r\n      if ( axis == \"RE\" ) this.activePlane = this.planes[ \"XYZE\" ];\r\n\r\n      if ( axis == \"RX\" ) this.activePlane = this.planes[ \"YZ\" ];\r\n\r\n      if ( axis == \"RY\" ) this.activePlane = this.planes[ \"XZ\" ];\r\n\r\n      if ( axis == \"RZ\" ) this.activePlane = this.planes[ \"XY\" ];\r\n\r\n      this.hide();\r\n      this.show();\r\n\r\n    };\r\n\r\n    this.update = function ( rotation, eye2 ) {\r\n\r\n      THREE.TransformGizmo.prototype.update.apply( this, arguments );\r\n\r\n      var tempMatrix = new THREE.Matrix4();\r\n      var worldRotation = new THREE.Euler( 0, 0, 1 );\r\n      var tempQuaternion = new THREE.Quaternion();\r\n      var unitX = new THREE.Vector3( 1, 0, 0 );\r\n      var unitY = new THREE.Vector3( 0, 1, 0 );\r\n      var unitZ = new THREE.Vector3( 0, 0, 1 );\r\n      var quaternionX = new THREE.Quaternion();\r\n      var quaternionY = new THREE.Quaternion();\r\n      var quaternionZ = new THREE.Quaternion();\r\n      var eye = eye2.clone();\r\n\r\n      worldRotation.copy( this.planes[\"XY\"].rotation );\r\n      tempQuaternion.setFromEuler( worldRotation );\r\n\r\n      tempMatrix.makeRotationFromQuaternion( tempQuaternion ).getInverse( tempMatrix );\r\n      eye.applyMatrix4( tempMatrix );\r\n\r\n      this.traverse(function(child) {\r\n\r\n        tempQuaternion.setFromEuler( worldRotation );\r\n\r\n        if ( child.name == \"RX\" ) {\r\n          quaternionX.setFromAxisAngle( unitX, Math.atan2( -eye.y, eye.z ) );\r\n          tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionX );\r\n          child.quaternion.copy( tempQuaternion );\r\n        }\r\n\r\n        if ( child.name == \"RY\" ) {\r\n          quaternionY.setFromAxisAngle( unitY, Math.atan2( eye.x, eye.z ) );\r\n          tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionY );\r\n          child.quaternion.copy( tempQuaternion );\r\n        }\r\n\r\n        if ( child.name == \"RZ\" ) {\r\n          quaternionZ.setFromAxisAngle( unitZ, Math.atan2( eye.y, eye.x ) );\r\n          tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionZ );\r\n          child.quaternion.copy( tempQuaternion );\r\n        }\r\n\r\n      });\r\n\r\n    };\r\n\r\n    this.init();\r\n\r\n  };\r\n\r\n  THREE.TransformGizmoRotate.prototype = Object.create( THREE.TransformGizmo.prototype );\r\n\r\n  THREE.TransformGizmoTranslateRotate = function () {\r\n\r\n    THREE.TransformGizmo.call( this );\r\n\r\n    var scope = this;\r\n\r\n    this.setHandlePickerGizmos = function () {\r\n\r\n      var arrowGeometry = createArrowGeometry( 0, 0.05, 0.2, 12, 1, false );\r\n      var lineGeometry = new THREE.Geometry();\r\n      lineGeometry.vertices.push( new THREE.Vector3( 0, 0, -0.1 ), new THREE.Vector3( 0, 0, 0.1 ), new THREE.Vector3( -0.1, 0, 0 ), new THREE.Vector3( 0.1, 0, 0 ) );\r\n      var theta = 0.15;\r\n\r\n      this.handleGizmos = {\r\n        Z: [\r\n          [ new THREE.Mesh( arrowGeometry, new GizmoMaterial( { color: 0xffffff } ) ), [ 0, 0, 0.25 ], [ Math.PI/2, 0, 0 ] ],\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.015, 0.015, 0.6, 4, 1, false ), new GizmoMaterial( { color: 0xffffff } ) ), [ 0, 0, 0.5 ],[ Math.PI/2, 0, 0 ] ]\r\n        ],\r\n        RX: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1, 0.015, 12, 60, theta * 2 * Math.PI ), new GizmoMaterial( { color: 0xff0000 } ) ), [ 0, 0, 0 ], [ theta * Math.PI, -Math.PI/2, 0 ] ],\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.05, 0.05, 0.015, 60, 1, false ), new GizmoMaterial( { color: 0xff0000 } ) ), [ 0, 0, 1 ], [ Math.PI/2, 0, 0 ] ]\r\n        ],\r\n        RY: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1, 0.015, 12, 60, theta * 2 * Math.PI ), new GizmoMaterial( { color: 0x0000ff } ) ), [ 0, 0, 0 ], [ Math.PI/2, 0, (0.5-theta)*Math.PI ] ],\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.05, 0.05, 0.01, 60, 1, false ), new GizmoMaterial( { color: 0x0000ff } ) ), [ 0, 0, 1 ] ]\r\n        ]\r\n      };\r\n\r\n      this.pickerGizmos = {\r\n        Z: [\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.12, 0.12, 0.65, 4, 1, false ), new GizmoMaterial( { color: 0x0000ff, opacity: 0.25 } ) ), [ 0, 0, 0.5 ], [ Math.PI/2, 0, 0 ] ]\r\n        ],\r\n        RX: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1, 0.12, 4, 12, theta * 2 * Math.PI ), new GizmoMaterial( { color: 0xff0000, opacity: 0.25 } ) ), [ 0, 0, 0 ], [ theta * Math.PI, -Math.PI/2, 0 ] ]\r\n        ],\r\n        RY: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1, 0.12, 4, 12, theta * 2 * Math.PI ), new GizmoMaterial( { color: 0x0000ff, opacity: 0.25 } ) ), [ 0, 0, 0 ], [ Math.PI/2, 0, (0.5-theta)*Math.PI ] ]\r\n        ]\r\n      };\r\n\r\n      this.subPickerGizmos = {\r\n        Z: [\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.12, 0.12, 0.65, 4, 1, false ), new GizmoMaterial( { color: 0x0000ff, opacity: 0.25 } ) ), [ 0, 0, 0.5 ], [ Math.PI/2, 0, 0 ] ]\r\n        ]\r\n      };\r\n\r\n      this.highlightGizmos = {\r\n        Z: [\r\n        ],\r\n        RX: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1, 0.02, 12, 60, 2 * Math.PI ), new GizmoMaterial( { color: 0xff0000, opacity: 1 } ) ), [ 0, 0, 0 ], [ 0, -Math.PI/2, -Math.PI/2 ], false ]\r\n        ],\r\n        RY: [\r\n          [ new THREE.Mesh( new THREE.TorusGeometry( 1, 0.02, 12, 60, 2 * Math.PI ), new GizmoMaterial( { color: 0x0000ff, opacity: 1 } ) ), [ 0, 0, 0 ], [ Math.PI/2, 0, 0 ], false ]\r\n        ]\r\n      };\r\n\r\n      this.hemiPickerGizmos = {\r\n        XYZ: [\r\n          [ new THREE.Mesh( new THREE.SphereGeometry( 1.2, 8, 8, 0, Math.PI ), new GizmoMaterial( { color: 0x0000ff } ) ), null, null, false ]\r\n        ]\r\n      };\r\n\r\n    };\r\n\r\n    this.setActivePlane = function ( axis, eye ) {\r\n\r\n      if ( this.activeMode == \"translate\" ) {\r\n\r\n        var tempMatrix = new THREE.Matrix4();\r\n        eye.applyMatrix4( tempMatrix.getInverse( tempMatrix.extractRotation( this.planes[ \"XY\" ].matrixWorld ) ) );\r\n\r\n        if ( axis == \"X\" ) {\r\n          this.activePlane = this.planes[ \"XY\" ];\r\n          if ( Math.abs(eye.y) > Math.abs(eye.z) ) this.activePlane = this.planes[ \"XZ\" ];\r\n        }\r\n\r\n        if ( axis == \"Y\" ){\r\n          this.activePlane = this.planes[ \"XY\" ];\r\n          if ( Math.abs(eye.x) > Math.abs(eye.z) ) this.activePlane = this.planes[ \"YZ\" ];\r\n        }\r\n\r\n        if ( axis == \"Z\" ){\r\n          this.activePlane = this.planes[ \"XZ\" ];\r\n          if ( Math.abs(eye.x) > Math.abs(eye.y) ) this.activePlane = this.planes[ \"YZ\" ];\r\n        }\r\n\r\n      } else if ( this.activeMode == \"rotate\" ){\r\n\r\n        if ( axis == \"RX\" ) this.activePlane = this.planes[ \"YZ\" ];\r\n\r\n        if ( axis == \"RY\" ) this.activePlane = this.planes[ \"XZ\" ];\r\n\r\n        if ( axis == \"RZ\" ) this.activePlane = this.planes[ \"XY\" ];\r\n\r\n      }\r\n\r\n      this.hide();\r\n      this.show();\r\n\r\n    };\r\n\r\n    this.update = function ( rotation, eye2 ) {\r\n\r\n      if ( this.activeMode == \"translate\" ) {\r\n\r\n        THREE.TransformGizmo.prototype.update.apply( this, arguments );\r\n\r\n      } else if ( this.activeMode == \"rotate\" ) {\r\n\r\n        THREE.TransformGizmo.prototype.update.apply( this, arguments );\r\n\r\n        var tempMatrix = new THREE.Matrix4();\r\n        var worldRotation = new THREE.Euler( 0, 0, 1 );\r\n        var tempQuaternion = new THREE.Quaternion();\r\n        var unitX = new THREE.Vector3( 1, 0, 0 );\r\n        var unitY = new THREE.Vector3( 0, 1, 0 );\r\n        var unitZ = new THREE.Vector3( 0, 0, 1 );\r\n        var quaternionX = new THREE.Quaternion();\r\n        var quaternionY = new THREE.Quaternion();\r\n        var quaternionZ = new THREE.Quaternion();\r\n        var eye = eye2.clone();\r\n\r\n        worldRotation.copy( this.planes[\"XY\"].rotation );\r\n        tempQuaternion.setFromEuler( worldRotation );\r\n\r\n        tempMatrix.makeRotationFromQuaternion( tempQuaternion ).getInverse( tempMatrix );\r\n        eye.applyMatrix4( tempMatrix );\r\n\r\n        this.traverse(function(child) {\r\n\r\n          tempQuaternion.setFromEuler( worldRotation );\r\n\r\n          if ( child.name == \"RX\" ) {\r\n            quaternionX.setFromAxisAngle( unitX, Math.atan2( -eye.y, eye.z ) );\r\n            tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionX );\r\n            child.quaternion.copy( tempQuaternion );\r\n          }\r\n\r\n          if ( child.name == \"RY\" ) {\r\n            quaternionY.setFromAxisAngle( unitY, Math.atan2( eye.x, eye.z ) );\r\n            tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionY );\r\n            child.quaternion.copy( tempQuaternion );\r\n          }\r\n\r\n          if ( child.name == \"RZ\" ) {\r\n            quaternionZ.setFromAxisAngle( unitZ, Math.atan2( eye.y, eye.x ) );\r\n            tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionZ );\r\n            child.quaternion.copy( tempQuaternion );\r\n          }\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n    this.show = function () {\r\n      this.traverse(function( child ) {\r\n        if ( scope.parent == null || (scope.parent.useAllPickers || child.parent != scope.handles) ) child.visible = true;\r\n        if ( child.material ) child.material.opacity = child.material.oldOpacity;\r\n        if ( child.parent == scope.pickers || child.parent == scope.hemiPicker || child.parent == scope.subPickers) child.visible = false;\r\n        if ( child.parent == scope.planes || child.parent == scope.highlights ) child.visible = false;\r\n      });\r\n      this.activePlane.visible = false;\r\n    };\r\n\r\n    this.highlight = function ( axis ) {\r\n      this.traverse(function( child ) {\r\n        if ( child.material && child.material.highlight ) {\r\n          if ( child.name == axis ) {\r\n            if ( child.parent == scope.highlights || child.parent == scope.handles ) child.visible = true;\r\n            child.material.highlight( true );\r\n          } else {\r\n            child.material.highlight( false );\r\n            child.material.opacity = 0.1;\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    this.init();\r\n\r\n  };\r\n\r\n  THREE.TransformGizmoTranslateRotate.prototype = Object.create( THREE.TransformGizmo.prototype );\r\n\r\n  THREE.TransformGizmoScale = function () {\r\n\r\n    THREE.TransformGizmo.call( this );\r\n\r\n    this.setHandlePickerGizmos = function () {\r\n\r\n      var arrowGeometry = createArrowGeometry( 0.125, 0.125, 0.125 );\r\n      var lineXGeometry = createLineGeometry( 'X' );\r\n      var lineYGeometry = createLineGeometry( 'Y' );\r\n      var lineZGeometry = createLineGeometry( 'Z' );\r\n\r\n      this.handleGizmos = {\r\n        X: [\r\n          [ new THREE.Mesh( arrowGeometry, new GizmoMaterial( { color: 0xff0000 } ) ), [ 0.5, 0, 0 ], [ 0, 0, -Math.PI/2 ] ],\r\n          [ new THREE.Line( lineXGeometry, new GizmoLineMaterial( { color: 0xff0000 } ) ) ]\r\n        ],\r\n        Y: [\r\n          [ new THREE.Mesh( arrowGeometry, new GizmoMaterial( { color: 0x00ff00 } ) ), [ 0, 0.5, 0 ] ],\r\n          [ new THREE.Line( lineYGeometry, new GizmoLineMaterial( { color: 0x00ff00 } ) ) ]\r\n        ],\r\n        Z: [\r\n          [ new THREE.Mesh( arrowGeometry, new GizmoMaterial( { color: 0x0000ff } ) ), [ 0, 0, 0.5 ], [ Math.PI/2, 0, 0 ] ],\r\n          [ new THREE.Line( lineZGeometry, new GizmoLineMaterial( { color: 0x0000ff } ) ) ]\r\n        ],\r\n        XYZ: [\r\n          [ new THREE.Mesh( new THREE.BoxGeometry( 0.125, 0.125, 0.125 ), new GizmoMaterial( { color: 0xffffff, opacity: 0.25 } ) ) ]\r\n        ]\r\n      };\r\n\r\n      this.pickerGizmos = {\r\n        X: [\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.2, 0, 1, 4, 1, false ), new GizmoMaterial( { color: 0xff0000, opacity: 0.25 } ) ), [ 0.6, 0, 0 ], [ 0, 0, -Math.PI/2 ] ]\r\n        ],\r\n        Y: [\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.2, 0, 1, 4, 1, false ), new GizmoMaterial( { color: 0x00ff00, opacity: 0.25 } ) ), [ 0, 0.6, 0 ] ]\r\n        ],\r\n        Z: [\r\n          [ new THREE.Mesh( new THREE.CylinderGeometry( 0.2, 0, 1, 4, 1, false ), new GizmoMaterial( { color: 0x0000ff, opacity: 0.25 } ) ), [ 0, 0, 0.6 ], [ Math.PI/2, 0, 0 ] ]\r\n        ],\r\n        XYZ: [\r\n          [ new THREE.Mesh( new THREE.BoxGeometry( 0.4, 0.4, 0.4 ), new GizmoMaterial( { color: 0xffffff, opacity: 0.25 } ) ) ]\r\n        ]\r\n      };\r\n\r\n    };\r\n\r\n    this.setActivePlane = function ( axis, eye ) {\r\n\r\n      var tempMatrix = new THREE.Matrix4();\r\n      eye.applyMatrix4( tempMatrix.getInverse( tempMatrix.extractRotation( this.planes[ \"XY\" ].matrixWorld ) ) );\r\n\r\n      if ( axis == \"X\" ) {\r\n        this.activePlane = this.planes[ \"XY\" ];\r\n        if ( Math.abs(eye.y) > Math.abs(eye.z) ) this.activePlane = this.planes[ \"XZ\" ];\r\n      }\r\n\r\n      if ( axis == \"Y\" ){\r\n        this.activePlane = this.planes[ \"XY\" ];\r\n        if ( Math.abs(eye.x) > Math.abs(eye.z) ) this.activePlane = this.planes[ \"YZ\" ];\r\n      }\r\n\r\n      if ( axis == \"Z\" ){\r\n        this.activePlane = this.planes[ \"XZ\" ];\r\n        if ( Math.abs(eye.x) > Math.abs(eye.y) ) this.activePlane = this.planes[ \"YZ\" ];\r\n      }\r\n\r\n      if ( axis == \"XYZ\" ) this.activePlane = this.planes[ \"XYZE\" ];\r\n\r\n      this.hide();\r\n      this.show();\r\n\r\n    };\r\n\r\n    this.init();\r\n\r\n  };\r\n\r\n  THREE.TransformGizmoScale.prototype = Object.create( THREE.TransformGizmo.prototype );\r\n\r\n  THREE.TransformControls = function ( camera, domElement, mode ) {\r\n\r\n    // TODO: Make non-uniform scale and rotate play nice in hierarchies\r\n    // TODO: ADD RXYZ contol\r\n\r\n    THREE.Object3D.call( this );\r\n\r\n    domElement = ( domElement !== undefined ) ? domElement : document;\r\n\r\n    this.gizmo = {};\r\n    switch ( mode ) {\r\n      case \"translate\":\r\n        this.gizmo[mode] = new THREE.TransformGizmoTranslate();\r\n        break;\r\n      case \"rotate\":\r\n        this.gizmo[mode] = new THREE.TransformGizmoRotate();\r\n        break;\r\n      case \"transrotate\":\r\n        this.gizmo[mode] = new THREE.TransformGizmoTranslateRotate();\r\n        break;\r\n      case \"scale\":\r\n        this.gizmo[mode] = new THREE.TransformGizmoScale();\r\n        break;\r\n    }\r\n\r\n    this.add(this.gizmo[mode]);\r\n    this.gizmo[mode].hide();\r\n\r\n    this.object = undefined;\r\n    this.snap = null;\r\n    this.snapDelta = 0;\r\n    this.space = \"world\";\r\n    this.size = 1;\r\n    this.axis = null;\r\n    this.useAllPickers = true;\r\n\r\n    this.unitX = new THREE.Vector3( 1, 0, 0 );\r\n    this.unitY = new THREE.Vector3( 0, 1, 0 );\r\n    this.unitZ = new THREE.Vector3( 0, 0, 1 );\r\n    this.normal = new THREE.Vector3(0, 0, 1);\r\n\r\n    if ( mode === \"transrotate\" ) {\r\n      var geometry = new THREE.Geometry();\r\n      geometry.vertices.push( new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1) );\r\n      var material = new THREE.LineBasicMaterial( {color: 0x000000, linewidth:2, depthTest: false} );\r\n      this.startLine = new THREE.Line( geometry, material );\r\n      var geometry = new THREE.Geometry();\r\n      var material = new THREE.LineBasicMaterial( {color: 0xffe603, linewidth:2, depthTest: false} );\r\n      geometry.vertices.push( new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1) );\r\n      this.endLine = new THREE.Line( geometry, material );\r\n      var geometry = new THREE.Geometry();\r\n      var material = new THREE.LineDashedMaterial({color: 0x000000, linewidth:1, depthTest: false});\r\n      geometry.vertices.push( new THREE.Vector3(0, -1, 0), new THREE.Vector3(0, 1, 0) );\r\n      this.centerLine = new THREE.Line( geometry, material );\r\n\r\n      var map = THREE.ImageUtils.loadTexture(Autodesk.Viewing.Private.getResourceUrl(\"res/textures/centerMarker_X.png\"));\r\n      map.magFilter = map.minFilter = THREE.NearestFilter;\r\n      var geometry = new THREE.CircleGeometry( 0.1, 32 );\r\n      var material = new THREE.MeshBasicMaterial({opacity: 1, side: THREE.DoubleSide, transparent:true, map:map});\r\n      this.centerMark = new THREE.Mesh( geometry, material );\r\n      this.centerMark.rotation.set(Math.PI/2, 0, 0);\r\n\r\n      this.ticks = {};\r\n      var map = THREE.ImageUtils.loadTexture(Autodesk.Viewing.Private.getResourceUrl(\"res/textures/cardinalPoint.png\"));\r\n      map.magFilter = map.minFilter = THREE.NearestFilter;\r\n      var material = new THREE.MeshBasicMaterial({depthTest: false, opacity: 1, transparent:true, side: THREE.DoubleSide, map:map});\r\n      var w = 0.12, h = 0.25, d = 1.15;\r\n\r\n      this.ticks[\"RX\"] = new THREE.Object3D();\r\n      var geometry = new THREE.PlaneBufferGeometry(w, h);\r\n      var mesh = new THREE.Mesh(geometry, material);\r\n      mesh.position.set(0, 0, -d-h/2);\r\n      mesh.rotation.set(Math.PI/2, Math.PI/2, 0);\r\n      this.ticks[\"RX\"].add(mesh);\r\n\r\n      mesh = mesh.clone();\r\n      mesh.position.set(0, d+h/2, 0);\r\n      mesh.rotation.set(0, Math.PI/2, 0);\r\n      this.ticks[\"RX\"].add(mesh);\r\n\r\n      mesh = mesh.clone();\r\n      mesh.position.set(0, 0, d+h/2);\r\n      mesh.rotation.set(0, Math.PI/2, Math.PI/2);\r\n      this.ticks[\"RX\"].add(mesh);\r\n\r\n      mesh = mesh.clone();\r\n      mesh.position.set(0, -d-h/2, 0);\r\n      mesh.rotation.set(0, Math.PI/2, 0);\r\n      this.ticks[\"RX\"].add(mesh);\r\n\r\n      this.ticks[\"RY\"] = new THREE.Object3D();\r\n      mesh = mesh.clone();\r\n      mesh.position.set(0, 0, -d-h/2);\r\n      mesh.rotation.set(Math.PI/2, 0, 0);\r\n      this.ticks[\"RY\"].add(mesh);\r\n\r\n      mesh = mesh.clone();\r\n      mesh.position.set(-d-h/2, 0, 0);\r\n      mesh.rotation.set(Math.PI/2, 0, Math.PI/2);\r\n      this.ticks[\"RY\"].add(mesh);\r\n\r\n      mesh = mesh.clone();\r\n      mesh.position.set(0, 0, d+h/2);\r\n      mesh.rotation.set(Math.PI/2, 0, 0);\r\n      this.ticks[\"RY\"].add(mesh);\r\n\r\n      mesh = mesh.clone();\r\n      mesh.position.set(d+h/2, 0, 0);\r\n      mesh.rotation.set(Math.PI/2, 0, Math.PI/2);\r\n      this.ticks[\"RY\"].add(mesh);\r\n    }\r\n\r\n    var scope = this;\r\n\r\n    var _dragging = false;\r\n    var _mode = mode;\r\n    var _plane = \"XY\";\r\n\r\n    var changeEvent = { type: \"change\" };\r\n    var mouseDownEvent = { type: \"mouseDown\" };\r\n    var mouseUpEvent = { type: \"mouseUp\", mode: _mode };\r\n    var objectChangeEvent = { type: \"objectChange\" };\r\n\r\n    var ray = new THREE.Raycaster();\r\n    var pointerVector = new THREE.Vector3();\r\n    var pointerDir = new THREE.Vector3();\r\n\r\n    var point = new THREE.Vector3();\r\n    var offset = new THREE.Vector3();\r\n\r\n    var rotation = new THREE.Vector3();\r\n    var offsetRotation = new THREE.Vector3();\r\n    var scale = 1;\r\n\r\n    var lookAtMatrix = new THREE.Matrix4();\r\n    var eye = new THREE.Vector3();\r\n\r\n    var tempMatrix = new THREE.Matrix4();\r\n    var tempVector = new THREE.Vector3();\r\n    var tempQuaternion = new THREE.Quaternion();\r\n    var projX = new THREE.Vector3();\r\n    var projY = new THREE.Vector3();\r\n    var projZ = new THREE.Vector3();\r\n\r\n    var quaternionXYZ = new THREE.Quaternion();\r\n    var quaternionX = new THREE.Quaternion();\r\n    var quaternionY = new THREE.Quaternion();\r\n    var quaternionZ = new THREE.Quaternion();\r\n    var quaternionE = new THREE.Quaternion();\r\n\r\n    var oldPosition = new THREE.Vector3();\r\n    var oldScale = new THREE.Vector3();\r\n    var oldRotationMatrix = new THREE.Matrix4();\r\n\r\n    var parentRotationMatrix  = new THREE.Matrix4();\r\n    var parentScale = new THREE.Vector3();\r\n\r\n    var worldPosition = new THREE.Vector3();\r\n    var worldRotation = new THREE.Euler();\r\n    var worldRotationMatrix  = new THREE.Matrix4();\r\n    var camPosition = new THREE.Vector3();\r\n    var camRotation = new THREE.Euler();\r\n\r\n    this.attach = function ( object ) {\r\n\r\n      scope.object = object;\r\n\r\n      this.gizmo[_mode].show();\r\n\r\n      scope.update();\r\n\r\n      scope.updateUnitVectors();\r\n\r\n    };\r\n\r\n    this.detach = function ( object ) {\r\n\r\n      scope.object = undefined;\r\n      this.axis = null;\r\n\r\n      this.gizmo[_mode].hide();\r\n\r\n    };\r\n\r\n    this.setMode = function ( mode ) {\r\n\r\n      _mode = mode ? mode : _mode;\r\n\r\n      if ( _mode == \"scale\" ) scope.space = \"local\";\r\n\r\n      this.gizmo[_mode].show();\r\n\r\n      this.update();\r\n      scope.dispatchEvent( changeEvent );\r\n\r\n    };\r\n\r\n    this.getPicker = function () {\r\n\r\n      return scope.gizmo[_mode].hemiPicker.children;\r\n\r\n    };\r\n\r\n    this.setPosition = function ( position ) {\r\n\r\n      this.object.position.copy ( position );\r\n      this.update();\r\n\r\n    };\r\n\r\n    this.setNormal = function ( normal ) {\r\n\r\n      tempQuaternion.setFromUnitVectors( this.normal, normal );\r\n      this.unitX.applyQuaternion( tempQuaternion );\r\n      this.unitY.applyQuaternion( tempQuaternion );\r\n      this.unitZ.applyQuaternion( tempQuaternion );\r\n      this.normal.copy( normal );\r\n      if (this.object) {\r\n        this.object.quaternion.multiply ( tempQuaternion );\r\n      }\r\n      this.update();\r\n    };\r\n\r\n    this.setSnap = function ( snap, delta ) {\r\n\r\n      scope.snap = snap;\r\n      scope.snapDelta = delta;\r\n\r\n    };\r\n\r\n    this.setSize = function ( size ) {\r\n\r\n      scope.size = size;\r\n      this.update();\r\n      scope.dispatchEvent( changeEvent );\r\n\r\n    };\r\n\r\n    this.setSpace = function ( space ) {\r\n\r\n      scope.space = space;\r\n      this.update();\r\n      scope.dispatchEvent( changeEvent );\r\n\r\n    };\r\n\r\n    this.update = function (highlight) {\r\n\r\n      if ( scope.object === undefined ) return;\r\n\r\n      scope.object.updateMatrixWorld();\r\n      worldPosition.setFromMatrixPosition( scope.object.matrixWorld );\r\n      worldRotation.setFromRotationMatrix( tempMatrix.extractRotation( scope.object.matrixWorld ) );\r\n\r\n      camera.updateMatrixWorld();\r\n      camPosition.setFromMatrixPosition( camera.matrixWorld );\r\n      //camRotation.setFromRotationMatrix( tempMatrix.extractRotation( camera.matrixWorld ) );\r\n\r\n      this.position.copy( worldPosition );\r\n\r\n      this.quaternion.setFromEuler( worldRotation );\r\n\r\n      this.normal.set( 0, 0, 1 );\r\n      this.normal.applyEuler( worldRotation );\r\n\r\n      // keep same screen height (100px)\r\n      var dist = worldPosition.distanceTo( camPosition );\r\n      var height = camera.isPerspective? 2 * Math.tan( camera.fov * Math.PI / 360 ) * dist : dist;\r\n      var rect = domElement.getBoundingClientRect();\r\n      scale = 100 * height / rect.height;\r\n      this.scale.set( scale, scale, scale );\r\n\r\n      //eye.copy( camPosition ).sub( worldPosition ).normalize();\r\n\r\n      //if ( scope.space == \"local\" )\r\n      //    this.gizmo[_mode].update( worldRotation, eye );\r\n      //else if ( scope.space == \"world\" )\r\n      //    this.gizmo[_mode].update( new THREE.Euler(), eye );\r\n\r\n      if (highlight)\r\n        this.gizmo[_mode].highlight( scope.axis );\r\n\r\n    };\r\n\r\n    this.updateUnitVectors = function () {\r\n\r\n      this.unitX.set( 1, 0, 0 );\r\n      this.unitY.set( 0, 1, 0 );\r\n      this.unitZ.set( 0, 0, 1 );\r\n      this.unitX.applyEuler( worldRotation );\r\n      this.unitY.applyEuler( worldRotation );\r\n      this.unitZ.applyEuler( worldRotation );\r\n\r\n    };\r\n\r\n    this.showRotationGizmos = function (set) {\r\n\r\n      var handles = this.gizmo[_mode].handles.children;\r\n      for ( var i = 0; i < handles.length; i++ ) {\r\n        var child = handles[i];\r\n        child.visible = true;\r\n        if ( child.name.search(\"R\") !== -1 ) child.visible = set;\r\n      }\r\n      this.useAllPickers = set;\r\n\r\n    };\r\n\r\n    this.highlight = function () {\r\n\r\n      this.gizmo[_mode].highlight( this.axis || \"Z\" );\r\n\r\n    };\r\n\r\n    this.onPointerHover = function( event ) {\r\n\r\n      if ( scope.object === undefined || _dragging === true ) return false;\r\n\r\n      var pointer = event.pointers ? event.pointers[ 0 ] : event;\r\n\r\n      var intersect = intersectObjects( pointer, scope.useAllPickers? scope.gizmo[_mode].pickers.children: scope.gizmo[_mode].subPickers.children );\r\n\r\n      var axis = null;\r\n      var mode = \"\";\r\n\r\n      if ( intersect ) {\r\n\r\n        axis = intersect.object.name;\r\n        mode = axis.search(\"R\") != -1 ? \"rotate\" : \"translate\";\r\n\r\n      }\r\n\r\n      if ( scope.axis !== axis ) {\r\n\r\n        scope.axis = axis;\r\n        scope.gizmo[_mode].activeMode = mode;\r\n        scope.update(true);\r\n        scope.dispatchEvent( changeEvent );\r\n\r\n      }\r\n\r\n      if (scope.axis === null) {\r\n\r\n        scope.gizmo[_mode].show();\r\n\r\n      }\r\n\r\n      return intersect? true : false;\r\n\r\n    }\r\n\r\n    this.onPointerDown = function( event ) {\r\n\r\n      if ( scope.object === undefined || _dragging === true ) return false;\r\n\r\n      var pointer = event.pointers ? event.pointers[ 0 ] : event;\r\n\r\n      if ( event.pointerType === 'touch' ) {\r\n\r\n        var intersect = intersectObjects( pointer, scope.useAllPickers? scope.gizmo[_mode].pickers.children: scope.gizmo[_mode].subPickers.children );\r\n\r\n        var axis = null;\r\n        var mode = \"\";\r\n\r\n        if ( intersect ) {\r\n\r\n          axis = intersect.object.name;\r\n          mode = axis.search(\"R\") != -1 ? \"rotate\" : \"translate\";\r\n\r\n        }\r\n\r\n        if ( scope.axis !== axis ) {\r\n\r\n          scope.axis = axis;\r\n          scope.gizmo[_mode].activeMode = mode;\r\n        }\r\n      }\r\n\r\n      var intersect = null;\r\n\r\n      if ( pointer.button === 0 || pointer.button === undefined ) {\r\n\r\n        intersect = intersectObjects( pointer, scope.useAllPickers? scope.gizmo[_mode].pickers.children: scope.gizmo[_mode].subPickers.children );\r\n\r\n        if ( intersect ) {\r\n\r\n          scope.dispatchEvent( mouseDownEvent );\r\n\r\n          scope.axis = intersect.object.name;\r\n\r\n          scope.update();\r\n\r\n          eye.copy( camera.position ).sub( worldPosition ).normalize();\r\n\r\n          scope.gizmo[_mode].setActivePlane( scope.axis, eye );\r\n\r\n          var planeIntersect = intersectObjects( pointer, [scope.gizmo[_mode].activePlane] );\r\n\r\n          if ( planeIntersect )\r\n            offset.copy( planeIntersect.point );\r\n\r\n          oldPosition.copy( scope.object.position );\r\n          oldScale.copy( scope.object.scale );\r\n\r\n          oldRotationMatrix.extractRotation( scope.object.matrix );\r\n          worldRotationMatrix.extractRotation( scope.object.matrixWorld );\r\n\r\n          if ( scope.object.parent ) {\r\n            parentRotationMatrix.extractRotation( scope.object.parent.matrixWorld );\r\n            parentScale.setFromMatrixScale( tempMatrix.getInverse( scope.object.parent.matrixWorld ) );\r\n          } else {\r\n            parentRotationMatrix.extractRotation( scope.object.matrixWorld );\r\n            parentScale.setFromMatrixScale( tempMatrix.getInverse( scope.object.matrixWorld ) );\r\n          }\r\n\r\n          // show rotation start line and ticks\r\n          if ( _mode === \"transrotate\" && scope.gizmo[_mode].activeMode === \"rotate\" ) {\r\n            scope.startLine.geometry.vertices[0].set(0, 0, 0).applyMatrix4( scope.matrixWorld );\r\n            scope.startLine.geometry.vertices[1].set(0, 0, 1).applyMatrix4( scope.matrixWorld );\r\n            scope.startLine.geometry.verticesNeedUpdate = true;\r\n            scope.parent.add( scope.startLine );\r\n\r\n            var pos = scope.object.geometry.getAttribute('position');\r\n            var pt1 = new THREE.Vector3().fromAttribute(pos, 0).applyMatrix4( scope.object.matrixWorld );\r\n            var pt2 = new THREE.Vector3().fromAttribute(pos, 1).applyMatrix4( scope.object.matrixWorld );\r\n            var pt3 = new THREE.Vector3().fromAttribute(pos, 2).applyMatrix4( scope.object.matrixWorld );\r\n            var pt4 = new THREE.Vector3().fromAttribute(pos, 3).applyMatrix4( scope.object.matrixWorld );\r\n            if (scope.axis === \"RX\") {\r\n              pt1.lerp(pt3, 0.5);\r\n              pt2.lerp(pt4, 0.5);\r\n              var dist = pt1.distanceTo(pt2);\r\n              scope.centerLine.material.dashSize = dist / 15;\r\n              scope.centerLine.material.gapSize = dist / 30;\r\n              scope.centerLine.geometry.vertices[0].copy(pt1);\r\n              scope.centerLine.geometry.vertices[1].copy(pt2);\r\n            } else {\r\n              pt1.lerp(pt2, 0.5);\r\n              pt3.lerp(pt4, 0.5);\r\n              var dist = pt1.distanceTo(pt3);\r\n              scope.centerLine.material.dashSize = dist / 15;\r\n              scope.centerLine.material.gapSize = dist / 30;\r\n              scope.centerLine.geometry.vertices[0].copy(pt1);\r\n              scope.centerLine.geometry.vertices[1].copy(pt3);\r\n            }\r\n            scope.centerLine.geometry.computeLineDistances();\r\n            scope.centerLine.geometry.verticesNeedUpdate = true;\r\n            scope.parent.add( scope.centerLine );\r\n\r\n            scope.ticks[scope.axis].position.copy( scope.position );\r\n            scope.ticks[scope.axis].quaternion.copy( scope.quaternion );\r\n            scope.ticks[scope.axis].scale.copy( scope.scale );\r\n            scope.parent.add( scope.ticks[scope.axis] );\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n      _dragging = true;\r\n\r\n      return intersect? true: false;\r\n\r\n    }\r\n\r\n    this.onPointerMove = function( event ) {\r\n\r\n      if ( scope.object === undefined || scope.axis === null || _dragging === false ) return false;\r\n\r\n      var pointer = event.pointers ? event.pointers[ 0 ] : event;\r\n\r\n      var planeIntersect = intersectObjects( pointer, [scope.gizmo[_mode].activePlane] );\r\n\r\n      if ( planeIntersect )\r\n        point.copy( planeIntersect.point );\r\n\r\n      var mode = scope.gizmo[_mode].activeMode;\r\n      if ( mode == \"translate\" ) {\r\n\r\n        point.sub( offset );\r\n        point.multiply(parentScale);\r\n\r\n        if ( scope.space == \"local\" ) {\r\n\r\n          point.applyMatrix4( tempMatrix.getInverse( worldRotationMatrix ) );\r\n\r\n          projX.copy( this.unitX );\r\n          projY.copy( this.unitY );\r\n          projZ.copy( this.unitZ );\r\n          tempVector.set( 0, 0, 0 );\r\n          if ( scope.axis.search(\"X\") != -1 ) {\r\n            projX.multiplyScalar( point.dot( this.unitX ) );\r\n            tempVector.add( projX );\r\n          }\r\n          if ( scope.axis.search(\"Y\") != -1 ) {\r\n            projY.multiplyScalar( point.dot( this.unitY ) );\r\n            tempVector.add(projY);\r\n          }\r\n          if ( scope.axis.search(\"Z\") != -1 ) {\r\n            projZ.multiplyScalar( point.dot( this.unitZ ) );\r\n            tempVector.add( projZ );\r\n          }\r\n          point.copy( tempVector );\r\n\r\n          point.applyMatrix4( oldRotationMatrix );\r\n\r\n          scope.object.position.copy( oldPosition );\r\n          scope.object.position.add( point );\r\n\r\n        }\r\n\r\n        if ( scope.space == \"world\" || scope.axis.search(\"XYZ\") != -1 ) {\r\n\r\n          projX.copy( this.unitX );\r\n          projY.copy( this.unitY );\r\n          projZ.copy( this.unitZ );\r\n          tempVector.set( 0, 0, 0 );\r\n          if ( scope.axis.search(\"X\") != -1 ) {\r\n            projX.multiplyScalar( point.dot( this.unitX ) );\r\n            tempVector.add( projX );\r\n          }\r\n          if ( scope.axis.search(\"Y\") != -1 ) {\r\n            projY.multiplyScalar( point.dot( this.unitY ) );\r\n            tempVector.add(projY);\r\n          }\r\n          if ( scope.axis.search(\"Z\") != -1 ) {\r\n            projZ.multiplyScalar( point.dot( this.unitZ ) );\r\n            tempVector.add( projZ );\r\n          }\r\n          point.copy( tempVector );\r\n\r\n          point.applyMatrix4( tempMatrix.getInverse( parentRotationMatrix ) );\r\n\r\n          scope.object.position.copy( oldPosition );\r\n          scope.object.position.add( point );\r\n\r\n        }\r\n\r\n      } else if ( mode == \"scale\" ) {\r\n\r\n        point.sub( offset );\r\n        point.multiply(parentScale);\r\n\r\n        if ( scope.space == \"local\" ) {\r\n\r\n          if ( scope.axis == \"XYZ\") {\r\n\r\n            scale = 1 + ( ( point.y ) / 50 );\r\n\r\n            scope.object.scale.x = oldScale.x * scale;\r\n            scope.object.scale.y = oldScale.y * scale;\r\n            scope.object.scale.z = oldScale.z * scale;\r\n\r\n          } else {\r\n\r\n            point.applyMatrix4( tempMatrix.getInverse( worldRotationMatrix ) );\r\n\r\n            if ( scope.axis == \"X\" ) scope.object.scale.x = oldScale.x * ( 1 + point.x / 50 );\r\n            if ( scope.axis == \"Y\" ) scope.object.scale.y = oldScale.y * ( 1 + point.y / 50 );\r\n            if ( scope.axis == \"Z\" ) scope.object.scale.z = oldScale.z * ( 1 + point.z / 50 );\r\n\r\n          }\r\n\r\n        }\r\n\r\n      } else if ( mode == \"rotate\") {\r\n\r\n        point.sub( worldPosition );\r\n        point.multiply(parentScale);\r\n        tempVector.copy(offset).sub( worldPosition );\r\n        tempVector.multiply(parentScale);\r\n\r\n        if ( scope.axis == \"RE\" ) {\r\n\r\n          point.applyMatrix4( tempMatrix.getInverse( lookAtMatrix ) );\r\n          tempVector.applyMatrix4( tempMatrix.getInverse( lookAtMatrix ) );\r\n\r\n          rotation.set( Math.atan2( point.z, point.y ), Math.atan2( point.x, point.z ), Math.atan2( point.y, point.x ) );\r\n          offsetRotation.set( Math.atan2( tempVector.z, tempVector.y ), Math.atan2( tempVector.x, tempVector.z ), Math.atan2( tempVector.y, tempVector.x ) );\r\n\r\n          tempQuaternion.setFromRotationMatrix( tempMatrix.getInverse( parentRotationMatrix ) );\r\n\r\n          var rotz = rotation.z - offsetRotation.z;\r\n          if ( scope.snap !== null ) {\r\n            var rotsnap = Math.round( rotz / scope.snap ) * scope.snap;\r\n            if ( Math.abs(rotsnap-rotz) < scope.snapDelta ) {\r\n              rotz = rotsnap;\r\n            }\r\n          }\r\n          quaternionE.setFromAxisAngle( eye, rotz );\r\n          quaternionXYZ.setFromRotationMatrix( worldRotationMatrix );\r\n\r\n          tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionE );\r\n          tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionXYZ );\r\n\r\n          scope.object.quaternion.copy( tempQuaternion );\r\n\r\n        } else if ( scope.axis == \"RXYZE\" ) {\r\n\r\n          var tempAxis = point.clone().cross(tempVector).normalize(); // rotation axis\r\n\r\n          tempQuaternion.setFromRotationMatrix( tempMatrix.getInverse( parentRotationMatrix ) );\r\n\r\n          var rot = - point.clone().angleTo(tempVector);\r\n          if ( scope.snap !== null ) {\r\n            var rotsnap = Math.round( rot / scope.snap ) * scope.snap;\r\n            if ( Math.abs(rotsnap-rot) < scope.snapDelta ) {\r\n              rot = rotsnap;\r\n            }\r\n          }\r\n          quaternionX.setFromAxisAngle( tempAxis, rot );\r\n          quaternionXYZ.setFromRotationMatrix( worldRotationMatrix );\r\n\r\n          tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionX );\r\n          tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionXYZ );\r\n\r\n          scope.object.quaternion.copy( tempQuaternion );\r\n\r\n        } else if ( scope.space == \"local\" ) {\r\n\r\n          point.applyMatrix4( tempMatrix.getInverse( worldRotationMatrix ) );\r\n\r\n          tempVector.applyMatrix4( tempMatrix.getInverse( worldRotationMatrix ) );\r\n\r\n          var projx = point.dot(this.unitX), projy = point.dot(this.unitY), projz = point.dot(this.unitZ);\r\n          var tempx = tempVector.dot(this.unitX), tempy = tempVector.dot(this.unitY), tempz = tempVector.dot(this.unitZ);\r\n          rotation.set( Math.atan2( projz, projy ), Math.atan2( projx, projz ), Math.atan2( projy, projx ) );\r\n          offsetRotation.set( Math.atan2( tempz, tempy ), Math.atan2( tempx, tempz ), Math.atan2( tempy, tempx ) );\r\n\r\n          var rotx = rotation.x - offsetRotation.x;\r\n          var roty = rotation.y - offsetRotation.y;\r\n          var rotz = rotation.z - offsetRotation.z;\r\n          if ( scope.snap !== null ) {\r\n            if ( scope.axis.search(\"X\") != -1 ) {\r\n              var rotsnap = Math.round( rotx / scope.snap ) * scope.snap;\r\n              if ( Math.abs(rotsnap-rotx) < scope.snapDelta ) {\r\n                rotx = rotsnap;\r\n              }\r\n            }\r\n            if ( scope.axis.search(\"Y\") != -1 ) {\r\n              var rotsnap = Math.round( roty / scope.snap ) * scope.snap;\r\n              if ( Math.abs(rotsnap-roty) < scope.snapDelta ) {\r\n                roty = rotsnap;\r\n              }\r\n            }\r\n            if ( scope.axis.search(\"Z\") != -1 ) {\r\n              var rotsnap = Math.round( rotz / scope.snap ) * scope.snap;\r\n              if ( Math.abs(rotsnap-rotz) < scope.snapDelta ) {\r\n                rotz = rotsnap;\r\n              }\r\n            }\r\n          }\r\n          quaternionX.setFromAxisAngle( this.unitX, rotx );\r\n          quaternionY.setFromAxisAngle( this.unitY, roty );\r\n          quaternionZ.setFromAxisAngle( this.unitZ, rotz );\r\n          quaternionXYZ.setFromRotationMatrix( oldRotationMatrix );\r\n\r\n          if ( scope.axis == \"RX\" ) quaternionXYZ.multiplyQuaternions( quaternionXYZ, quaternionX );\r\n          if ( scope.axis == \"RY\" ) quaternionXYZ.multiplyQuaternions( quaternionXYZ, quaternionY );\r\n          if ( scope.axis == \"RZ\" ) quaternionXYZ.multiplyQuaternions( quaternionXYZ, quaternionZ );\r\n\r\n          scope.object.quaternion.copy( quaternionXYZ );\r\n\r\n        } else if ( scope.space == \"world\" ) {\r\n\r\n          var projx = point.dot(this.unitX), projy = point.dot(this.unitY), projz = point.dot(this.unitZ);\r\n          var tempx = tempVector.dot(this.unitX), tempy = tempVector.dot(this.unitY), tempz = tempVector.dot(this.unitZ);\r\n          rotation.set( Math.atan2( projz, projy ), Math.atan2( projx, projz ), Math.atan2( projy, projx ) );\r\n          offsetRotation.set( Math.atan2( tempz, tempy ), Math.atan2( tempx, tempz ), Math.atan2( tempy, tempx ) );\r\n\r\n          tempQuaternion.setFromRotationMatrix( tempMatrix.getInverse( parentRotationMatrix ) );\r\n\r\n          var rotx = rotation.x - offsetRotation.x;\r\n          var roty = rotation.y - offsetRotation.y;\r\n          var rotz = rotation.z - offsetRotation.z;\r\n          if ( scope.snap !== null ) {\r\n            if ( scope.axis.search(\"X\") != -1 ) {\r\n              var rotsnap = Math.round( rotx / scope.snap ) * scope.snap;\r\n              if ( Math.abs(rotsnap-rotx) < scope.snapDelta ) {\r\n                rotx = rotsnap;\r\n              }\r\n            }\r\n            if ( scope.axis.search(\"Y\") != -1 ) {\r\n              var rotsnap = Math.round( roty / scope.snap ) * scope.snap;\r\n              if ( Math.abs(rotsnap-roty) < scope.snapDelta ) {\r\n                roty = rotsnap;\r\n              }\r\n            }\r\n            if ( scope.axis.search(\"Z\") != -1 ) {\r\n              var rotsnap = Math.round( rotz / scope.snap ) * scope.snap;\r\n              if ( Math.abs(rotsnap-rotz) < scope.snapDelta ) {\r\n                rotz = rotsnap;\r\n              }\r\n            }\r\n          }\r\n          quaternionX.setFromAxisAngle( this.unitX, rotx );\r\n          quaternionY.setFromAxisAngle( this.unitY, roty );\r\n          quaternionZ.setFromAxisAngle( this.unitZ, rotz );\r\n          quaternionXYZ.setFromRotationMatrix( worldRotationMatrix );\r\n\r\n          if ( scope.axis == \"RX\" ) tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionX );\r\n          if ( scope.axis == \"RY\" ) tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionY );\r\n          if ( scope.axis == \"RZ\" ) tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionZ );\r\n\r\n          tempQuaternion.multiplyQuaternions( tempQuaternion, quaternionXYZ );\r\n\r\n          scope.object.quaternion.copy( tempQuaternion );\r\n\r\n        }\r\n\r\n        // show rotation end line\r\n        if (_mode === \"transrotate\" ) {\r\n          scope.add( scope.endLine );\r\n          scope.add( scope.centerMark );\r\n        }\r\n\r\n      }\r\n\r\n      // update matrix\r\n      scope.object.matrixAutoUpdate = true;\r\n\r\n      scope.update(true);\r\n      scope.dispatchEvent( changeEvent );\r\n      scope.dispatchEvent( objectChangeEvent );\r\n\r\n      return planeIntersect? true : false;\r\n\r\n    }\r\n\r\n    this.onPointerUp = function( event ) {\r\n\r\n      if ( _dragging && ( scope.axis !== null ) ) {\r\n        mouseUpEvent.mode = _mode;\r\n        scope.dispatchEvent( mouseUpEvent )\r\n      }\r\n      _dragging = false;\r\n\r\n      this.gizmo[_mode].show();\r\n\r\n      this.updateUnitVectors();\r\n\r\n      // remove rotation start/end lines\r\n      if ( _mode === \"transrotate\" && this.gizmo[_mode].activeMode === \"rotate\" ) {\r\n        this.remove( this.endLine );\r\n        this.remove( this.centerMark );\r\n        this.parent.remove( this.centerLine );\r\n        this.parent.remove( this.startLine );\r\n        this.parent.remove( this.ticks[this.axis] );\r\n      }\r\n\r\n      return false;\r\n\r\n    }\r\n\r\n    function intersectObjects( pointer, objects ) {\r\n\r\n      var rect = domElement.getBoundingClientRect();\r\n      var x = ( ( pointer.clientX - rect.left ) / rect.width ) * 2 - 1;\r\n      var y = - ( ( pointer.clientY - rect.top ) / rect.height ) * 2 + 1;\r\n\r\n      if ( camera.isPerspective ) {\r\n        pointerVector.set( x, y, 0.5 );\r\n        pointerVector.unproject( camera );\r\n        ray.set( camera.position, pointerVector.sub( camera.position ).normalize() );\r\n      } else {\r\n        pointerVector.set( x, y, -1 );\r\n        pointerVector.unproject( camera );\r\n        pointerDir.set( 0, 0, -1 );\r\n        ray.set( pointerVector, pointerDir.transformDirection( camera.matrixWorld ) );\r\n      }\r\n\r\n      var intersections = ray.intersectObjects( objects, true );\r\n      return intersections[0] ? intersections[0] : false;\r\n\r\n    }\r\n\r\n  };\r\n\r\n  THREE.TransformControls.prototype = Object.create( THREE.Object3D.prototype );\r\n})()"]},"metadata":{},"sourceType":"module"}